ARM GAS  /tmp/ccoI51lI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_api.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.getStartMotorTick,"ax",%progbits
  18              		.align	1
  19              		.global	getStartMotorTick
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	getStartMotorTick:
  27              	.LFB1435:
  28              		.file 1 "Src/mc_api.c"
   1:Src/mc_api.c  **** 
   2:Src/mc_api.c  **** /**
   3:Src/mc_api.c  ****   ******************************************************************************
   4:Src/mc_api.c  ****   * @file    mc_api.c
   5:Src/mc_api.c  ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_api.c  ****   * @brief   This file implements the high level interface of the Motor Control SDK.
   7:Src/mc_api.c  ****   ******************************************************************************
   8:Src/mc_api.c  ****   * @attention
   9:Src/mc_api.c  ****   *
  10:Src/mc_api.c  ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  11:Src/mc_api.c  ****   * All rights reserved.</center></h2>
  12:Src/mc_api.c  ****   *
  13:Src/mc_api.c  ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/mc_api.c  ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/mc_api.c  ****   * the License. You may obtain a copy of the License at:
  16:Src/mc_api.c  ****   *                             www.st.com/SLA0044
  17:Src/mc_api.c  ****   *
  18:Src/mc_api.c  ****   ******************************************************************************
  19:Src/mc_api.c  ****   */
  20:Src/mc_api.c  **** 
  21:Src/mc_api.c  **** #include "mc_interface.h"
  22:Src/mc_api.c  **** #include "mc_api.h"
  23:Src/mc_api.c  **** #include "mc_config.h"
  24:Src/mc_api.c  **** #include "debug_scope.h"
  25:Src/mc_api.c  **** 
  26:Src/mc_api.c  **** static int64_t startMotorTime = -1;
  27:Src/mc_api.c  **** /** @addtogroup MCSDK
  28:Src/mc_api.c  ****   * @{
  29:Src/mc_api.c  ****   */
  30:Src/mc_api.c  **** 
ARM GAS  /tmp/ccoI51lI.s 			page 2


  31:Src/mc_api.c  **** /** @defgroup MCIAPI Motor Control API
  32:Src/mc_api.c  ****   *
  33:Src/mc_api.c  ****   * @brief High level Programming Interface of the Motor Control SDK
  34:Src/mc_api.c  ****   *
  35:Src/mc_api.c  ****   *  This interface allows for performing basic operations on the motor(s) driven by an
  36:Src/mc_api.c  ****   * Motor Control SDK based application. With it, motors can be started and stopped, speed or
  37:Src/mc_api.c  ****   * torque ramps can be programmed and executed and information on the state of the motors can
  38:Src/mc_api.c  ****   * be retrieved, among others.
  39:Src/mc_api.c  ****   *
  40:Src/mc_api.c  ****   *  This interface consists in functions that target a specific motor, indicated in their name.
  41:Src/mc_api.c  ****   * These functions aims at being the main interface used by an Application to control motors.
  42:Src/mc_api.c  ****   *
  43:Src/mc_api.c  ****   *  The current Motor Control API can cope with up to 2 motors.
  44:Src/mc_api.c  ****   * @{
  45:Src/mc_api.c  ****   */
  46:Src/mc_api.c  **** int64_t getStartMotorTick()
  47:Src/mc_api.c  **** {
  29              		.loc 1 47 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  48:Src/mc_api.c  ****   return startMotorTime;
  34              		.loc 1 48 3 view .LVU1
  49:Src/mc_api.c  **** }
  35              		.loc 1 49 1 is_stmt 0 view .LVU2
  36 0000 014B     		ldr	r3, .L2
  37 0002 D3E90001 		ldrd	r0, [r3]
  38 0006 7047     		bx	lr
  39              	.L3:
  40              		.align	2
  41              	.L2:
  42 0008 00000000 		.word	.LANCHOR0
  43              		.cfi_endproc
  44              	.LFE1435:
  46              		.section	.text.MC_StartMotor1,"ax",%progbits
  47              		.align	1
  48              		.weak	MC_StartMotor1
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv4-sp-d16
  54              	MC_StartMotor1:
  55              	.LFB1436:
  50:Src/mc_api.c  **** 
  51:Src/mc_api.c  **** /**
  52:Src/mc_api.c  ****   * @brief  Initiates the start-up procedure for Motor 1
  53:Src/mc_api.c  ****   *
  54:Src/mc_api.c  ****   * If the state machine of Motor 1 is in #IDLE state, the command is immediately
  55:Src/mc_api.c  ****   * executed. Otherwise the command is discarded. The Application can check the
  56:Src/mc_api.c  ****   * return value to know whether the command was executed or discarded.
  57:Src/mc_api.c  ****   *
  58:Src/mc_api.c  ****   * One of the following commands must be executed before calling MC_StartMotor1():
  59:Src/mc_api.c  ****   *
  60:Src/mc_api.c  ****   * - MC_ProgramSpeedRampMotor1()
  61:Src/mc_api.c  ****   * - MC_ProgramTorqueRampMotor1()
  62:Src/mc_api.c  ****   * - MC_SetCurrentReferenceMotor1()
ARM GAS  /tmp/ccoI51lI.s 			page 3


  63:Src/mc_api.c  ****   *
  64:Src/mc_api.c  ****   * Failing to do so results in an unpredictable behaviour.
  65:Src/mc_api.c  ****   *
  66:Src/mc_api.c  ****   * @note The MC_StartMotor1() command only triggers the start-up procedure:
  67:Src/mc_api.c  ****   * It moves Motor 1's state machine from the #IDLE to the #IDLE_START state and then
  68:Src/mc_api.c  ****   * returns. It is not blocking the application until the motor is indeed running.
  69:Src/mc_api.c  ****   * To know if it is running, the application can query Motor 1's state machine and
  70:Src/mc_api.c  ****   * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  71:Src/mc_api.c  ****   *
  72:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
  73:Src/mc_api.c  ****   */
  74:Src/mc_api.c  **** __weak bool MC_StartMotor1(void)
  75:Src/mc_api.c  **** {
  56              		.loc 1 75 1 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 08B5     		push	{r3, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 3, -8
  63              		.cfi_offset 14, -4
  76:Src/mc_api.c  ****   startMotorTime = getTickMSCounter();
  64              		.loc 1 76 3 view .LVU4
  65              		.loc 1 76 20 is_stmt 0 view .LVU5
  66 0002 FFF7FEFF 		bl	getTickMSCounter
  67              	.LVL0:
  68              		.loc 1 76 18 view .LVU6
  69 0006 044B     		ldr	r3, .L6
  70 0008 C3E90001 		strd	r0, [r3]
  77:Src/mc_api.c  **** 	return MCI_StartMotor( pMCI[M1] );
  71              		.loc 1 77 2 is_stmt 1 view .LVU7
  72              		.loc 1 77 9 is_stmt 0 view .LVU8
  73 000c 034B     		ldr	r3, .L6+4
  74 000e 1868     		ldr	r0, [r3]
  75 0010 FFF7FEFF 		bl	MCI_StartMotor
  76              	.LVL1:
  78:Src/mc_api.c  **** }
  77              		.loc 1 78 1 view .LVU9
  78 0014 08BD     		pop	{r3, pc}
  79              	.L7:
  80 0016 00BF     		.align	2
  81              	.L6:
  82 0018 00000000 		.word	.LANCHOR0
  83 001c 00000000 		.word	pMCI
  84              		.cfi_endproc
  85              	.LFE1436:
  87              		.section	.text.MC_StopMotor1,"ax",%progbits
  88              		.align	1
  89              		.weak	MC_StopMotor1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	MC_StopMotor1:
  96              	.LFB1437:
  79:Src/mc_api.c  **** 
  80:Src/mc_api.c  **** /**
ARM GAS  /tmp/ccoI51lI.s 			page 4


  81:Src/mc_api.c  ****   * @brief  Initiates the stop procedure for Motor 1.
  82:Src/mc_api.c  ****   *
  83:Src/mc_api.c  ****   *  If the state machine is in #RUN or #START states the command is immediately
  84:Src/mc_api.c  ****   * executed. Otherwise, the command is discarded. The Application can check the
  85:Src/mc_api.c  ****   * return value to know whether the command was executed or discarded.
  86:Src/mc_api.c  ****   *
  87:Src/mc_api.c  ****   * @note The MCI_StopMotor1() command only triggers the stop motor procedure
  88:Src/mc_api.c  ****   * moving Motor 1's state machine to #ANY_STOP and then returns. It is not
  89:Src/mc_api.c  ****   * blocking the application until the motor is indeed stopped. To know if it has
  90:Src/mc_api.c  ****   * stopped, the application can query Motor 1's state machine ans check if the
  91:Src/mc_api.c  ****   * #IDLE state has been reached back.
  92:Src/mc_api.c  ****   *
  93:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
  94:Src/mc_api.c  ****   */
  95:Src/mc_api.c  **** __weak bool MC_StopMotor1(void)
  96:Src/mc_api.c  **** {
  97              		.loc 1 96 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 08B5     		push	{r3, lr}
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 3, -8
 104              		.cfi_offset 14, -4
  97:Src/mc_api.c  **** 	return MCI_StopMotor( pMCI[M1] );
 105              		.loc 1 97 2 view .LVU11
 106              		.loc 1 97 9 is_stmt 0 view .LVU12
 107 0002 024B     		ldr	r3, .L10
 108 0004 1868     		ldr	r0, [r3]
 109 0006 FFF7FEFF 		bl	MCI_StopMotor
 110              	.LVL2:
  98:Src/mc_api.c  **** }
 111              		.loc 1 98 1 view .LVU13
 112 000a 08BD     		pop	{r3, pc}
 113              	.L11:
 114              		.align	2
 115              	.L10:
 116 000c 00000000 		.word	pMCI
 117              		.cfi_endproc
 118              	.LFE1437:
 120              		.section	.text.MC_ProgramSpeedRampMotor1,"ax",%progbits
 121              		.align	1
 122              		.weak	MC_ProgramSpeedRampMotor1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv4-sp-d16
 128              	MC_ProgramSpeedRampMotor1:
 129              	.LVL3:
 130              	.LFB1438:
  99:Src/mc_api.c  **** 
 100:Src/mc_api.c  **** /**
 101:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 102:Src/mc_api.c  ****   *
 103:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p hFinalSpeed
 104:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 105:Src/mc_api.c  ****   *
ARM GAS  /tmp/ccoI51lI.s 			page 5


 106:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 107:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 108:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 109:Src/mc_api.c  ****   * ramp is buffered and will be executed when the state machine reaches any of
 110:Src/mc_api.c  ****   * the aforementioned state.
 111:Src/mc_api.c  ****   *
 112:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 113:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 114:Src/mc_api.c  ****   *
 115:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 116:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 117:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 118:Src/mc_api.c  ****   *
 119:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 120:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 121:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 122:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 123:Src/mc_api.c  ****   * reach 0 rpm.
 124:Src/mc_api.c  ****   *
 125:Src/mc_api.c  ****   * @param  hFinalSpeed Mechanical rotor speed reference at the end of the ramp.
 126:Src/mc_api.c  ****   *                     Expressed in the unit defined by #SPEED_UNIT.
 127:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 128:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
 129:Src/mc_api.c  ****   *         value.
 130:Src/mc_api.c  ****   */
 131:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
 132:Src/mc_api.c  **** {
 131              		.loc 1 132 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		.loc 1 132 1 is_stmt 0 view .LVU15
 136 0000 08B5     		push	{r3, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 3, -8
 139              		.cfi_offset 14, -4
 140 0002 0A46     		mov	r2, r1
 133:Src/mc_api.c  **** 	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 141              		.loc 1 133 2 is_stmt 1 view .LVU16
 142 0004 0146     		mov	r1, r0
 143              	.LVL4:
 144              		.loc 1 133 2 is_stmt 0 view .LVU17
 145 0006 024B     		ldr	r3, .L14
 146 0008 1868     		ldr	r0, [r3]
 147              	.LVL5:
 148              		.loc 1 133 2 view .LVU18
 149 000a FFF7FEFF 		bl	MCI_ExecSpeedRamp
 150              	.LVL6:
 134:Src/mc_api.c  **** }
 151              		.loc 1 134 1 view .LVU19
 152 000e 08BD     		pop	{r3, pc}
 153              	.L15:
 154              		.align	2
 155              	.L14:
 156 0010 00000000 		.word	pMCI
 157              		.cfi_endproc
 158              	.LFE1438:
ARM GAS  /tmp/ccoI51lI.s 			page 6


 160              		.section	.text.MC_ProgramSpeedSinMotor1,"ax",%progbits
 161              		.align	1
 162              		.weak	MC_ProgramSpeedSinMotor1
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv4-sp-d16
 168              	MC_ProgramSpeedSinMotor1:
 169              	.LVL7:
 170              	.LFB1439:
 135:Src/mc_api.c  **** 
 136:Src/mc_api.c  **** __weak void MC_ProgramSpeedSinMotor1( const int16_t hFinalSpeedMean, const uint16_t hFinalSpeedAmp,
 137:Src/mc_api.c  **** {
 171              		.loc 1 137 1 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		.loc 1 137 1 is_stmt 0 view .LVU21
 176 0000 08B5     		push	{r3, lr}
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 3, -8
 179              		.cfi_offset 14, -4
 180 0002 1346     		mov	r3, r2
 138:Src/mc_api.c  **** 	MCI_ExecSpeedSin( pMCI[M1], hFinalSpeedMean, hFinalSpeedAmp, hPhase );
 181              		.loc 1 138 2 is_stmt 1 view .LVU22
 182 0004 0A46     		mov	r2, r1
 183              	.LVL8:
 184              		.loc 1 138 2 is_stmt 0 view .LVU23
 185 0006 0146     		mov	r1, r0
 186              	.LVL9:
 187              		.loc 1 138 2 view .LVU24
 188 0008 0248     		ldr	r0, .L18
 189              	.LVL10:
 190              		.loc 1 138 2 view .LVU25
 191 000a 0068     		ldr	r0, [r0]
 192 000c FFF7FEFF 		bl	MCI_ExecSpeedSin
 193              	.LVL11:
 139:Src/mc_api.c  **** }
 194              		.loc 1 139 1 view .LVU26
 195 0010 08BD     		pop	{r3, pc}
 196              	.L19:
 197 0012 00BF     		.align	2
 198              	.L18:
 199 0014 00000000 		.word	pMCI
 200              		.cfi_endproc
 201              	.LFE1439:
 203              		.section	.text.MC_ProgramSpeedRampMotor1_F,"ax",%progbits
 204              		.align	1
 205              		.weak	MC_ProgramSpeedRampMotor1_F
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv4-sp-d16
 211              	MC_ProgramSpeedRampMotor1_F:
 212              	.LVL12:
 213              	.LFB1440:
 140:Src/mc_api.c  **** /**
ARM GAS  /tmp/ccoI51lI.s 			page 7


 141:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 142:Src/mc_api.c  ****   *
 143:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p FinalSpeed
 144:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 145:Src/mc_api.c  ****   *
 146:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 147:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 148:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 149:Src/mc_api.c  ****   * ramp is buffered and will be executed when the state machine reaches any of
 150:Src/mc_api.c  ****   * the aforementioned state.
 151:Src/mc_api.c  ****   *
 152:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 153:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 154:Src/mc_api.c  ****   *
 155:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 156:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 157:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 158:Src/mc_api.c  ****   *
 159:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 160:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 161:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 162:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 163:Src/mc_api.c  ****   * reach 0 rpm.
 164:Src/mc_api.c  ****   *
 165:Src/mc_api.c  ****   * @param  FinalSpeed Mechanical rotor speed reference at the end of the ramp.
 166:Src/mc_api.c  ****   *         Expressed in rpm.
 167:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 168:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
 169:Src/mc_api.c  ****   *         value.
 170:Src/mc_api.c  ****   */
 171:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1_F( float FinalSpeed, uint16_t hDurationms )
 172:Src/mc_api.c  **** {
 214              		.loc 1 172 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		.loc 1 172 1 is_stmt 0 view .LVU28
 219 0000 08B5     		push	{r3, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 3, -8
 222              		.cfi_offset 14, -4
 223 0002 0146     		mov	r1, r0
 173:Src/mc_api.c  **** 	MCI_ExecSpeedRamp_F( pMCI[M1], FinalSpeed, hDurationms );
 224              		.loc 1 173 2 is_stmt 1 view .LVU29
 225 0004 024B     		ldr	r3, .L22
 226 0006 1868     		ldr	r0, [r3]
 227              	.LVL13:
 228              		.loc 1 173 2 is_stmt 0 view .LVU30
 229 0008 FFF7FEFF 		bl	MCI_ExecSpeedRamp_F
 230              	.LVL14:
 174:Src/mc_api.c  **** }
 231              		.loc 1 174 1 view .LVU31
 232 000c 08BD     		pop	{r3, pc}
 233              	.L23:
 234 000e 00BF     		.align	2
 235              	.L22:
 236 0010 00000000 		.word	pMCI
ARM GAS  /tmp/ccoI51lI.s 			page 8


 237              		.cfi_endproc
 238              	.LFE1440:
 240              		.section	.text.MC_ProgramTorqueRampMotor1,"ax",%progbits
 241              		.align	1
 242              		.weak	MC_ProgramTorqueRampMotor1
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv4-sp-d16
 248              	MC_ProgramTorqueRampMotor1:
 249              	.LVL15:
 250              	.LFB1441:
 175:Src/mc_api.c  **** 
 176:Src/mc_api.c  **** /**
 177:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 178:Src/mc_api.c  ****   *
 179:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p hFinalTorque
 180:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 181:Src/mc_api.c  ****   *
 182:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 183:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 184:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 185:Src/mc_api.c  ****   * ramp is buffered and will be executed when the state machine reaches any of
 186:Src/mc_api.c  ****   * the aforementioned state.
 187:Src/mc_api.c  ****   *
 188:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 189:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 190:Src/mc_api.c  ****   *
 191:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 192:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 193:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 194:Src/mc_api.c  ****   *
 195:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 196:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalTorque parameter
 197:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 198:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 199:Src/mc_api.c  ****   * reach 0 rpm.
 200:Src/mc_api.c  ****   *
 201:Src/mc_api.c  ****   * @param  hFinalTorque Mechanical motor torque reference at the end of the ramp.
 202:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in digit.
 203:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 204:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 205:Src/mc_api.c  ****   *         value.
 206:Src/mc_api.c  ****   */
 207:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
 208:Src/mc_api.c  **** {
 251              		.loc 1 208 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		.loc 1 208 1 is_stmt 0 view .LVU33
 256 0000 08B5     		push	{r3, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 3, -8
 259              		.cfi_offset 14, -4
 260 0002 0A46     		mov	r2, r1
 209:Src/mc_api.c  **** 	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
ARM GAS  /tmp/ccoI51lI.s 			page 9


 261              		.loc 1 209 2 is_stmt 1 view .LVU34
 262 0004 0146     		mov	r1, r0
 263              	.LVL16:
 264              		.loc 1 209 2 is_stmt 0 view .LVU35
 265 0006 024B     		ldr	r3, .L26
 266 0008 1868     		ldr	r0, [r3]
 267              	.LVL17:
 268              		.loc 1 209 2 view .LVU36
 269 000a FFF7FEFF 		bl	MCI_ExecTorqueRamp
 270              	.LVL18:
 210:Src/mc_api.c  **** }
 271              		.loc 1 210 1 view .LVU37
 272 000e 08BD     		pop	{r3, pc}
 273              	.L27:
 274              		.align	2
 275              	.L26:
 276 0010 00000000 		.word	pMCI
 277              		.cfi_endproc
 278              	.LFE1441:
 280              		.section	.text.MC_ProgramTorqueRampMotor1_F,"ax",%progbits
 281              		.align	1
 282              		.weak	MC_ProgramTorqueRampMotor1_F
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu fpv4-sp-d16
 288              	MC_ProgramTorqueRampMotor1_F:
 289              	.LVL19:
 290              	.LFB1442:
 211:Src/mc_api.c  **** 
 212:Src/mc_api.c  **** /**
 213:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 214:Src/mc_api.c  ****   *
 215:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p FinalTorque
 216:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 217:Src/mc_api.c  ****   *
 218:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 219:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 220:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 221:Src/mc_api.c  ****   * ramp is buffered and will be executed when the state machine reaches any of
 222:Src/mc_api.c  ****   * the aforementioned state.
 223:Src/mc_api.c  ****   *
 224:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 225:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 226:Src/mc_api.c  ****   *
 227:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 228:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 229:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 230:Src/mc_api.c  ****   *
 231:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 232:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the FinalTorque parameter
 233:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 234:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 235:Src/mc_api.c  ****   * reach 0 rpm.
 236:Src/mc_api.c  ****   *
 237:Src/mc_api.c  ****   * @param  FinalTorque Mechanical motor torque reference at the end of the ramp.
 238:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in Ampere.
ARM GAS  /tmp/ccoI51lI.s 			page 10


 239:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 240:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 241:Src/mc_api.c  ****   *         value.
 242:Src/mc_api.c  ****   */
 243:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1_F( float FinalTorque, uint16_t hDurationms )
 244:Src/mc_api.c  **** {
 291              		.loc 1 244 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		.loc 1 244 1 is_stmt 0 view .LVU39
 296 0000 08B5     		push	{r3, lr}
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 3, -8
 299              		.cfi_offset 14, -4
 300 0002 0146     		mov	r1, r0
 245:Src/mc_api.c  **** 	MCI_ExecTorqueRamp_F( pMCI[M1], FinalTorque, hDurationms );
 301              		.loc 1 245 2 is_stmt 1 view .LVU40
 302 0004 024B     		ldr	r3, .L30
 303 0006 1868     		ldr	r0, [r3]
 304              	.LVL20:
 305              		.loc 1 245 2 is_stmt 0 view .LVU41
 306 0008 FFF7FEFF 		bl	MCI_ExecTorqueRamp_F
 307              	.LVL21:
 246:Src/mc_api.c  **** }
 308              		.loc 1 246 1 view .LVU42
 309 000c 08BD     		pop	{r3, pc}
 310              	.L31:
 311 000e 00BF     		.align	2
 312              	.L30:
 313 0010 00000000 		.word	pMCI
 314              		.cfi_endproc
 315              	.LFE1442:
 317              		.section	.text.MC_SetCurrentReferenceMotor1,"ax",%progbits
 318              		.align	1
 319              		.weak	MC_SetCurrentReferenceMotor1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	MC_SetCurrentReferenceMotor1:
 326              	.LFB1443:
 247:Src/mc_api.c  **** 
 248:Src/mc_api.c  **** /**
 249:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 250:Src/mc_api.c  ****   *
 251:Src/mc_api.c  ****   *  The current reference to consider is made of the Id and Iq current components.
 252:Src/mc_api.c  ****   *
 253:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1() function programs a current reference
 254:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 255:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 256:Src/mc_api.c  ****   * command is buffered and will be executed when the state machine reaches any of
 257:Src/mc_api.c  ****   * the aforementioned state.
 258:Src/mc_api.c  ****   *
 259:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 260:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 261:Src/mc_api.c  ****   *
ARM GAS  /tmp/ccoI51lI.s 			page 11


 262:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 263:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 264:Src/mc_api.c  ****   *
 265:Src/mc_api.c  ****   * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
 266:Src/mc_api.c  ****   *         in the qd_t format.
 267:Src/mc_api.c  ****   */
 268:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1( qd_t Iqdref )
 269:Src/mc_api.c  **** {
 327              		.loc 1 269 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 00B5     		push	{lr}
 332              		.cfi_def_cfa_offset 4
 333              		.cfi_offset 14, -4
 334 0002 83B0     		sub	sp, sp, #12
 335              		.cfi_def_cfa_offset 16
 336 0004 0190     		str	r0, [sp, #4]
 270:Src/mc_api.c  **** 	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 337              		.loc 1 270 2 view .LVU44
 338 0006 0146     		mov	r1, r0
 339 0008 034B     		ldr	r3, .L34
 340 000a 1868     		ldr	r0, [r3]
 341 000c FFF7FEFF 		bl	MCI_SetCurrentReferences
 342              	.LVL22:
 271:Src/mc_api.c  **** }
 343              		.loc 1 271 1 is_stmt 0 view .LVU45
 344 0010 03B0     		add	sp, sp, #12
 345              		.cfi_def_cfa_offset 4
 346              		@ sp needed
 347 0012 5DF804FB 		ldr	pc, [sp], #4
 348              	.L35:
 349 0016 00BF     		.align	2
 350              	.L34:
 351 0018 00000000 		.word	pMCI
 352              		.cfi_endproc
 353              	.LFE1443:
 355              		.section	.text.MC_SetCurrentReferenceMotor1_F,"ax",%progbits
 356              		.align	1
 357              		.weak	MC_SetCurrentReferenceMotor1_F
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	MC_SetCurrentReferenceMotor1_F:
 364              	.LFB1444:
 272:Src/mc_api.c  **** 
 273:Src/mc_api.c  **** /**
 274:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 275:Src/mc_api.c  ****   *
 276:Src/mc_api.c  ****   *  The current reference to consider is made of the Id and Iq current components.
 277:Src/mc_api.c  ****   *
 278:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1_F() function programs a current reference
 279:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 280:Src/mc_api.c  ****   * Motor 1's state machine is in the #START_RUN or #RUN states. Otherwise, the
 281:Src/mc_api.c  ****   * command is buffered and will be executed when the state machine reaches any of
 282:Src/mc_api.c  ****   * the aforementioned state.
ARM GAS  /tmp/ccoI51lI.s 			page 12


 283:Src/mc_api.c  ****   *
 284:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 285:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 286:Src/mc_api.c  ****   *
 287:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 288:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 289:Src/mc_api.c  ****   *
 290:Src/mc_api.c  ****   * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
 291:Src/mc_api.c  ****   *         in the qd_f_t format.
 292:Src/mc_api.c  ****   */
 293:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1_F( qd_f_t IqdRef )
 294:Src/mc_api.c  **** {
 365              		.loc 1 294 1 is_stmt 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 00B5     		push	{lr}
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 14, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              		.cfi_def_cfa_offset 16
 295:Src/mc_api.c  **** 	MCI_SetCurrentReferences_F( pMCI[M1], IqdRef );
 374              		.loc 1 295 2 view .LVU47
 375 0004 034B     		ldr	r3, .L38
 376 0006 1868     		ldr	r0, [r3]
 377 0008 FFF7FEFF 		bl	MCI_SetCurrentReferences_F
 378              	.LVL23:
 296:Src/mc_api.c  **** }
 379              		.loc 1 296 1 is_stmt 0 view .LVU48
 380 000c 03B0     		add	sp, sp, #12
 381              		.cfi_def_cfa_offset 4
 382              		@ sp needed
 383 000e 5DF804FB 		ldr	pc, [sp], #4
 384              	.L39:
 385 0012 00BF     		.align	2
 386              	.L38:
 387 0014 00000000 		.word	pMCI
 388              		.cfi_endproc
 389              	.LFE1444:
 391              		.section	.text.MC_GetCommandStateMotor1,"ax",%progbits
 392              		.align	1
 393              		.weak	MC_GetCommandStateMotor1
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv4-sp-d16
 399              	MC_GetCommandStateMotor1:
 400              	.LFB1445:
 297:Src/mc_api.c  **** 
 298:Src/mc_api.c  **** /**
 299:Src/mc_api.c  ****   * @brief  Returns the status of the last buffered command for Motor 1.
 300:Src/mc_api.c  ****   * The status can be one of the following values:
 301:Src/mc_api.c  ****   * - #MCI_BUFFER_EMPTY: no buffered command is currently programmed.
 302:Src/mc_api.c  ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED: A command has been buffered but the conditions for its
 303:Src/mc_api.c  ****   *   execution have not occurred yet. The command is still in the buffer, pending execution.
 304:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_SUCCESFULLY: the last buffered command has been executed successfully.
 305:Src/mc_api.c  ****   *   In this case calling this function reset the command state to #BC_BUFFER_EMPTY.
ARM GAS  /tmp/ccoI51lI.s 			page 13


 306:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESFULLY: the buffered command has been executed unsuccessfully.
 307:Src/mc_api.c  ****   *   In this case calling this function reset the command state to #BC_BUFFER_EMPTY.
 308:Src/mc_api.c  ****   */
 309:Src/mc_api.c  **** __weak MCI_CommandState_t  MC_GetCommandStateMotor1( void)
 310:Src/mc_api.c  **** {
 401              		.loc 1 310 1 is_stmt 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405 0000 08B5     		push	{r3, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 3, -8
 408              		.cfi_offset 14, -4
 311:Src/mc_api.c  **** 	return MCI_IsCommandAcknowledged( pMCI[M1] );
 409              		.loc 1 311 2 view .LVU50
 410              		.loc 1 311 9 is_stmt 0 view .LVU51
 411 0002 024B     		ldr	r3, .L42
 412 0004 1868     		ldr	r0, [r3]
 413 0006 FFF7FEFF 		bl	MCI_IsCommandAcknowledged
 414              	.LVL24:
 312:Src/mc_api.c  **** }
 415              		.loc 1 312 1 view .LVU52
 416 000a 08BD     		pop	{r3, pc}
 417              	.L43:
 418              		.align	2
 419              	.L42:
 420 000c 00000000 		.word	pMCI
 421              		.cfi_endproc
 422              	.LFE1445:
 424              		.section	.text.MC_GetLastCommandMotor1,"ax",%progbits
 425              		.align	1
 426              		.weak	MC_GetLastCommandMotor1
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	MC_GetLastCommandMotor1:
 433              	.LFB1446:
 313:Src/mc_api.c  **** /**
 314:Src/mc_api.c  ****   * @brief  Returns the last command submited for Motor 1.
 315:Src/mc_api.c  ****   * The command can be one of the following values:
 316:Src/mc_api.c  ****   * - #MCI_NOCOMMANDSYET: no command is currently programmed.
 317:Src/mc_api.c  ****   * - #MCI_CMD_EXECSPEEDRAMP: 
 318:Src/mc_api.c  ****   * - #MCI_CMD_EXECTORQUERAMP: 
 319:Src/mc_api.c  ****   * - #MCI_CMD_SETCURRENTREFERENCES: 
 320:Src/mc_api.c  ****   * - #MCI_CMD_EXECSPEEDSIN
 321:Src/mc_api.c  ****   */
 322:Src/mc_api.c  **** __weak MCI_UserCommands_t  MC_GetLastCommandMotor1( void)
 323:Src/mc_api.c  **** {
 434              		.loc 1 323 1 is_stmt 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 0000 08B5     		push	{r3, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 3, -8
 441              		.cfi_offset 14, -4
ARM GAS  /tmp/ccoI51lI.s 			page 14


 324:Src/mc_api.c  **** 	return MCI_GetLastCommand( pMCI[M1] );
 442              		.loc 1 324 2 view .LVU54
 443              		.loc 1 324 9 is_stmt 0 view .LVU55
 444 0002 024B     		ldr	r3, .L46
 445 0004 1868     		ldr	r0, [r3]
 446 0006 FFF7FEFF 		bl	MCI_GetLastCommand
 447              	.LVL25:
 325:Src/mc_api.c  **** }
 448              		.loc 1 325 1 view .LVU56
 449 000a 08BD     		pop	{r3, pc}
 450              	.L47:
 451              		.align	2
 452              	.L46:
 453 000c 00000000 		.word	pMCI
 454              		.cfi_endproc
 455              	.LFE1446:
 457              		.section	.text.MC_StopSpeedRampMotor1,"ax",%progbits
 458              		.align	1
 459              		.weak	MC_StopSpeedRampMotor1
 460              		.syntax unified
 461              		.thumb
 462              		.thumb_func
 463              		.fpu fpv4-sp-d16
 465              	MC_StopSpeedRampMotor1:
 466              	.LFB1447:
 326:Src/mc_api.c  **** 
 327:Src/mc_api.c  **** /**
 328:Src/mc_api.c  ****  * @brief Stops the execution of the on-going speed ramp for Motor 1, if any.
 329:Src/mc_api.c  ****  *
 330:Src/mc_api.c  ****  *  If a speed ramp is currently being executed, it is immediately stopped, the rotation
 331:Src/mc_api.c  ****  * speed of Motor 1 is maintained to its current value and true is returned. If no speed
 332:Src/mc_api.c  ****  * ramp is on-going, nothing is done and false is returned.
 333:Src/mc_api.c  ****  *
 334:Src/mc_api.c  ****  * @deprecated This function is deprecated and should not be used anymore. It will be
 335:Src/mc_api.c  ****  *             removed in a future version of the MCSDK. Use MC_StopRampMotor1() instead.
 336:Src/mc_api.c  ****  */
 337:Src/mc_api.c  **** __weak bool MC_StopSpeedRampMotor1(void)
 338:Src/mc_api.c  **** {
 467              		.loc 1 338 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 08B5     		push	{r3, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 3, -8
 474              		.cfi_offset 14, -4
 339:Src/mc_api.c  **** 	return MCI_StopSpeedRamp( pMCI[M1] );
 475              		.loc 1 339 2 view .LVU58
 476              		.loc 1 339 9 is_stmt 0 view .LVU59
 477 0002 024B     		ldr	r3, .L50
 478 0004 1868     		ldr	r0, [r3]
 479 0006 FFF7FEFF 		bl	MCI_StopSpeedRamp
 480              	.LVL26:
 340:Src/mc_api.c  **** }
 481              		.loc 1 340 1 view .LVU60
 482 000a 08BD     		pop	{r3, pc}
 483              	.L51:
ARM GAS  /tmp/ccoI51lI.s 			page 15


 484              		.align	2
 485              	.L50:
 486 000c 00000000 		.word	pMCI
 487              		.cfi_endproc
 488              	.LFE1447:
 490              		.section	.text.MC_StopRampMotor1,"ax",%progbits
 491              		.align	1
 492              		.weak	MC_StopRampMotor1
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 496              		.fpu fpv4-sp-d16
 498              	MC_StopRampMotor1:
 499              	.LFB1448:
 341:Src/mc_api.c  **** 
 342:Src/mc_api.c  **** /**
 343:Src/mc_api.c  ****  * @brief Stops the execution of the on-going ramp for Motor 1, if any.
 344:Src/mc_api.c  ****  *
 345:Src/mc_api.c  ****  *  If a ramp is currently being executed, it is immediately stopped, the torque or the speed
 346:Src/mc_api.c  ****  *  of Motor 1 is maintained to its current value.
 347:Src/mc_api.c  ****  */
 348:Src/mc_api.c  **** __weak void MC_StopRampMotor1(void)
 349:Src/mc_api.c  **** {
 500              		.loc 1 349 1 is_stmt 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504 0000 08B5     		push	{r3, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 3, -8
 507              		.cfi_offset 14, -4
 350:Src/mc_api.c  ****   MCI_StopRamp( pMCI[M1] );
 508              		.loc 1 350 3 view .LVU62
 509 0002 024B     		ldr	r3, .L54
 510 0004 1868     		ldr	r0, [r3]
 511 0006 FFF7FEFF 		bl	MCI_StopRamp
 512              	.LVL27:
 351:Src/mc_api.c  **** }
 513              		.loc 1 351 1 is_stmt 0 view .LVU63
 514 000a 08BD     		pop	{r3, pc}
 515              	.L55:
 516              		.align	2
 517              	.L54:
 518 000c 00000000 		.word	pMCI
 519              		.cfi_endproc
 520              	.LFE1448:
 522              		.section	.text.MC_HasRampCompletedMotor1,"ax",%progbits
 523              		.align	1
 524              		.weak	MC_HasRampCompletedMotor1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv4-sp-d16
 530              	MC_HasRampCompletedMotor1:
 531              	.LFB1449:
 352:Src/mc_api.c  **** 
 353:Src/mc_api.c  **** /**
ARM GAS  /tmp/ccoI51lI.s 			page 16


 354:Src/mc_api.c  ****  * @brief Returns true if the last ramp submited for Motor 1 has completed, false otherwise
 355:Src/mc_api.c  ****  */
 356:Src/mc_api.c  **** __weak bool MC_HasRampCompletedMotor1(void)
 357:Src/mc_api.c  **** {
 532              		.loc 1 357 1 is_stmt 1 view -0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536 0000 08B5     		push	{r3, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 3, -8
 539              		.cfi_offset 14, -4
 358:Src/mc_api.c  **** 	return MCI_RampCompleted( pMCI[M1] );
 540              		.loc 1 358 2 view .LVU65
 541              		.loc 1 358 9 is_stmt 0 view .LVU66
 542 0002 024B     		ldr	r3, .L58
 543 0004 1868     		ldr	r0, [r3]
 544 0006 FFF7FEFF 		bl	MCI_RampCompleted
 545              	.LVL28:
 359:Src/mc_api.c  **** }
 546              		.loc 1 359 1 view .LVU67
 547 000a 08BD     		pop	{r3, pc}
 548              	.L59:
 549              		.align	2
 550              	.L58:
 551 000c 00000000 		.word	pMCI
 552              		.cfi_endproc
 553              	.LFE1449:
 555              		.section	.text.MC_GetMecSpeedReferenceMotor1,"ax",%progbits
 556              		.align	1
 557              		.weak	MC_GetMecSpeedReferenceMotor1
 558              		.syntax unified
 559              		.thumb
 560              		.thumb_func
 561              		.fpu fpv4-sp-d16
 563              	MC_GetMecSpeedReferenceMotor1:
 564              	.LFB1450:
 360:Src/mc_api.c  **** 
 361:Src/mc_api.c  **** /**
 362:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in the u
 363:Src/mc_api.c  ****  */
 364:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedReferenceMotor1(void)
 365:Src/mc_api.c  **** {
 565              		.loc 1 365 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569 0000 08B5     		push	{r3, lr}
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 3, -8
 572              		.cfi_offset 14, -4
 366:Src/mc_api.c  **** 	return MCI_GetMecSpeedRefUnit( pMCI[M1] );
 573              		.loc 1 366 2 view .LVU69
 574              		.loc 1 366 9 is_stmt 0 view .LVU70
 575 0002 024B     		ldr	r3, .L62
 576 0004 1868     		ldr	r0, [r3]
 577 0006 FFF7FEFF 		bl	MCI_GetMecSpeedRefUnit
ARM GAS  /tmp/ccoI51lI.s 			page 17


 578              	.LVL29:
 367:Src/mc_api.c  **** }
 579              		.loc 1 367 1 view .LVU71
 580 000a 08BD     		pop	{r3, pc}
 581              	.L63:
 582              		.align	2
 583              	.L62:
 584 000c 00000000 		.word	pMCI
 585              		.cfi_endproc
 586              	.LFE1450:
 588              		.section	.text.MC_GetMecSpeedReferenceMotor1_F,"ax",%progbits
 589              		.align	1
 590              		.weak	MC_GetMecSpeedReferenceMotor1_F
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu fpv4-sp-d16
 596              	MC_GetMecSpeedReferenceMotor1_F:
 597              	.LFB1451:
 368:Src/mc_api.c  **** 
 369:Src/mc_api.c  **** /**
 370:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 371:Src/mc_api.c  ****  */
 372:Src/mc_api.c  **** __weak float MC_GetMecSpeedReferenceMotor1_F(void)
 373:Src/mc_api.c  **** {
 598              		.loc 1 373 1 is_stmt 1 view -0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602 0000 08B5     		push	{r3, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 3, -8
 605              		.cfi_offset 14, -4
 374:Src/mc_api.c  **** 	return MCI_GetMecSpeedRef_F( pMCI[M1] );
 606              		.loc 1 374 2 view .LVU73
 607              		.loc 1 374 9 is_stmt 0 view .LVU74
 608 0002 024B     		ldr	r3, .L66
 609 0004 1868     		ldr	r0, [r3]
 610 0006 FFF7FEFF 		bl	MCI_GetMecSpeedRef_F
 611              	.LVL30:
 375:Src/mc_api.c  **** }
 612              		.loc 1 375 1 view .LVU75
 613 000a 08BD     		pop	{r3, pc}
 614              	.L67:
 615              		.align	2
 616              	.L66:
 617 000c 00000000 		.word	pMCI
 618              		.cfi_endproc
 619              	.LFE1451:
 621              		.section	.text.MC_GetMecSpeedAverageMotor1,"ax",%progbits
 622              		.align	1
 623              		.weak	MC_GetMecSpeedAverageMotor1
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
 629              	MC_GetMecSpeedAverageMotor1:
ARM GAS  /tmp/ccoI51lI.s 			page 18


 630              	.LFB1452:
 376:Src/mc_api.c  **** 
 377:Src/mc_api.c  **** /**
 378:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the un
 379:Src/mc_api.c  ****  */
 380:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedAverageMotor1(void)
 381:Src/mc_api.c  **** {
 631              		.loc 1 381 1 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635 0000 08B5     		push	{r3, lr}
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 3, -8
 638              		.cfi_offset 14, -4
 382:Src/mc_api.c  **** 	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 639              		.loc 1 382 2 view .LVU77
 640              		.loc 1 382 9 is_stmt 0 view .LVU78
 641 0002 024B     		ldr	r3, .L70
 642 0004 1868     		ldr	r0, [r3]
 643 0006 FFF7FEFF 		bl	MCI_GetAvrgMecSpeedUnit
 644              	.LVL31:
 383:Src/mc_api.c  **** }
 645              		.loc 1 383 1 view .LVU79
 646 000a 08BD     		pop	{r3, pc}
 647              	.L71:
 648              		.align	2
 649              	.L70:
 650 000c 00000000 		.word	pMCI
 651              		.cfi_endproc
 652              	.LFE1452:
 654              		.section	.text.MC_GetMecAuxiliarySpeedAverageMotor1,"ax",%progbits
 655              		.align	1
 656              		.weak	MC_GetMecAuxiliarySpeedAverageMotor1
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	MC_GetMecAuxiliarySpeedAverageMotor1:
 663              	.LFB1453:
 384:Src/mc_api.c  **** 
 385:Src/mc_api.c  **** #define S16ToRAD 10430.37835f            /* 2^16/2Pi */
 386:Src/mc_api.c  **** 
 387:Src/mc_api.c  **** /**
 388:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed from auxiliary sensor for Motor 
 389:Src/mc_api.c  ****  */
 390:Src/mc_api.c  **** __weak int16_t MC_GetMecAuxiliarySpeedAverageMotor1(void)
 391:Src/mc_api.c  **** {
 664              		.loc 1 391 1 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668 0000 08B5     		push	{r3, lr}
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 3, -8
 671              		.cfi_offset 14, -4
 392:Src/mc_api.c  **** 	return SPD_GetAvrgMecSpeedUnit(&STO_PLL_M1._Super);
ARM GAS  /tmp/ccoI51lI.s 			page 19


 672              		.loc 1 392 2 view .LVU81
 673              		.loc 1 392 9 is_stmt 0 view .LVU82
 674 0002 0248     		ldr	r0, .L74
 675 0004 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 676              	.LVL32:
 393:Src/mc_api.c  **** }
 677              		.loc 1 393 1 view .LVU83
 678 0008 08BD     		pop	{r3, pc}
 679              	.L75:
 680 000a 00BF     		.align	2
 681              	.L74:
 682 000c 00000000 		.word	STO_PLL_M1
 683              		.cfi_endproc
 684              	.LFE1453:
 686              		.section	.text.MC_GetMecAuxiliarySpeedAverageMotor1_F,"ax",%progbits
 687              		.align	1
 688              		.weak	MC_GetMecAuxiliarySpeedAverageMotor1_F
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu fpv4-sp-d16
 694              	MC_GetMecAuxiliarySpeedAverageMotor1_F:
 695              	.LFB1454:
 394:Src/mc_api.c  **** 
 395:Src/mc_api.c  **** /**
 396:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed from auxiliary sensor for Motor 
 397:Src/mc_api.c  ****  */
 398:Src/mc_api.c  **** __weak float MC_GetMecAuxiliarySpeedAverageMotor1_F(void)
 399:Src/mc_api.c  **** {
 696              		.loc 1 399 1 is_stmt 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700 0000 08B5     		push	{r3, lr}
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 3, -8
 703              		.cfi_offset 14, -4
 400:Src/mc_api.c  ****   return( (float) ( SPD_GetAvrgMecSpeedUnit(&STO_PLL_M1._Super) * U_RPM) / SPEED_UNIT);
 704              		.loc 1 400 3 view .LVU85
 705              		.loc 1 400 21 is_stmt 0 view .LVU86
 706 0002 0748     		ldr	r0, .L78
 707 0004 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 708              	.LVL33:
 709              		.loc 1 400 65 view .LVU87
 710 0008 C0EB0010 		rsb	r0, r0, r0, lsl #4
 711 000c 8000     		lsls	r0, r0, #2
 712              		.loc 1 400 11 view .LVU88
 713 000e 07EE900A 		vmov	s15, r0	@ int
 714 0012 B8EEE70A 		vcvt.f32.s32	s0, s15
 401:Src/mc_api.c  **** }
 715              		.loc 1 401 1 view .LVU89
 716 0016 F2EE047A 		vmov.f32	s15, #1.0e+1
 717 001a 80EE270A 		vdiv.f32	s0, s0, s15
 718 001e 08BD     		pop	{r3, pc}
 719              	.L79:
 720              		.align	2
 721              	.L78:
ARM GAS  /tmp/ccoI51lI.s 			page 20


 722 0020 00000000 		.word	STO_PLL_M1
 723              		.cfi_endproc
 724              	.LFE1454:
 726              		.section	.text.MC_GetAuxiliaryElAngledppMotor1,"ax",%progbits
 727              		.align	1
 728              		.weak	MC_GetAuxiliaryElAngledppMotor1
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu fpv4-sp-d16
 734              	MC_GetAuxiliaryElAngledppMotor1:
 735              	.LFB1455:
 402:Src/mc_api.c  **** 
 403:Src/mc_api.c  **** /**
 404:Src/mc_api.c  ****  * @brief Returns the electrical angle of the rotor from auxiliary sensor of Motor 1, in DDP format
 405:Src/mc_api.c  ****  */
 406:Src/mc_api.c  **** __weak int16_t MC_GetAuxiliaryElAngledppMotor1(void)
 407:Src/mc_api.c  **** {
 736              		.loc 1 407 1 is_stmt 1 view -0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740 0000 08B5     		push	{r3, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 3, -8
 743              		.cfi_offset 14, -4
 408:Src/mc_api.c  **** 	return (SPD_GetElAngle(&STO_PLL_M1._Super));
 744              		.loc 1 408 2 view .LVU91
 745              		.loc 1 408 10 is_stmt 0 view .LVU92
 746 0002 0248     		ldr	r0, .L82
 747 0004 FFF7FEFF 		bl	SPD_GetElAngle
 748              	.LVL34:
 409:Src/mc_api.c  **** }
 749              		.loc 1 409 1 view .LVU93
 750 0008 08BD     		pop	{r3, pc}
 751              	.L83:
 752 000a 00BF     		.align	2
 753              	.L82:
 754 000c 00000000 		.word	STO_PLL_M1
 755              		.cfi_endproc
 756              	.LFE1455:
 758              		.section	.text.MC_GetAuxiliaryElAngleMotor1_F,"ax",%progbits
 759              		.align	1
 760              		.weak	MC_GetAuxiliaryElAngleMotor1_F
 761              		.syntax unified
 762              		.thumb
 763              		.thumb_func
 764              		.fpu fpv4-sp-d16
 766              	MC_GetAuxiliaryElAngleMotor1_F:
 767              	.LFB1456:
 410:Src/mc_api.c  **** 
 411:Src/mc_api.c  **** /**
 412:Src/mc_api.c  ****  * @brief Returns the electrical angle of the rotor from auxiliary sensor of Motor 1, expressed in 
 413:Src/mc_api.c  ****  */
 414:Src/mc_api.c  **** __weak float MC_GetAuxiliaryElAngleMotor1_F(void)
 415:Src/mc_api.c  **** {
 768              		.loc 1 415 1 is_stmt 1 view -0
ARM GAS  /tmp/ccoI51lI.s 			page 21


 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772 0000 08B5     		push	{r3, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 3, -8
 775              		.cfi_offset 14, -4
 416:Src/mc_api.c  ****   return ((float)( (SPD_GetElAngle(&STO_PLL_M1._Super)) / S16ToRAD) );
 776              		.loc 1 416 3 view .LVU95
 777              		.loc 1 416 21 is_stmt 0 view .LVU96
 778 0002 0648     		ldr	r0, .L86
 779 0004 FFF7FEFF 		bl	SPD_GetElAngle
 780              	.LVL35:
 781 0008 07EE900A 		vmov	s15, r0	@ int
 782              		.loc 1 416 11 view .LVU97
 783 000c F8EEE77A 		vcvt.f32.s32	s15, s15
 417:Src/mc_api.c  **** }
 784              		.loc 1 417 1 view .LVU98
 785 0010 9FED030A 		vldr.32	s0, .L86+4
 786 0014 87EE800A 		vdiv.f32	s0, s15, s0
 787 0018 08BD     		pop	{r3, pc}
 788              	.L87:
 789 001a 00BF     		.align	2
 790              	.L86:
 791 001c 00000000 		.word	STO_PLL_M1
 792 0020 83F92246 		.word	1176697219
 793              		.cfi_endproc
 794              	.LFE1456:
 796              		.section	.text.MC_GetAverageMecSpeedMotor1_F,"ax",%progbits
 797              		.align	1
 798              		.weak	MC_GetAverageMecSpeedMotor1_F
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	MC_GetAverageMecSpeedMotor1_F:
 805              	.LFB1457:
 418:Src/mc_api.c  **** 
 419:Src/mc_api.c  **** /**
 420:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 421:Src/mc_api.c  ****  */
 422:Src/mc_api.c  **** __weak float MC_GetAverageMecSpeedMotor1_F(void)
 423:Src/mc_api.c  **** {
 806              		.loc 1 423 1 is_stmt 1 view -0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810 0000 08B5     		push	{r3, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 3, -8
 813              		.cfi_offset 14, -4
 424:Src/mc_api.c  **** 	return MCI_GetAvrgMecSpeed_F( pMCI[M1] );
 814              		.loc 1 424 2 view .LVU100
 815              		.loc 1 424 9 is_stmt 0 view .LVU101
 816 0002 024B     		ldr	r3, .L90
 817 0004 1868     		ldr	r0, [r3]
 818 0006 FFF7FEFF 		bl	MCI_GetAvrgMecSpeed_F
ARM GAS  /tmp/ccoI51lI.s 			page 22


 819              	.LVL36:
 425:Src/mc_api.c  **** }
 820              		.loc 1 425 1 view .LVU102
 821 000a 08BD     		pop	{r3, pc}
 822              	.L91:
 823              		.align	2
 824              	.L90:
 825 000c 00000000 		.word	pMCI
 826              		.cfi_endproc
 827              	.LFE1457:
 829              		.section	.text.MC_GetLastRampFinalSpeedMotor1,"ax",%progbits
 830              		.align	1
 831              		.weak	MC_GetLastRampFinalSpeedMotor1
 832              		.syntax unified
 833              		.thumb
 834              		.thumb_func
 835              		.fpu fpv4-sp-d16
 837              	MC_GetLastRampFinalSpeedMotor1:
 838              	.LFB1458:
 426:Src/mc_api.c  **** 
 427:Src/mc_api.c  **** /**
 428:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 429:Src/mc_api.c  ****  */
 430:Src/mc_api.c  **** __weak int16_t MC_GetLastRampFinalSpeedMotor1(void)
 431:Src/mc_api.c  **** {
 839              		.loc 1 431 1 is_stmt 1 view -0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843 0000 08B5     		push	{r3, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 3, -8
 846              		.cfi_offset 14, -4
 432:Src/mc_api.c  **** 	return MCI_GetLastRampFinalSpeed( pMCI[M1] );
 847              		.loc 1 432 2 view .LVU104
 848              		.loc 1 432 9 is_stmt 0 view .LVU105
 849 0002 024B     		ldr	r3, .L94
 850 0004 1868     		ldr	r0, [r3]
 851 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalSpeed
 852              	.LVL37:
 433:Src/mc_api.c  **** }
 853              		.loc 1 433 1 view .LVU106
 854 000a 08BD     		pop	{r3, pc}
 855              	.L95:
 856              		.align	2
 857              	.L94:
 858 000c 00000000 		.word	pMCI
 859              		.cfi_endproc
 860              	.LFE1458:
 862              		.section	.text.MC_GetLastRampFinalSpeedMotor1_F,"ax",%progbits
 863              		.align	1
 864              		.weak	MC_GetLastRampFinalSpeedMotor1_F
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu fpv4-sp-d16
 870              	MC_GetLastRampFinalSpeedMotor1_F:
ARM GAS  /tmp/ccoI51lI.s 			page 23


 871              	.LFB1459:
 434:Src/mc_api.c  **** 
 435:Src/mc_api.c  **** /**
 436:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 437:Src/mc_api.c  ****  */
 438:Src/mc_api.c  **** __weak float MC_GetLastRampFinalSpeedMotor1_F(void)
 439:Src/mc_api.c  **** {
 872              		.loc 1 439 1 is_stmt 1 view -0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876 0000 08B5     		push	{r3, lr}
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 3, -8
 879              		.cfi_offset 14, -4
 440:Src/mc_api.c  **** 	return MCI_GetLastRampFinalSpeed_F( pMCI[M1] );
 880              		.loc 1 440 2 view .LVU108
 881              		.loc 1 440 9 is_stmt 0 view .LVU109
 882 0002 024B     		ldr	r3, .L98
 883 0004 1868     		ldr	r0, [r3]
 884 0006 FFF7FEFF 		bl	MCI_GetLastRampFinalSpeed_F
 885              	.LVL38:
 441:Src/mc_api.c  **** }
 886              		.loc 1 441 1 view .LVU110
 887 000a 08BD     		pop	{r3, pc}
 888              	.L99:
 889              		.align	2
 890              	.L98:
 891 000c 00000000 		.word	pMCI
 892              		.cfi_endproc
 893              	.LFE1459:
 895              		.section	.text.MC_GetControlModeMotor1,"ax",%progbits
 896              		.align	1
 897              		.weak	MC_GetControlModeMotor1
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu fpv4-sp-d16
 903              	MC_GetControlModeMotor1:
 904              	.LFB1460:
 442:Src/mc_api.c  **** 
 443:Src/mc_api.c  **** /**
 444:Src/mc_api.c  ****  * @brief Returns the Control Mode used for Motor 1 (either Speed or Torque)
 445:Src/mc_api.c  ****  */
 446:Src/mc_api.c  **** __weak MC_ControlMode_t MC_GetControlModeMotor1(void)
 447:Src/mc_api.c  **** {
 905              		.loc 1 447 1 is_stmt 1 view -0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909 0000 08B5     		push	{r3, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 3, -8
 912              		.cfi_offset 14, -4
 448:Src/mc_api.c  **** 	return MCI_GetControlMode( pMCI[M1] );
 913              		.loc 1 448 2 view .LVU112
 914              		.loc 1 448 9 is_stmt 0 view .LVU113
ARM GAS  /tmp/ccoI51lI.s 			page 24


 915 0002 024B     		ldr	r3, .L102
 916 0004 1868     		ldr	r0, [r3]
 917 0006 FFF7FEFF 		bl	MCI_GetControlMode
 918              	.LVL39:
 449:Src/mc_api.c  **** }
 919              		.loc 1 449 1 view .LVU114
 920 000a 08BD     		pop	{r3, pc}
 921              	.L103:
 922              		.align	2
 923              	.L102:
 924 000c 00000000 		.word	pMCI
 925              		.cfi_endproc
 926              	.LFE1460:
 928              		.section	.text.MC_GetImposedDirectionMotor1,"ax",%progbits
 929              		.align	1
 930              		.weak	MC_GetImposedDirectionMotor1
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu fpv4-sp-d16
 936              	MC_GetImposedDirectionMotor1:
 937              	.LFB1461:
 450:Src/mc_api.c  **** 
 451:Src/mc_api.c  **** /**
 452:Src/mc_api.c  ****  * @brief Returns the rotation direction imposed by the last command on Motor 1
 453:Src/mc_api.c  ****  *
 454:Src/mc_api.c  ****  * The last command is either MC_ProgramSpeedRampMotor1(), MC_ProgramTorqueRampMotor1() or
 455:Src/mc_api.c  ****  * MC_SetCurrentReferenceMotor1().
 456:Src/mc_api.c  ****  *
 457:Src/mc_api.c  ****  * The function returns -1 if the sign of the final speed, the final torque or the Iq current
 458:Src/mc_api.c  ****  * reference component of the last command is negative. Otherwise, 1 is returned.
 459:Src/mc_api.c  ****  *
 460:Src/mc_api.c  ****  * @note if no such command has ever been submitted, 1 is returned as well.
 461:Src/mc_api.c  ****  */
 462:Src/mc_api.c  **** __weak int16_t MC_GetImposedDirectionMotor1(void)
 463:Src/mc_api.c  **** {
 938              		.loc 1 463 1 is_stmt 1 view -0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942 0000 08B5     		push	{r3, lr}
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 3, -8
 945              		.cfi_offset 14, -4
 464:Src/mc_api.c  **** 	return MCI_GetImposedMotorDirection( pMCI[M1] );
 946              		.loc 1 464 2 view .LVU116
 947              		.loc 1 464 9 is_stmt 0 view .LVU117
 948 0002 024B     		ldr	r3, .L106
 949 0004 1868     		ldr	r0, [r3]
 950 0006 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 951              	.LVL40:
 465:Src/mc_api.c  **** }
 952              		.loc 1 465 1 view .LVU118
 953 000a 08BD     		pop	{r3, pc}
 954              	.L107:
 955              		.align	2
 956              	.L106:
ARM GAS  /tmp/ccoI51lI.s 			page 25


 957 000c 00000000 		.word	pMCI
 958              		.cfi_endproc
 959              	.LFE1461:
 961              		.section	.text.MC_GetSpeedSensorReliabilityMotor1,"ax",%progbits
 962              		.align	1
 963              		.weak	MC_GetSpeedSensorReliabilityMotor1
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu fpv4-sp-d16
 969              	MC_GetSpeedSensorReliabilityMotor1:
 970              	.LFB1462:
 466:Src/mc_api.c  **** 
 467:Src/mc_api.c  **** /**
 468:Src/mc_api.c  ****  * @brief Returns true if the speed sensor used for Motor 1 is reliable, false otherwise
 469:Src/mc_api.c  ****  */
 470:Src/mc_api.c  **** __weak bool MC_GetSpeedSensorReliabilityMotor1(void)
 471:Src/mc_api.c  **** {
 971              		.loc 1 471 1 is_stmt 1 view -0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975 0000 08B5     		push	{r3, lr}
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 3, -8
 978              		.cfi_offset 14, -4
 472:Src/mc_api.c  **** 	return MCI_GetSpdSensorReliability( pMCI[M1] );
 979              		.loc 1 472 2 view .LVU120
 980              		.loc 1 472 9 is_stmt 0 view .LVU121
 981 0002 024B     		ldr	r3, .L110
 982 0004 1868     		ldr	r0, [r3]
 983 0006 FFF7FEFF 		bl	MCI_GetSpdSensorReliability
 984              	.LVL41:
 473:Src/mc_api.c  **** }
 985              		.loc 1 473 1 view .LVU122
 986 000a 08BD     		pop	{r3, pc}
 987              	.L111:
 988              		.align	2
 989              	.L110:
 990 000c 00000000 		.word	pMCI
 991              		.cfi_endproc
 992              	.LFE1462:
 994              		.section	.text.MC_GetPhaseCurrentAmplitudeMotor1,"ax",%progbits
 995              		.align	1
 996              		.weak	MC_GetPhaseCurrentAmplitudeMotor1
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	MC_GetPhaseCurrentAmplitudeMotor1:
 1003              	.LFB1463:
 474:Src/mc_api.c  **** 
 475:Src/mc_api.c  **** /**
 476:Src/mc_api.c  ****  * @brief returns the amplitude of the phase current injected in Motor 1
 477:Src/mc_api.c  ****  *
 478:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16A unit. To convert it to amperes, use the 
 479:Src/mc_api.c  ****  *
ARM GAS  /tmp/ccoI51lI.s 			page 26


 480:Src/mc_api.c  ****  * @f[
 481:Src/mc_api.c  ****  * I_{Amps} = \frac{ I_{s16A} \times V_{dd}}{ 65536 \times R_{shunt} \times A_{op} }
 482:Src/mc_api.c  ****  * @f]
 483:Src/mc_api.c  ****  *
 484:Src/mc_api.c  ****  */
 485:Src/mc_api.c  **** __weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
 486:Src/mc_api.c  **** {
 1004              		.loc 1 486 1 is_stmt 1 view -0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008 0000 08B5     		push	{r3, lr}
 1009              		.cfi_def_cfa_offset 8
 1010              		.cfi_offset 3, -8
 1011              		.cfi_offset 14, -4
 487:Src/mc_api.c  **** 	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 1012              		.loc 1 487 2 view .LVU124
 1013              		.loc 1 487 9 is_stmt 0 view .LVU125
 1014 0002 024B     		ldr	r3, .L114
 1015 0004 1868     		ldr	r0, [r3]
 1016 0006 FFF7FEFF 		bl	MCI_GetPhaseCurrentAmplitude
 1017              	.LVL42:
 488:Src/mc_api.c  **** }
 1018              		.loc 1 488 1 view .LVU126
 1019 000a 08BD     		pop	{r3, pc}
 1020              	.L115:
 1021              		.align	2
 1022              	.L114:
 1023 000c 00000000 		.word	pMCI
 1024              		.cfi_endproc
 1025              	.LFE1463:
 1027              		.section	.text.MC_GetPhaseVoltageAmplitudeMotor1,"ax",%progbits
 1028              		.align	1
 1029              		.weak	MC_GetPhaseVoltageAmplitudeMotor1
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	MC_GetPhaseVoltageAmplitudeMotor1:
 1036              	.LFB1464:
 489:Src/mc_api.c  **** 
 490:Src/mc_api.c  **** /**
 491:Src/mc_api.c  ****  * @brief returns the amplitude of the phase voltage applied to Motor 1
 492:Src/mc_api.c  ****  *
 493:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16V unit. To convert it to volts, use the fo
 494:Src/mc_api.c  ****  *
 495:Src/mc_api.c  ****  * @f[
 496:Src/mc_api.c  ****  * U_{Volts} = \frac{ U_{s16V} \times V_{bus}}{ \sqrt{3} \times 32768  }
 497:Src/mc_api.c  ****  * @f]
 498:Src/mc_api.c  ****  *
 499:Src/mc_api.c  ****  */
 500:Src/mc_api.c  **** __weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
 501:Src/mc_api.c  **** {
 1037              		.loc 1 501 1 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoI51lI.s 			page 27


 1041 0000 08B5     		push	{r3, lr}
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 3, -8
 1044              		.cfi_offset 14, -4
 502:Src/mc_api.c  **** 	return MCI_GetPhaseVoltageAmplitude( pMCI[M1] );
 1045              		.loc 1 502 2 view .LVU128
 1046              		.loc 1 502 9 is_stmt 0 view .LVU129
 1047 0002 024B     		ldr	r3, .L118
 1048 0004 1868     		ldr	r0, [r3]
 1049 0006 FFF7FEFF 		bl	MCI_GetPhaseVoltageAmplitude
 1050              	.LVL43:
 503:Src/mc_api.c  **** }
 1051              		.loc 1 503 1 view .LVU130
 1052 000a 08BD     		pop	{r3, pc}
 1053              	.L119:
 1054              		.align	2
 1055              	.L118:
 1056 000c 00000000 		.word	pMCI
 1057              		.cfi_endproc
 1058              	.LFE1464:
 1060              		.section	.text.MC_GetIabMotor1,"ax",%progbits
 1061              		.align	1
 1062              		.weak	MC_GetIabMotor1
 1063              		.syntax unified
 1064              		.thumb
 1065              		.thumb_func
 1066              		.fpu fpv4-sp-d16
 1068              	MC_GetIabMotor1:
 1069              	.LFB1465:
 504:Src/mc_api.c  **** 
 505:Src/mc_api.c  **** /**
 506:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_t format
 507:Src/mc_api.c  ****  */
 508:Src/mc_api.c  **** __weak ab_t MC_GetIabMotor1(void)
 509:Src/mc_api.c  **** {
 1070              		.loc 1 509 1 is_stmt 1 view -0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 0, uses_anonymous_args = 0
 1074 0000 00B5     		push	{lr}
 1075              		.cfi_def_cfa_offset 4
 1076              		.cfi_offset 14, -4
 1077 0002 83B0     		sub	sp, sp, #12
 1078              		.cfi_def_cfa_offset 16
 510:Src/mc_api.c  **** 	return MCI_GetIab( pMCI[M1] );
 1079              		.loc 1 510 2 view .LVU132
 1080              		.loc 1 510 9 is_stmt 0 view .LVU133
 1081 0004 074B     		ldr	r3, .L122
 1082 0006 1868     		ldr	r0, [r3]
 1083 0008 FFF7FEFF 		bl	MCI_GetIab
 1084              	.LVL44:
 1085 000c 0346     		mov	r3, r0
 1086 000e 0020     		movs	r0, #0
 1087 0010 9AB2     		uxth	r2, r3
 1088 0012 62F30F00 		bfi	r0, r2, #0, #16
 1089 0016 1B0C     		lsrs	r3, r3, #16
 1090 0018 63F31F40 		bfi	r0, r3, #16, #16
ARM GAS  /tmp/ccoI51lI.s 			page 28


 511:Src/mc_api.c  **** }
 1091              		.loc 1 511 1 view .LVU134
 1092 001c 03B0     		add	sp, sp, #12
 1093              		.cfi_def_cfa_offset 4
 1094              		@ sp needed
 1095 001e 5DF804FB 		ldr	pc, [sp], #4
 1096              	.L123:
 1097 0022 00BF     		.align	2
 1098              	.L122:
 1099 0024 00000000 		.word	pMCI
 1100              		.cfi_endproc
 1101              	.LFE1465:
 1103              		.section	.text.MC_GetIabMotor1_F,"ax",%progbits
 1104              		.align	1
 1105              		.weak	MC_GetIabMotor1_F
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1109              		.fpu fpv4-sp-d16
 1111              	MC_GetIabMotor1_F:
 1112              	.LFB1466:
 512:Src/mc_api.c  **** 
 513:Src/mc_api.c  **** /**
 514:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_f_t format
 515:Src/mc_api.c  ****  */
 516:Src/mc_api.c  **** __weak ab_f_t MC_GetIabMotor1_F(void)
 517:Src/mc_api.c  **** {
 1113              		.loc 1 517 1 is_stmt 1 view -0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 16
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117 0000 00B5     		push	{lr}
 1118              		.cfi_def_cfa_offset 4
 1119              		.cfi_offset 14, -4
 1120 0002 85B0     		sub	sp, sp, #20
 1121              		.cfi_def_cfa_offset 24
 518:Src/mc_api.c  **** 	return MCI_GetIab_F( pMCI[M1] );
 1122              		.loc 1 518 2 view .LVU136
 1123              		.loc 1 518 9 is_stmt 0 view .LVU137
 1124 0004 034B     		ldr	r3, .L126
 1125 0006 1868     		ldr	r0, [r3]
 1126 0008 FFF7FEFF 		bl	MCI_GetIab_F
 1127              	.LVL45:
 519:Src/mc_api.c  **** }
 1128              		.loc 1 519 1 view .LVU138
 1129 000c 05B0     		add	sp, sp, #20
 1130              		.cfi_def_cfa_offset 4
 1131              		@ sp needed
 1132 000e 5DF804FB 		ldr	pc, [sp], #4
 1133              	.L127:
 1134 0012 00BF     		.align	2
 1135              	.L126:
 1136 0014 00000000 		.word	pMCI
 1137              		.cfi_endproc
 1138              	.LFE1466:
 1140              		.section	.text.MC_GetIalphabetaMotor1,"ax",%progbits
 1141              		.align	1
ARM GAS  /tmp/ccoI51lI.s 			page 29


 1142              		.weak	MC_GetIalphabetaMotor1
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu fpv4-sp-d16
 1148              	MC_GetIalphabetaMotor1:
 1149              	.LFB1467:
 520:Src/mc_api.c  **** 
 521:Src/mc_api.c  **** /**
 522:Src/mc_api.c  ****  * @brief returns Ialpha and Ibeta current values for Motor 1 in alphabeta_t format
 523:Src/mc_api.c  ****  */
 524:Src/mc_api.c  **** __weak alphabeta_t MC_GetIalphabetaMotor1(void)
 525:Src/mc_api.c  **** {
 1150              		.loc 1 525 1 is_stmt 1 view -0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154 0000 00B5     		push	{lr}
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 14, -4
 1157 0002 83B0     		sub	sp, sp, #12
 1158              		.cfi_def_cfa_offset 16
 526:Src/mc_api.c  **** 	return MCI_GetIalphabeta( pMCI[M1] );
 1159              		.loc 1 526 2 view .LVU140
 1160              		.loc 1 526 9 is_stmt 0 view .LVU141
 1161 0004 074B     		ldr	r3, .L130
 1162 0006 1868     		ldr	r0, [r3]
 1163 0008 FFF7FEFF 		bl	MCI_GetIalphabeta
 1164              	.LVL46:
 1165 000c 0346     		mov	r3, r0
 1166 000e 0020     		movs	r0, #0
 1167 0010 9AB2     		uxth	r2, r3
 1168 0012 62F30F00 		bfi	r0, r2, #0, #16
 1169 0016 1B0C     		lsrs	r3, r3, #16
 1170 0018 63F31F40 		bfi	r0, r3, #16, #16
 527:Src/mc_api.c  **** }
 1171              		.loc 1 527 1 view .LVU142
 1172 001c 03B0     		add	sp, sp, #12
 1173              		.cfi_def_cfa_offset 4
 1174              		@ sp needed
 1175 001e 5DF804FB 		ldr	pc, [sp], #4
 1176              	.L131:
 1177 0022 00BF     		.align	2
 1178              	.L130:
 1179 0024 00000000 		.word	pMCI
 1180              		.cfi_endproc
 1181              	.LFE1467:
 1183              		.section	.text.MC_GetIqdMotor1,"ax",%progbits
 1184              		.align	1
 1185              		.weak	MC_GetIqdMotor1
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	MC_GetIqdMotor1:
 1192              	.LFB1468:
 528:Src/mc_api.c  **** 
ARM GAS  /tmp/ccoI51lI.s 			page 30


 529:Src/mc_api.c  **** /**
 530:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in qd_t format
 531:Src/mc_api.c  ****  */
 532:Src/mc_api.c  **** __weak qd_t MC_GetIqdMotor1(void)
 533:Src/mc_api.c  **** {
 1193              		.loc 1 533 1 is_stmt 1 view -0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 8
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197 0000 00B5     		push	{lr}
 1198              		.cfi_def_cfa_offset 4
 1199              		.cfi_offset 14, -4
 1200 0002 83B0     		sub	sp, sp, #12
 1201              		.cfi_def_cfa_offset 16
 534:Src/mc_api.c  **** 	return MCI_GetIqd( pMCI[M1] );
 1202              		.loc 1 534 2 view .LVU144
 1203              		.loc 1 534 9 is_stmt 0 view .LVU145
 1204 0004 074B     		ldr	r3, .L134
 1205 0006 1868     		ldr	r0, [r3]
 1206 0008 FFF7FEFF 		bl	MCI_GetIqd
 1207              	.LVL47:
 1208 000c 0346     		mov	r3, r0
 1209 000e 0020     		movs	r0, #0
 1210 0010 9AB2     		uxth	r2, r3
 1211 0012 62F30F00 		bfi	r0, r2, #0, #16
 1212 0016 1B0C     		lsrs	r3, r3, #16
 1213 0018 63F31F40 		bfi	r0, r3, #16, #16
 535:Src/mc_api.c  **** }
 1214              		.loc 1 535 1 view .LVU146
 1215 001c 03B0     		add	sp, sp, #12
 1216              		.cfi_def_cfa_offset 4
 1217              		@ sp needed
 1218 001e 5DF804FB 		ldr	pc, [sp], #4
 1219              	.L135:
 1220 0022 00BF     		.align	2
 1221              	.L134:
 1222 0024 00000000 		.word	pMCI
 1223              		.cfi_endproc
 1224              	.LFE1468:
 1226              		.section	.text.MC_GetIqdMotor1_F,"ax",%progbits
 1227              		.align	1
 1228              		.weak	MC_GetIqdMotor1_F
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	MC_GetIqdMotor1_F:
 1235              	.LFB1469:
 536:Src/mc_api.c  **** 
 537:Src/mc_api.c  **** /**
 538:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in float type
 539:Src/mc_api.c  ****  */
 540:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdMotor1_F(void)
 541:Src/mc_api.c  **** {
 1236              		.loc 1 541 1 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccoI51lI.s 			page 31


 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240 0000 00B5     		push	{lr}
 1241              		.cfi_def_cfa_offset 4
 1242              		.cfi_offset 14, -4
 1243 0002 85B0     		sub	sp, sp, #20
 1244              		.cfi_def_cfa_offset 24
 542:Src/mc_api.c  **** 	return MCI_GetIqd_F( pMCI[M1] );
 1245              		.loc 1 542 2 view .LVU148
 1246              		.loc 1 542 9 is_stmt 0 view .LVU149
 1247 0004 034B     		ldr	r3, .L138
 1248 0006 1868     		ldr	r0, [r3]
 1249 0008 FFF7FEFF 		bl	MCI_GetIqd_F
 1250              	.LVL48:
 543:Src/mc_api.c  **** }
 1251              		.loc 1 543 1 view .LVU150
 1252 000c 05B0     		add	sp, sp, #20
 1253              		.cfi_def_cfa_offset 4
 1254              		@ sp needed
 1255 000e 5DF804FB 		ldr	pc, [sp], #4
 1256              	.L139:
 1257 0012 00BF     		.align	2
 1258              	.L138:
 1259 0014 00000000 		.word	pMCI
 1260              		.cfi_endproc
 1261              	.LFE1469:
 1263              		.section	.text.MC_GetIqdrefMotor1,"ax",%progbits
 1264              		.align	1
 1265              		.weak	MC_GetIqdrefMotor1
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv4-sp-d16
 1271              	MC_GetIqdrefMotor1:
 1272              	.LFB1470:
 544:Src/mc_api.c  **** 
 545:Src/mc_api.c  **** /**
 546:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in qd_t format
 547:Src/mc_api.c  ****  */
 548:Src/mc_api.c  **** __weak qd_t MC_GetIqdrefMotor1(void)
 549:Src/mc_api.c  **** {
 1273              		.loc 1 549 1 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277 0000 00B5     		push	{lr}
 1278              		.cfi_def_cfa_offset 4
 1279              		.cfi_offset 14, -4
 1280 0002 83B0     		sub	sp, sp, #12
 1281              		.cfi_def_cfa_offset 16
 550:Src/mc_api.c  **** 	return MCI_GetIqdref( pMCI[M1] );
 1282              		.loc 1 550 2 view .LVU152
 1283              		.loc 1 550 9 is_stmt 0 view .LVU153
 1284 0004 074B     		ldr	r3, .L142
 1285 0006 1868     		ldr	r0, [r3]
 1286 0008 FFF7FEFF 		bl	MCI_GetIqdref
 1287              	.LVL49:
 1288 000c 0346     		mov	r3, r0
ARM GAS  /tmp/ccoI51lI.s 			page 32


 1289 000e 0020     		movs	r0, #0
 1290 0010 9AB2     		uxth	r2, r3
 1291 0012 62F30F00 		bfi	r0, r2, #0, #16
 1292 0016 1B0C     		lsrs	r3, r3, #16
 1293 0018 63F31F40 		bfi	r0, r3, #16, #16
 551:Src/mc_api.c  **** }
 1294              		.loc 1 551 1 view .LVU154
 1295 001c 03B0     		add	sp, sp, #12
 1296              		.cfi_def_cfa_offset 4
 1297              		@ sp needed
 1298 001e 5DF804FB 		ldr	pc, [sp], #4
 1299              	.L143:
 1300 0022 00BF     		.align	2
 1301              	.L142:
 1302 0024 00000000 		.word	pMCI
 1303              		.cfi_endproc
 1304              	.LFE1470:
 1306              		.section	.text.MC_GetIqdrefMotor1_F,"ax",%progbits
 1307              		.align	1
 1308              		.weak	MC_GetIqdrefMotor1_F
 1309              		.syntax unified
 1310              		.thumb
 1311              		.thumb_func
 1312              		.fpu fpv4-sp-d16
 1314              	MC_GetIqdrefMotor1_F:
 1315              	.LFB1471:
 552:Src/mc_api.c  **** 
 553:Src/mc_api.c  **** /**
 554:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in float type
 555:Src/mc_api.c  ****  */
 556:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdrefMotor1_F(void)
 557:Src/mc_api.c  **** {
 1316              		.loc 1 557 1 is_stmt 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 16
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320 0000 00B5     		push	{lr}
 1321              		.cfi_def_cfa_offset 4
 1322              		.cfi_offset 14, -4
 1323 0002 85B0     		sub	sp, sp, #20
 1324              		.cfi_def_cfa_offset 24
 558:Src/mc_api.c  **** 	return MCI_GetIqdref_F( pMCI[M1] );
 1325              		.loc 1 558 2 view .LVU156
 1326              		.loc 1 558 9 is_stmt 0 view .LVU157
 1327 0004 034B     		ldr	r3, .L146
 1328 0006 1868     		ldr	r0, [r3]
 1329 0008 FFF7FEFF 		bl	MCI_GetIqdref_F
 1330              	.LVL50:
 559:Src/mc_api.c  **** }
 1331              		.loc 1 559 1 view .LVU158
 1332 000c 05B0     		add	sp, sp, #20
 1333              		.cfi_def_cfa_offset 4
 1334              		@ sp needed
 1335 000e 5DF804FB 		ldr	pc, [sp], #4
 1336              	.L147:
 1337 0012 00BF     		.align	2
 1338              	.L146:
ARM GAS  /tmp/ccoI51lI.s 			page 33


 1339 0014 00000000 		.word	pMCI
 1340              		.cfi_endproc
 1341              	.LFE1471:
 1343              		.section	.text.MC_GetVqdMotor1,"ax",%progbits
 1344              		.align	1
 1345              		.weak	MC_GetVqdMotor1
 1346              		.syntax unified
 1347              		.thumb
 1348              		.thumb_func
 1349              		.fpu fpv4-sp-d16
 1351              	MC_GetVqdMotor1:
 1352              	.LFB1472:
 560:Src/mc_api.c  **** 
 561:Src/mc_api.c  **** /**
 562:Src/mc_api.c  ****  * @brief returns Vq and Vd voltage values for Motor 1 in qd_t format
 563:Src/mc_api.c  ****  */
 564:Src/mc_api.c  **** __weak qd_t MC_GetVqdMotor1(void)
 565:Src/mc_api.c  **** {
 1353              		.loc 1 565 1 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357 0000 00B5     		push	{lr}
 1358              		.cfi_def_cfa_offset 4
 1359              		.cfi_offset 14, -4
 1360 0002 83B0     		sub	sp, sp, #12
 1361              		.cfi_def_cfa_offset 16
 566:Src/mc_api.c  **** 	return MCI_GetVqd( pMCI[M1] );
 1362              		.loc 1 566 2 view .LVU160
 1363              		.loc 1 566 9 is_stmt 0 view .LVU161
 1364 0004 074B     		ldr	r3, .L150
 1365 0006 1868     		ldr	r0, [r3]
 1366 0008 FFF7FEFF 		bl	MCI_GetVqd
 1367              	.LVL51:
 1368 000c 0346     		mov	r3, r0
 1369 000e 0020     		movs	r0, #0
 1370 0010 9AB2     		uxth	r2, r3
 1371 0012 62F30F00 		bfi	r0, r2, #0, #16
 1372 0016 1B0C     		lsrs	r3, r3, #16
 1373 0018 63F31F40 		bfi	r0, r3, #16, #16
 567:Src/mc_api.c  **** }
 1374              		.loc 1 567 1 view .LVU162
 1375 001c 03B0     		add	sp, sp, #12
 1376              		.cfi_def_cfa_offset 4
 1377              		@ sp needed
 1378 001e 5DF804FB 		ldr	pc, [sp], #4
 1379              	.L151:
 1380 0022 00BF     		.align	2
 1381              	.L150:
 1382 0024 00000000 		.word	pMCI
 1383              		.cfi_endproc
 1384              	.LFE1472:
 1386              		.section	.text.MC_GetValphabetaMotor1,"ax",%progbits
 1387              		.align	1
 1388              		.weak	MC_GetValphabetaMotor1
 1389              		.syntax unified
 1390              		.thumb
ARM GAS  /tmp/ccoI51lI.s 			page 34


 1391              		.thumb_func
 1392              		.fpu fpv4-sp-d16
 1394              	MC_GetValphabetaMotor1:
 1395              	.LFB1473:
 568:Src/mc_api.c  **** 
 569:Src/mc_api.c  **** /**
 570:Src/mc_api.c  ****  * @brief returns Valpha and Vbeta voltage values for Motor 1 in alphabeta_t format
 571:Src/mc_api.c  ****  */
 572:Src/mc_api.c  **** __weak alphabeta_t MC_GetValphabetaMotor1(void)
 573:Src/mc_api.c  **** {
 1396              		.loc 1 573 1 is_stmt 1 view -0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 8
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400 0000 00B5     		push	{lr}
 1401              		.cfi_def_cfa_offset 4
 1402              		.cfi_offset 14, -4
 1403 0002 83B0     		sub	sp, sp, #12
 1404              		.cfi_def_cfa_offset 16
 574:Src/mc_api.c  **** 	return MCI_GetValphabeta( pMCI[M1] );
 1405              		.loc 1 574 2 view .LVU164
 1406              		.loc 1 574 9 is_stmt 0 view .LVU165
 1407 0004 074B     		ldr	r3, .L154
 1408 0006 1868     		ldr	r0, [r3]
 1409 0008 FFF7FEFF 		bl	MCI_GetValphabeta
 1410              	.LVL52:
 1411 000c 0346     		mov	r3, r0
 1412 000e 0020     		movs	r0, #0
 1413 0010 9AB2     		uxth	r2, r3
 1414 0012 62F30F00 		bfi	r0, r2, #0, #16
 1415 0016 1B0C     		lsrs	r3, r3, #16
 1416 0018 63F31F40 		bfi	r0, r3, #16, #16
 575:Src/mc_api.c  **** }
 1417              		.loc 1 575 1 view .LVU166
 1418 001c 03B0     		add	sp, sp, #12
 1419              		.cfi_def_cfa_offset 4
 1420              		@ sp needed
 1421 001e 5DF804FB 		ldr	pc, [sp], #4
 1422              	.L155:
 1423 0022 00BF     		.align	2
 1424              	.L154:
 1425 0024 00000000 		.word	pMCI
 1426              		.cfi_endproc
 1427              	.LFE1473:
 1429              		.section	.text.MC_GetElAngledppMotor1,"ax",%progbits
 1430              		.align	1
 1431              		.weak	MC_GetElAngledppMotor1
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	MC_GetElAngledppMotor1:
 1438              	.LFB1474:
 576:Src/mc_api.c  **** 
 577:Src/mc_api.c  **** /**
 578:Src/mc_api.c  ****  * @brief returns the electrical angle of the rotor of Motor 1, in DDP format
 579:Src/mc_api.c  ****  */
ARM GAS  /tmp/ccoI51lI.s 			page 35


 580:Src/mc_api.c  **** __weak int16_t MC_GetElAngledppMotor1(void)
 581:Src/mc_api.c  **** {
 1439              		.loc 1 581 1 is_stmt 1 view -0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443 0000 08B5     		push	{r3, lr}
 1444              		.cfi_def_cfa_offset 8
 1445              		.cfi_offset 3, -8
 1446              		.cfi_offset 14, -4
 582:Src/mc_api.c  **** 	return MCI_GetElAngledpp( pMCI[M1] );
 1447              		.loc 1 582 2 view .LVU168
 1448              		.loc 1 582 9 is_stmt 0 view .LVU169
 1449 0002 024B     		ldr	r3, .L158
 1450 0004 1868     		ldr	r0, [r3]
 1451 0006 FFF7FEFF 		bl	MCI_GetElAngledpp
 1452              	.LVL53:
 583:Src/mc_api.c  **** }
 1453              		.loc 1 583 1 view .LVU170
 1454 000a 08BD     		pop	{r3, pc}
 1455              	.L159:
 1456              		.align	2
 1457              	.L158:
 1458 000c 00000000 		.word	pMCI
 1459              		.cfi_endproc
 1460              	.LFE1474:
 1462              		.section	.text.MC_GetTerefMotor1,"ax",%progbits
 1463              		.align	1
 1464              		.weak	MC_GetTerefMotor1
 1465              		.syntax unified
 1466              		.thumb
 1467              		.thumb_func
 1468              		.fpu fpv4-sp-d16
 1470              	MC_GetTerefMotor1:
 1471              	.LFB1475:
 584:Src/mc_api.c  **** 
 585:Src/mc_api.c  **** /**
 586:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
 587:Src/mc_api.c  ****  */
 588:Src/mc_api.c  **** __weak int16_t MC_GetTerefMotor1(void)
 589:Src/mc_api.c  **** {
 1472              		.loc 1 589 1 is_stmt 1 view -0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476 0000 08B5     		push	{r3, lr}
 1477              		.cfi_def_cfa_offset 8
 1478              		.cfi_offset 3, -8
 1479              		.cfi_offset 14, -4
 590:Src/mc_api.c  **** 	return MCI_GetTeref( pMCI[M1] );
 1480              		.loc 1 590 2 view .LVU172
 1481              		.loc 1 590 9 is_stmt 0 view .LVU173
 1482 0002 024B     		ldr	r3, .L162
 1483 0004 1868     		ldr	r0, [r3]
 1484 0006 FFF7FEFF 		bl	MCI_GetTeref
 1485              	.LVL54:
 591:Src/mc_api.c  **** }
ARM GAS  /tmp/ccoI51lI.s 			page 36


 1486              		.loc 1 591 1 view .LVU174
 1487 000a 08BD     		pop	{r3, pc}
 1488              	.L163:
 1489              		.align	2
 1490              	.L162:
 1491 000c 00000000 		.word	pMCI
 1492              		.cfi_endproc
 1493              	.LFE1475:
 1495              		.section	.text.MC_GetTerefMotor1_F,"ax",%progbits
 1496              		.align	1
 1497              		.weak	MC_GetTerefMotor1_F
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
 1503              	MC_GetTerefMotor1_F:
 1504              	.LFB1476:
 592:Src/mc_api.c  **** 
 593:Src/mc_api.c  **** /**
 594:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
 595:Src/mc_api.c  ****  */
 596:Src/mc_api.c  **** __weak float MC_GetTerefMotor1_F(void)
 597:Src/mc_api.c  **** {
 1505              		.loc 1 597 1 is_stmt 1 view -0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509 0000 08B5     		push	{r3, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 3, -8
 1512              		.cfi_offset 14, -4
 598:Src/mc_api.c  **** 	return MCI_GetTeref_F( pMCI[M1] );
 1513              		.loc 1 598 2 view .LVU176
 1514              		.loc 1 598 9 is_stmt 0 view .LVU177
 1515 0002 024B     		ldr	r3, .L166
 1516 0004 1868     		ldr	r0, [r3]
 1517 0006 FFF7FEFF 		bl	MCI_GetTeref_F
 1518              	.LVL55:
 599:Src/mc_api.c  **** }
 1519              		.loc 1 599 1 view .LVU178
 1520 000a 08BD     		pop	{r3, pc}
 1521              	.L167:
 1522              		.align	2
 1523              	.L166:
 1524 000c 00000000 		.word	pMCI
 1525              		.cfi_endproc
 1526              	.LFE1476:
 1528              		.section	.text.MC_Clear_IqdrefMotor1,"ax",%progbits
 1529              		.align	1
 1530              		.weak	MC_Clear_IqdrefMotor1
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1534              		.fpu fpv4-sp-d16
 1536              	MC_Clear_IqdrefMotor1:
 1537              	.LFB1477:
 600:Src/mc_api.c  **** 
ARM GAS  /tmp/ccoI51lI.s 			page 37


 601:Src/mc_api.c  **** /**
 602:Src/mc_api.c  ****  * @brief re-initializes Iq and Id references to their default values for Motor 1
 603:Src/mc_api.c  ****  *
 604:Src/mc_api.c  ****  * The default values for the Iq and Id references are coming from the Speed
 605:Src/mc_api.c  ****  * or the Torque controller depending on the control mode.
 606:Src/mc_api.c  ****  *
 607:Src/mc_api.c  ****  * @see   SpeednTorqCtrl for more details.
 608:Src/mc_api.c  ****  */
 609:Src/mc_api.c  **** __weak void MC_Clear_IqdrefMotor1(void)
 610:Src/mc_api.c  **** {
 1538              		.loc 1 610 1 is_stmt 1 view -0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542 0000 08B5     		push	{r3, lr}
 1543              		.cfi_def_cfa_offset 8
 1544              		.cfi_offset 3, -8
 1545              		.cfi_offset 14, -4
 611:Src/mc_api.c  **** 	MCI_Clear_Iqdref( pMCI[M1] );
 1546              		.loc 1 611 2 view .LVU180
 1547 0002 024B     		ldr	r3, .L170
 1548 0004 1868     		ldr	r0, [r3]
 1549 0006 FFF7FEFF 		bl	MCI_Clear_Iqdref
 1550              	.LVL56:
 612:Src/mc_api.c  **** }
 1551              		.loc 1 612 1 is_stmt 0 view .LVU181
 1552 000a 08BD     		pop	{r3, pc}
 1553              	.L171:
 1554              		.align	2
 1555              	.L170:
 1556 000c 00000000 		.word	pMCI
 1557              		.cfi_endproc
 1558              	.LFE1477:
 1560              		.section	.text.MC_AcknowledgeFaultMotor1,"ax",%progbits
 1561              		.align	1
 1562              		.weak	MC_AcknowledgeFaultMotor1
 1563              		.syntax unified
 1564              		.thumb
 1565              		.thumb_func
 1566              		.fpu fpv4-sp-d16
 1568              	MC_AcknowledgeFaultMotor1:
 1569              	.LFB1478:
 613:Src/mc_api.c  **** 
 614:Src/mc_api.c  **** /**
 615:Src/mc_api.c  ****  * @brief Acknowledge a Motor Control fault that occured on Motor 1
 616:Src/mc_api.c  ****  *
 617:Src/mc_api.c  ****  *  This function informs Motor 1's state machine that the Application has taken
 618:Src/mc_api.c  ****  * the error condition that occured into account. If no error condition exists when
 619:Src/mc_api.c  ****  * the function is called, nothing is done and false is returned. Otherwise, true is
 620:Src/mc_api.c  ****  * returned.
 621:Src/mc_api.c  ****  */
 622:Src/mc_api.c  **** __weak bool MC_AcknowledgeFaultMotor1( void )
 623:Src/mc_api.c  **** {
 1570              		.loc 1 623 1 is_stmt 1 view -0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 0
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoI51lI.s 			page 38


 1574 0000 08B5     		push	{r3, lr}
 1575              		.cfi_def_cfa_offset 8
 1576              		.cfi_offset 3, -8
 1577              		.cfi_offset 14, -4
 624:Src/mc_api.c  **** 	return MCI_FaultAcknowledged( pMCI[M1] );
 1578              		.loc 1 624 2 view .LVU183
 1579              		.loc 1 624 9 is_stmt 0 view .LVU184
 1580 0002 024B     		ldr	r3, .L174
 1581 0004 1868     		ldr	r0, [r3]
 1582 0006 FFF7FEFF 		bl	MCI_FaultAcknowledged
 1583              	.LVL57:
 625:Src/mc_api.c  **** }
 1584              		.loc 1 625 1 view .LVU185
 1585 000a 08BD     		pop	{r3, pc}
 1586              	.L175:
 1587              		.align	2
 1588              	.L174:
 1589 000c 00000000 		.word	pMCI
 1590              		.cfi_endproc
 1591              	.LFE1478:
 1593              		.section	.text.MC_GetOccurredFaultsMotor1,"ax",%progbits
 1594              		.align	1
 1595              		.weak	MC_GetOccurredFaultsMotor1
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv4-sp-d16
 1601              	MC_GetOccurredFaultsMotor1:
 1602              	.LFB1479:
 626:Src/mc_api.c  **** 
 627:Src/mc_api.c  **** /**
 628:Src/mc_api.c  ****  * @brief Returns a bitfiled showing "new" faults that occured on Motor 1
 629:Src/mc_api.c  ****  *
 630:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 631:Src/mc_api.c  ****  * that have occurred on Motor 1 since its state machine moved to the #FAULT_NOW state.
 632:Src/mc_api.c  ****  *
 633:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 634:Src/mc_api.c  ****  * of all possible faults codes.
 635:Src/mc_api.c  ****  */
 636:Src/mc_api.c  **** __weak uint16_t MC_GetOccurredFaultsMotor1(void)
 637:Src/mc_api.c  **** {
 1603              		.loc 1 637 1 is_stmt 1 view -0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 1607 0000 08B5     		push	{r3, lr}
 1608              		.cfi_def_cfa_offset 8
 1609              		.cfi_offset 3, -8
 1610              		.cfi_offset 14, -4
 638:Src/mc_api.c  **** 	return MCI_GetOccurredFaults( pMCI[M1] );
 1611              		.loc 1 638 2 view .LVU187
 1612              		.loc 1 638 9 is_stmt 0 view .LVU188
 1613 0002 024B     		ldr	r3, .L178
 1614 0004 1868     		ldr	r0, [r3]
 1615 0006 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1616              	.LVL58:
 639:Src/mc_api.c  **** }
ARM GAS  /tmp/ccoI51lI.s 			page 39


 1617              		.loc 1 639 1 view .LVU189
 1618 000a 08BD     		pop	{r3, pc}
 1619              	.L179:
 1620              		.align	2
 1621              	.L178:
 1622 000c 00000000 		.word	pMCI
 1623              		.cfi_endproc
 1624              	.LFE1479:
 1626              		.section	.text.MC_GetCurrentFaultsMotor1,"ax",%progbits
 1627              		.align	1
 1628              		.weak	MC_GetCurrentFaultsMotor1
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1632              		.fpu fpv4-sp-d16
 1634              	MC_GetCurrentFaultsMotor1:
 1635              	.LFB1480:
 640:Src/mc_api.c  **** 
 641:Src/mc_api.c  **** /**
 642:Src/mc_api.c  ****  * @brief returns a bitfield showing all current faults on Motor 1
 643:Src/mc_api.c  ****  *
 644:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 645:Src/mc_api.c  ****  * that are currently active.
 646:Src/mc_api.c  ****  *
 647:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 648:Src/mc_api.c  ****  * of all possible faults codes.
 649:Src/mc_api.c  ****  */
 650:Src/mc_api.c  **** __weak uint16_t MC_GetCurrentFaultsMotor1(void)
 651:Src/mc_api.c  **** {
 1636              		.loc 1 651 1 is_stmt 1 view -0
 1637              		.cfi_startproc
 1638              		@ args = 0, pretend = 0, frame = 0
 1639              		@ frame_needed = 0, uses_anonymous_args = 0
 1640 0000 08B5     		push	{r3, lr}
 1641              		.cfi_def_cfa_offset 8
 1642              		.cfi_offset 3, -8
 1643              		.cfi_offset 14, -4
 652:Src/mc_api.c  **** 	return MCI_GetCurrentFaults( pMCI[M1] );
 1644              		.loc 1 652 2 view .LVU191
 1645              		.loc 1 652 9 is_stmt 0 view .LVU192
 1646 0002 024B     		ldr	r3, .L182
 1647 0004 1868     		ldr	r0, [r3]
 1648 0006 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1649              	.LVL59:
 653:Src/mc_api.c  **** }
 1650              		.loc 1 653 1 view .LVU193
 1651 000a 08BD     		pop	{r3, pc}
 1652              	.L183:
 1653              		.align	2
 1654              	.L182:
 1655 000c 00000000 		.word	pMCI
 1656              		.cfi_endproc
 1657              	.LFE1480:
 1659              		.section	.text.MC_GetSTMStateMotor1,"ax",%progbits
 1660              		.align	1
 1661              		.weak	MC_GetSTMStateMotor1
 1662              		.syntax unified
ARM GAS  /tmp/ccoI51lI.s 			page 40


 1663              		.thumb
 1664              		.thumb_func
 1665              		.fpu fpv4-sp-d16
 1667              	MC_GetSTMStateMotor1:
 1668              	.LFB1481:
 654:Src/mc_api.c  **** 
 655:Src/mc_api.c  **** /**
 656:Src/mc_api.c  ****  * @brief returns the current state of Motor 1 state machine
 657:Src/mc_api.c  ****  */
 658:Src/mc_api.c  **** __weak MCI_State_t  MC_GetSTMStateMotor1(void)
 659:Src/mc_api.c  **** {
 1669              		.loc 1 659 1 is_stmt 1 view -0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673 0000 08B5     		push	{r3, lr}
 1674              		.cfi_def_cfa_offset 8
 1675              		.cfi_offset 3, -8
 1676              		.cfi_offset 14, -4
 660:Src/mc_api.c  **** 	return MCI_GetSTMState( pMCI[M1] );
 1677              		.loc 1 660 2 view .LVU195
 1678              		.loc 1 660 9 is_stmt 0 view .LVU196
 1679 0002 024B     		ldr	r3, .L186
 1680 0004 1868     		ldr	r0, [r3]
 1681 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1682              	.LVL60:
 661:Src/mc_api.c  **** }
 1683              		.loc 1 661 1 view .LVU197
 1684 000a 08BD     		pop	{r3, pc}
 1685              	.L187:
 1686              		.align	2
 1687              	.L186:
 1688 000c 00000000 		.word	pMCI
 1689              		.cfi_endproc
 1690              	.LFE1481:
 1692              		.section	.text.MC_SetPolarizationOffsetsMotor1,"ax",%progbits
 1693              		.align	1
 1694              		.global	MC_SetPolarizationOffsetsMotor1
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu fpv4-sp-d16
 1700              	MC_SetPolarizationOffsetsMotor1:
 1701              	.LVL61:
 1702              	.LFB1482:
 662:Src/mc_api.c  **** 
 663:Src/mc_api.c  **** /**
 664:Src/mc_api.c  ****   * @brief Sets the polarization offset values to use for Motor 1
 665:Src/mc_api.c  ****   *
 666:Src/mc_api.c  ****   * The Motor Control algorithm relies on a number of current and voltage measures. The hardware
 667:Src/mc_api.c  ****   * parts that make these measurements need to be characterized at least once in the course of
 668:Src/mc_api.c  ****   * product life, prior to its first activation. This characterization consists in measuring the
 669:Src/mc_api.c  ****   * voltage presented to the ADC channels when either no current flows into the phases of the motor
 670:Src/mc_api.c  ****   * or no voltage is applied to them. This characterization is named polarization offsets measureme
 671:Src/mc_api.c  ****   * and its results are the polarization offsets.
 672:Src/mc_api.c  ****   *
 673:Src/mc_api.c  ****   * The Motor Control Firmware can performs this polarization offsets measurement procedure which
ARM GAS  /tmp/ccoI51lI.s 			page 41


 674:Src/mc_api.c  ****   * results in a number of offset values that the application can store in a non volatile memory an
 675:Src/mc_api.c  ****   * then set into the Motor Control subsystem at power-on or after a reset.
 676:Src/mc_api.c  ****   *
 677:Src/mc_api.c  ****   * The application uses this function to set the polarization offset values that the Motor Control
 678:Src/mc_api.c  ****   * subsystem is to use in the current session. This function can only be used when the state machi
 679:Src/mc_api.c  ****   * of the motor is in the #IDLE state in which case it returns #MC_SUCCESS. Otherwise, it does not
 680:Src/mc_api.c  ****   * and returns the #MC_WRONG_STATE_ERROR error code.
 681:Src/mc_api.c  ****   *
 682:Src/mc_api.c  ****   *  The Motor Control subsystem needs to know the polarization offsets before the motor can be con
 683:Src/mc_api.c  ****   * The MC_SetPolarizationOffsetsMotor1() function provides a way to set these offsets. Alternative
 684:Src/mc_api.c  ****   * application can either:
 685:Src/mc_api.c  ****   *
 686:Src/mc_api.c  ****   *  * Execute the polarization offsets measurement procedure with a call to
 687:Src/mc_api.c  ****   *    MC_StartPolarizationOffsetsMeasurementMotor1() after a reset or a power on;
 688:Src/mc_api.c  ****   *  * Start the motor control with the MC_StartWithPolarizationMotor1() that will execute the proc
 689:Src/mc_api.c  ****   *    before actually starting the motor, on the first time it is called after a reset or a power 
 690:Src/mc_api.c  ****   *
 691:Src/mc_api.c  ****   * When this function completes successfully, the state of the polarization offsets measurement pr
 692:Src/mc_api.c  ****   * is set to #COMPLETED. See MC_GetPolarizationState().
 693:Src/mc_api.c  ****   *
 694:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on a structure containing the offset values
 695:Src/mc_api.c  ****   */
 696:Src/mc_api.c  **** bool MC_SetPolarizationOffsetsMotor1( PolarizationOffsets_t * PolarizationOffsets )
 697:Src/mc_api.c  **** {
 1703              		.loc 1 697 1 is_stmt 1 view -0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              		.loc 1 697 1 is_stmt 0 view .LVU199
 1708 0000 08B5     		push	{r3, lr}
 1709              		.cfi_def_cfa_offset 8
 1710              		.cfi_offset 3, -8
 1711              		.cfi_offset 14, -4
 1712 0002 0146     		mov	r1, r0
 698:Src/mc_api.c  **** 	return( MCI_SetCalibratedOffsetsMotor( pMCI[M1], PolarizationOffsets ) );
 1713              		.loc 1 698 2 is_stmt 1 view .LVU200
 1714              		.loc 1 698 10 is_stmt 0 view .LVU201
 1715 0004 024B     		ldr	r3, .L190
 1716 0006 1868     		ldr	r0, [r3]
 1717              	.LVL62:
 1718              		.loc 1 698 10 view .LVU202
 1719 0008 FFF7FEFF 		bl	MCI_SetCalibratedOffsetsMotor
 1720              	.LVL63:
 699:Src/mc_api.c  **** }
 1721              		.loc 1 699 1 view .LVU203
 1722 000c 08BD     		pop	{r3, pc}
 1723              	.L191:
 1724 000e 00BF     		.align	2
 1725              	.L190:
 1726 0010 00000000 		.word	pMCI
 1727              		.cfi_endproc
 1728              	.LFE1482:
 1730              		.section	.text.MC_GetPolarizationOffsetsMotor1,"ax",%progbits
 1731              		.align	1
 1732              		.global	MC_GetPolarizationOffsetsMotor1
 1733              		.syntax unified
 1734              		.thumb
ARM GAS  /tmp/ccoI51lI.s 			page 42


 1735              		.thumb_func
 1736              		.fpu fpv4-sp-d16
 1738              	MC_GetPolarizationOffsetsMotor1:
 1739              	.LVL64:
 1740              	.LFB1483:
 700:Src/mc_api.c  **** 
 701:Src/mc_api.c  **** /**
 702:Src/mc_api.c  ****   * @brief Returns the polarization offset values measured or set for Motor 1
 703:Src/mc_api.c  ****   *
 704:Src/mc_api.c  ****   *  See MC_SetPolarizationOffsetsMotor1() for more details.
 705:Src/mc_api.c  ****   *
 706:Src/mc_api.c  ****   *  If the Motor Control Firmware knows the polarization offset values, they are copied into the
 707:Src/mc_api.c  ****   * @p PolarizationOffsets structure and #MC_SUCCESS is returned. Otherwise, nothing is done and
 708:Src/mc_api.c  ****   * #MC_NO_POLARIZATION_OFFSETS_ERROR is returned.
 709:Src/mc_api.c  ****   *
 710:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on the structure into which the polarization offsets will
 711:Src/mc_api.c  ****   *        copied
 712:Src/mc_api.c  ****   * @return #MC_SUCCESS if calibration data were present and could be copied into @p PolarizationOf
 713:Src/mc_api.c  ****   *         #MC_NO_POLARIZATION_OFFSETS_ERROR otherwise.
 714:Src/mc_api.c  ****   */
 715:Src/mc_api.c  **** bool MC_GetPolarizationOffsetsMotor1( PolarizationOffsets_t * PolarizationOffsets )
 716:Src/mc_api.c  **** {
 1741              		.loc 1 716 1 is_stmt 1 view -0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 0
 1744              		@ frame_needed = 0, uses_anonymous_args = 0
 1745              		.loc 1 716 1 is_stmt 0 view .LVU205
 1746 0000 08B5     		push	{r3, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 3, -8
 1749              		.cfi_offset 14, -4
 1750 0002 0146     		mov	r1, r0
 717:Src/mc_api.c  ****    return ( MCI_GetCalibratedOffsetsMotor( pMCI[M1], PolarizationOffsets) );
 1751              		.loc 1 717 4 is_stmt 1 view .LVU206
 1752              		.loc 1 717 13 is_stmt 0 view .LVU207
 1753 0004 024B     		ldr	r3, .L194
 1754 0006 1868     		ldr	r0, [r3]
 1755              	.LVL65:
 1756              		.loc 1 717 13 view .LVU208
 1757 0008 FFF7FEFF 		bl	MCI_GetCalibratedOffsetsMotor
 1758              	.LVL66:
 718:Src/mc_api.c  **** }
 1759              		.loc 1 718 1 view .LVU209
 1760 000c 08BD     		pop	{r3, pc}
 1761              	.L195:
 1762 000e 00BF     		.align	2
 1763              	.L194:
 1764 0010 00000000 		.word	pMCI
 1765              		.cfi_endproc
 1766              	.LFE1483:
 1768              		.section	.text.MC_StartPolarizationOffsetsMeasurementMotor1,"ax",%progbits
 1769              		.align	1
 1770              		.global	MC_StartPolarizationOffsetsMeasurementMotor1
 1771              		.syntax unified
 1772              		.thumb
 1773              		.thumb_func
 1774              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccoI51lI.s 			page 43


 1776              	MC_StartPolarizationOffsetsMeasurementMotor1:
 1777              	.LFB1484:
 719:Src/mc_api.c  **** 
 720:Src/mc_api.c  **** /**
 721:Src/mc_api.c  ****   * @brief Starts the polarization offsets measurement procedure.
 722:Src/mc_api.c  ****   *
 723:Src/mc_api.c  ****   * See MC_SetPolarizationOffsetsMotor1() for more details.
 724:Src/mc_api.c  ****   *
 725:Src/mc_api.c  ****   * If the Motor Control Firmware is in the #IDLE state, the procedure is started, the state machin
 726:Src/mc_api.c  ****   * of the motor switches to #OFFSET_CALIB and #MC_SUCCESS is returned. Otherwise, nothing is done
 727:Src/mc_api.c  ****   * and the #MC_WRONG_STATE_ERROR error code is returned.
 728:Src/mc_api.c  ****   *
 729:Src/mc_api.c  ****   * The polarization offsets measurement procedure is only triggered by this function and it is has
 730:Src/mc_api.c  ****   * completed when this function returns. The application can use the MC_GetPolarizationState()
 731:Src/mc_api.c  ****   * function to query the state of the procedure.
 732:Src/mc_api.c  ****   *
 733:Src/mc_api.c  ****   * @see MC_GetPolarizationState()
 734:Src/mc_api.c  ****   */
 735:Src/mc_api.c  **** bool MC_StartPolarizationOffsetsMeasurementMotor1( void )
 736:Src/mc_api.c  **** {
 1778              		.loc 1 736 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782 0000 08B5     		push	{r3, lr}
 1783              		.cfi_def_cfa_offset 8
 1784              		.cfi_offset 3, -8
 1785              		.cfi_offset 14, -4
 737:Src/mc_api.c  **** 	return( MCI_StartOffsetMeasurments( pMCI[M1] ) );
 1786              		.loc 1 737 2 view .LVU211
 1787              		.loc 1 737 10 is_stmt 0 view .LVU212
 1788 0002 024B     		ldr	r3, .L198
 1789 0004 1868     		ldr	r0, [r3]
 1790 0006 FFF7FEFF 		bl	MCI_StartOffsetMeasurments
 1791              	.LVL67:
 738:Src/mc_api.c  **** }
 1792              		.loc 1 738 1 view .LVU213
 1793 000a 08BD     		pop	{r3, pc}
 1794              	.L199:
 1795              		.align	2
 1796              	.L198:
 1797 000c 00000000 		.word	pMCI
 1798              		.cfi_endproc
 1799              	.LFE1484:
 1801              		.section	.text.MC_GetAveragePowerMotor1_F,"ax",%progbits
 1802              		.align	1
 1803              		.weak	MC_GetAveragePowerMotor1_F
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1807              		.fpu fpv4-sp-d16
 1809              	MC_GetAveragePowerMotor1_F:
 1810              	.LFB1485:
 739:Src/mc_api.c  **** 
 740:Src/mc_api.c  **** /**
 741:Src/mc_api.c  ****  * @brief This method is used to get the average measured motor power
 742:Src/mc_api.c  ****  *        expressed in watt for Motor 1.
ARM GAS  /tmp/ccoI51lI.s 			page 44


 743:Src/mc_api.c  **** 
 744:Src/mc_api.c  ****  * @retval float The average measured motor power expressed in watt.
 745:Src/mc_api.c  ****  */
 746:Src/mc_api.c  **** __weak float MC_GetAveragePowerMotor1_F(void)
 747:Src/mc_api.c  **** {
 1811              		.loc 1 747 1 is_stmt 1 view -0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 1815 0000 08B5     		push	{r3, lr}
 1816              		.cfi_def_cfa_offset 8
 1817              		.cfi_offset 3, -8
 1818              		.cfi_offset 14, -4
 748:Src/mc_api.c  **** 	return (PQD_GetAvrgElMotorPowerW(pMPM[M1]));
 1819              		.loc 1 748 2 view .LVU215
 1820              		.loc 1 748 10 is_stmt 0 view .LVU216
 1821 0002 024B     		ldr	r3, .L202
 1822 0004 1868     		ldr	r0, [r3]
 1823 0006 FFF7FEFF 		bl	PQD_GetAvrgElMotorPowerW
 1824              	.LVL68:
 749:Src/mc_api.c  **** }
 1825              		.loc 1 749 1 view .LVU217
 1826 000a 08BD     		pop	{r3, pc}
 1827              	.L203:
 1828              		.align	2
 1829              	.L202:
 1830 000c 00000000 		.word	pMPM
 1831              		.cfi_endproc
 1832              	.LFE1485:
 1834              		.section	.data.startMotorTime,"aw"
 1835              		.align	3
 1836              		.set	.LANCHOR0,. + 0
 1839              	startMotorTime:
 1840 0000 FFFFFFFF 		.word	-1
 1841 0004 FFFFFFFF 		.word	-1
 1842              		.text
 1843              	.Letext0:
 1844              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1845              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 1846              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 1847              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1848              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1849              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1850              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1851              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1852              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1853              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1854              		.file 12 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 1855              		.file 13 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
 1856              		.file 14 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1857              		.file 15 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1858              		.file 16 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1859              		.file 17 "Inc/mc_interface.h"
 1860              		.file 18 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 1861              		.file 19 "Inc/regular_conversion_manager.h"
 1862              		.file 20 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 1863              		.file 21 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
ARM GAS  /tmp/ccoI51lI.s 			page 45


 1864              		.file 22 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 1865              		.file 23 "Inc/mc_configuration_registers.h"
 1866              		.file 24 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 1867              		.file 25 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 1868              		.file 26 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 1869              		.file 27 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 1870              		.file 28 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 1871              		.file 29 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 1872              		.file 30 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 1873              		.file 31 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_cordic_speed_pos_fdbk.h"
 1874              		.file 32 "Inc/mc_config.h"
 1875              		.file 33 "Inc/debug_scope.h"
ARM GAS  /tmp/ccoI51lI.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_api.c
     /tmp/ccoI51lI.s:18     .text.getStartMotorTick:0000000000000000 $t
     /tmp/ccoI51lI.s:26     .text.getStartMotorTick:0000000000000000 getStartMotorTick
     /tmp/ccoI51lI.s:42     .text.getStartMotorTick:0000000000000008 $d
     /tmp/ccoI51lI.s:47     .text.MC_StartMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:54     .text.MC_StartMotor1:0000000000000000 MC_StartMotor1
     /tmp/ccoI51lI.s:82     .text.MC_StartMotor1:0000000000000018 $d
     /tmp/ccoI51lI.s:88     .text.MC_StopMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:95     .text.MC_StopMotor1:0000000000000000 MC_StopMotor1
     /tmp/ccoI51lI.s:116    .text.MC_StopMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:121    .text.MC_ProgramSpeedRampMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:128    .text.MC_ProgramSpeedRampMotor1:0000000000000000 MC_ProgramSpeedRampMotor1
     /tmp/ccoI51lI.s:156    .text.MC_ProgramSpeedRampMotor1:0000000000000010 $d
     /tmp/ccoI51lI.s:161    .text.MC_ProgramSpeedSinMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:168    .text.MC_ProgramSpeedSinMotor1:0000000000000000 MC_ProgramSpeedSinMotor1
     /tmp/ccoI51lI.s:199    .text.MC_ProgramSpeedSinMotor1:0000000000000014 $d
     /tmp/ccoI51lI.s:204    .text.MC_ProgramSpeedRampMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:211    .text.MC_ProgramSpeedRampMotor1_F:0000000000000000 MC_ProgramSpeedRampMotor1_F
     /tmp/ccoI51lI.s:236    .text.MC_ProgramSpeedRampMotor1_F:0000000000000010 $d
     /tmp/ccoI51lI.s:241    .text.MC_ProgramTorqueRampMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:248    .text.MC_ProgramTorqueRampMotor1:0000000000000000 MC_ProgramTorqueRampMotor1
     /tmp/ccoI51lI.s:276    .text.MC_ProgramTorqueRampMotor1:0000000000000010 $d
     /tmp/ccoI51lI.s:281    .text.MC_ProgramTorqueRampMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:288    .text.MC_ProgramTorqueRampMotor1_F:0000000000000000 MC_ProgramTorqueRampMotor1_F
     /tmp/ccoI51lI.s:313    .text.MC_ProgramTorqueRampMotor1_F:0000000000000010 $d
     /tmp/ccoI51lI.s:318    .text.MC_SetCurrentReferenceMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:325    .text.MC_SetCurrentReferenceMotor1:0000000000000000 MC_SetCurrentReferenceMotor1
     /tmp/ccoI51lI.s:351    .text.MC_SetCurrentReferenceMotor1:0000000000000018 $d
     /tmp/ccoI51lI.s:356    .text.MC_SetCurrentReferenceMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:363    .text.MC_SetCurrentReferenceMotor1_F:0000000000000000 MC_SetCurrentReferenceMotor1_F
     /tmp/ccoI51lI.s:387    .text.MC_SetCurrentReferenceMotor1_F:0000000000000014 $d
     /tmp/ccoI51lI.s:392    .text.MC_GetCommandStateMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:399    .text.MC_GetCommandStateMotor1:0000000000000000 MC_GetCommandStateMotor1
     /tmp/ccoI51lI.s:420    .text.MC_GetCommandStateMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:425    .text.MC_GetLastCommandMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:432    .text.MC_GetLastCommandMotor1:0000000000000000 MC_GetLastCommandMotor1
     /tmp/ccoI51lI.s:453    .text.MC_GetLastCommandMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:458    .text.MC_StopSpeedRampMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:465    .text.MC_StopSpeedRampMotor1:0000000000000000 MC_StopSpeedRampMotor1
     /tmp/ccoI51lI.s:486    .text.MC_StopSpeedRampMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:491    .text.MC_StopRampMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:498    .text.MC_StopRampMotor1:0000000000000000 MC_StopRampMotor1
     /tmp/ccoI51lI.s:518    .text.MC_StopRampMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:523    .text.MC_HasRampCompletedMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:530    .text.MC_HasRampCompletedMotor1:0000000000000000 MC_HasRampCompletedMotor1
     /tmp/ccoI51lI.s:551    .text.MC_HasRampCompletedMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:556    .text.MC_GetMecSpeedReferenceMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:563    .text.MC_GetMecSpeedReferenceMotor1:0000000000000000 MC_GetMecSpeedReferenceMotor1
     /tmp/ccoI51lI.s:584    .text.MC_GetMecSpeedReferenceMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:589    .text.MC_GetMecSpeedReferenceMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:596    .text.MC_GetMecSpeedReferenceMotor1_F:0000000000000000 MC_GetMecSpeedReferenceMotor1_F
     /tmp/ccoI51lI.s:617    .text.MC_GetMecSpeedReferenceMotor1_F:000000000000000c $d
     /tmp/ccoI51lI.s:622    .text.MC_GetMecSpeedAverageMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:629    .text.MC_GetMecSpeedAverageMotor1:0000000000000000 MC_GetMecSpeedAverageMotor1
     /tmp/ccoI51lI.s:650    .text.MC_GetMecSpeedAverageMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:655    .text.MC_GetMecAuxiliarySpeedAverageMotor1:0000000000000000 $t
ARM GAS  /tmp/ccoI51lI.s 			page 47


     /tmp/ccoI51lI.s:662    .text.MC_GetMecAuxiliarySpeedAverageMotor1:0000000000000000 MC_GetMecAuxiliarySpeedAverageMotor1
     /tmp/ccoI51lI.s:682    .text.MC_GetMecAuxiliarySpeedAverageMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:687    .text.MC_GetMecAuxiliarySpeedAverageMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:694    .text.MC_GetMecAuxiliarySpeedAverageMotor1_F:0000000000000000 MC_GetMecAuxiliarySpeedAverageMotor1_F
     /tmp/ccoI51lI.s:722    .text.MC_GetMecAuxiliarySpeedAverageMotor1_F:0000000000000020 $d
     /tmp/ccoI51lI.s:727    .text.MC_GetAuxiliaryElAngledppMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:734    .text.MC_GetAuxiliaryElAngledppMotor1:0000000000000000 MC_GetAuxiliaryElAngledppMotor1
     /tmp/ccoI51lI.s:754    .text.MC_GetAuxiliaryElAngledppMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:759    .text.MC_GetAuxiliaryElAngleMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:766    .text.MC_GetAuxiliaryElAngleMotor1_F:0000000000000000 MC_GetAuxiliaryElAngleMotor1_F
     /tmp/ccoI51lI.s:791    .text.MC_GetAuxiliaryElAngleMotor1_F:000000000000001c $d
     /tmp/ccoI51lI.s:797    .text.MC_GetAverageMecSpeedMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:804    .text.MC_GetAverageMecSpeedMotor1_F:0000000000000000 MC_GetAverageMecSpeedMotor1_F
     /tmp/ccoI51lI.s:825    .text.MC_GetAverageMecSpeedMotor1_F:000000000000000c $d
     /tmp/ccoI51lI.s:830    .text.MC_GetLastRampFinalSpeedMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:837    .text.MC_GetLastRampFinalSpeedMotor1:0000000000000000 MC_GetLastRampFinalSpeedMotor1
     /tmp/ccoI51lI.s:858    .text.MC_GetLastRampFinalSpeedMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:863    .text.MC_GetLastRampFinalSpeedMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:870    .text.MC_GetLastRampFinalSpeedMotor1_F:0000000000000000 MC_GetLastRampFinalSpeedMotor1_F
     /tmp/ccoI51lI.s:891    .text.MC_GetLastRampFinalSpeedMotor1_F:000000000000000c $d
     /tmp/ccoI51lI.s:896    .text.MC_GetControlModeMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:903    .text.MC_GetControlModeMotor1:0000000000000000 MC_GetControlModeMotor1
     /tmp/ccoI51lI.s:924    .text.MC_GetControlModeMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:929    .text.MC_GetImposedDirectionMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:936    .text.MC_GetImposedDirectionMotor1:0000000000000000 MC_GetImposedDirectionMotor1
     /tmp/ccoI51lI.s:957    .text.MC_GetImposedDirectionMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:962    .text.MC_GetSpeedSensorReliabilityMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:969    .text.MC_GetSpeedSensorReliabilityMotor1:0000000000000000 MC_GetSpeedSensorReliabilityMotor1
     /tmp/ccoI51lI.s:990    .text.MC_GetSpeedSensorReliabilityMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:995    .text.MC_GetPhaseCurrentAmplitudeMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1002   .text.MC_GetPhaseCurrentAmplitudeMotor1:0000000000000000 MC_GetPhaseCurrentAmplitudeMotor1
     /tmp/ccoI51lI.s:1023   .text.MC_GetPhaseCurrentAmplitudeMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1028   .text.MC_GetPhaseVoltageAmplitudeMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1035   .text.MC_GetPhaseVoltageAmplitudeMotor1:0000000000000000 MC_GetPhaseVoltageAmplitudeMotor1
     /tmp/ccoI51lI.s:1056   .text.MC_GetPhaseVoltageAmplitudeMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1061   .text.MC_GetIabMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1068   .text.MC_GetIabMotor1:0000000000000000 MC_GetIabMotor1
     /tmp/ccoI51lI.s:1099   .text.MC_GetIabMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1104   .text.MC_GetIabMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:1111   .text.MC_GetIabMotor1_F:0000000000000000 MC_GetIabMotor1_F
     /tmp/ccoI51lI.s:1136   .text.MC_GetIabMotor1_F:0000000000000014 $d
     /tmp/ccoI51lI.s:1141   .text.MC_GetIalphabetaMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1148   .text.MC_GetIalphabetaMotor1:0000000000000000 MC_GetIalphabetaMotor1
     /tmp/ccoI51lI.s:1179   .text.MC_GetIalphabetaMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1184   .text.MC_GetIqdMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1191   .text.MC_GetIqdMotor1:0000000000000000 MC_GetIqdMotor1
     /tmp/ccoI51lI.s:1222   .text.MC_GetIqdMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1227   .text.MC_GetIqdMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:1234   .text.MC_GetIqdMotor1_F:0000000000000000 MC_GetIqdMotor1_F
     /tmp/ccoI51lI.s:1259   .text.MC_GetIqdMotor1_F:0000000000000014 $d
     /tmp/ccoI51lI.s:1264   .text.MC_GetIqdrefMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1271   .text.MC_GetIqdrefMotor1:0000000000000000 MC_GetIqdrefMotor1
     /tmp/ccoI51lI.s:1302   .text.MC_GetIqdrefMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1307   .text.MC_GetIqdrefMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:1314   .text.MC_GetIqdrefMotor1_F:0000000000000000 MC_GetIqdrefMotor1_F
     /tmp/ccoI51lI.s:1339   .text.MC_GetIqdrefMotor1_F:0000000000000014 $d
     /tmp/ccoI51lI.s:1344   .text.MC_GetVqdMotor1:0000000000000000 $t
ARM GAS  /tmp/ccoI51lI.s 			page 48


     /tmp/ccoI51lI.s:1351   .text.MC_GetVqdMotor1:0000000000000000 MC_GetVqdMotor1
     /tmp/ccoI51lI.s:1382   .text.MC_GetVqdMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1387   .text.MC_GetValphabetaMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1394   .text.MC_GetValphabetaMotor1:0000000000000000 MC_GetValphabetaMotor1
     /tmp/ccoI51lI.s:1425   .text.MC_GetValphabetaMotor1:0000000000000024 $d
     /tmp/ccoI51lI.s:1430   .text.MC_GetElAngledppMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1437   .text.MC_GetElAngledppMotor1:0000000000000000 MC_GetElAngledppMotor1
     /tmp/ccoI51lI.s:1458   .text.MC_GetElAngledppMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1463   .text.MC_GetTerefMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1470   .text.MC_GetTerefMotor1:0000000000000000 MC_GetTerefMotor1
     /tmp/ccoI51lI.s:1491   .text.MC_GetTerefMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1496   .text.MC_GetTerefMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:1503   .text.MC_GetTerefMotor1_F:0000000000000000 MC_GetTerefMotor1_F
     /tmp/ccoI51lI.s:1524   .text.MC_GetTerefMotor1_F:000000000000000c $d
     /tmp/ccoI51lI.s:1529   .text.MC_Clear_IqdrefMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1536   .text.MC_Clear_IqdrefMotor1:0000000000000000 MC_Clear_IqdrefMotor1
     /tmp/ccoI51lI.s:1556   .text.MC_Clear_IqdrefMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1561   .text.MC_AcknowledgeFaultMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1568   .text.MC_AcknowledgeFaultMotor1:0000000000000000 MC_AcknowledgeFaultMotor1
     /tmp/ccoI51lI.s:1589   .text.MC_AcknowledgeFaultMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1594   .text.MC_GetOccurredFaultsMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1601   .text.MC_GetOccurredFaultsMotor1:0000000000000000 MC_GetOccurredFaultsMotor1
     /tmp/ccoI51lI.s:1622   .text.MC_GetOccurredFaultsMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1627   .text.MC_GetCurrentFaultsMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1634   .text.MC_GetCurrentFaultsMotor1:0000000000000000 MC_GetCurrentFaultsMotor1
     /tmp/ccoI51lI.s:1655   .text.MC_GetCurrentFaultsMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1660   .text.MC_GetSTMStateMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1667   .text.MC_GetSTMStateMotor1:0000000000000000 MC_GetSTMStateMotor1
     /tmp/ccoI51lI.s:1688   .text.MC_GetSTMStateMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1693   .text.MC_SetPolarizationOffsetsMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1700   .text.MC_SetPolarizationOffsetsMotor1:0000000000000000 MC_SetPolarizationOffsetsMotor1
     /tmp/ccoI51lI.s:1726   .text.MC_SetPolarizationOffsetsMotor1:0000000000000010 $d
     /tmp/ccoI51lI.s:1731   .text.MC_GetPolarizationOffsetsMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1738   .text.MC_GetPolarizationOffsetsMotor1:0000000000000000 MC_GetPolarizationOffsetsMotor1
     /tmp/ccoI51lI.s:1764   .text.MC_GetPolarizationOffsetsMotor1:0000000000000010 $d
     /tmp/ccoI51lI.s:1769   .text.MC_StartPolarizationOffsetsMeasurementMotor1:0000000000000000 $t
     /tmp/ccoI51lI.s:1776   .text.MC_StartPolarizationOffsetsMeasurementMotor1:0000000000000000 MC_StartPolarizationOffsetsMeasurementMotor1
     /tmp/ccoI51lI.s:1797   .text.MC_StartPolarizationOffsetsMeasurementMotor1:000000000000000c $d
     /tmp/ccoI51lI.s:1802   .text.MC_GetAveragePowerMotor1_F:0000000000000000 $t
     /tmp/ccoI51lI.s:1809   .text.MC_GetAveragePowerMotor1_F:0000000000000000 MC_GetAveragePowerMotor1_F
     /tmp/ccoI51lI.s:1830   .text.MC_GetAveragePowerMotor1_F:000000000000000c $d
     /tmp/ccoI51lI.s:1835   .data.startMotorTime:0000000000000000 $d
     /tmp/ccoI51lI.s:1839   .data.startMotorTime:0000000000000000 startMotorTime

UNDEFINED SYMBOLS
getTickMSCounter
MCI_StartMotor
pMCI
MCI_StopMotor
MCI_ExecSpeedRamp
MCI_ExecSpeedSin
MCI_ExecSpeedRamp_F
MCI_ExecTorqueRamp
MCI_ExecTorqueRamp_F
MCI_SetCurrentReferences
MCI_SetCurrentReferences_F
MCI_IsCommandAcknowledged
ARM GAS  /tmp/ccoI51lI.s 			page 49


MCI_GetLastCommand
MCI_StopSpeedRamp
MCI_StopRamp
MCI_RampCompleted
MCI_GetMecSpeedRefUnit
MCI_GetMecSpeedRef_F
MCI_GetAvrgMecSpeedUnit
SPD_GetAvrgMecSpeedUnit
STO_PLL_M1
SPD_GetElAngle
MCI_GetAvrgMecSpeed_F
MCI_GetLastRampFinalSpeed
MCI_GetLastRampFinalSpeed_F
MCI_GetControlMode
MCI_GetImposedMotorDirection
MCI_GetSpdSensorReliability
MCI_GetPhaseCurrentAmplitude
MCI_GetPhaseVoltageAmplitude
MCI_GetIab
MCI_GetIab_F
MCI_GetIalphabeta
MCI_GetIqd
MCI_GetIqd_F
MCI_GetIqdref
MCI_GetIqdref_F
MCI_GetVqd
MCI_GetValphabeta
MCI_GetElAngledpp
MCI_GetTeref
MCI_GetTeref_F
MCI_Clear_Iqdref
MCI_FaultAcknowledged
MCI_GetOccurredFaults
MCI_GetCurrentFaults
MCI_GetSTMState
MCI_SetCalibratedOffsetsMotor
MCI_GetCalibratedOffsetsMotor
MCI_StartOffsetMeasurments
PQD_GetAvrgElMotorPowerW
pMPM
