ARM GAS  /tmp/ccZYtsq1.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_interface.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MCI_Init,"ax",%progbits
  18              		.align	1
  19              		.weak	MCI_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	MCI_Init:
  27              	.LVL0:
  28              	.LFB1437:
  29              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
  29:Src/mc_interface.c **** #include "debug_scope.h"
ARM GAS  /tmp/ccZYtsq1.s 			page 2


  30:Src/mc_interface.c **** 
  31:Src/mc_interface.c **** #define ROUNDING_OFF
  32:Src/mc_interface.c **** 
  33:Src/mc_interface.c **** /** @addtogroup MCSDK
  34:Src/mc_interface.c ****   * @{
  35:Src/mc_interface.c ****   */
  36:Src/mc_interface.c **** 
  37:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  38:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  39:Src/mc_interface.c ****   *
  40:Src/mc_interface.c ****   * @todo Document the MC Interface "module".
  41:Src/mc_interface.c ****   *
  42:Src/mc_interface.c ****   * @{
  43:Src/mc_interface.c ****   */
  44:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  45:Src/mc_interface.c **** 
  46:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  47:Src/mc_interface.c **** extern DebugScope_Handle_t debugScopeM1;
  48:Src/mc_interface.c **** 
  49:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  50:Src/mc_interface.c **** 
  51:Src/mc_interface.c **** /**
  52:Src/mc_interface.c ****   * @brief  Initializes all the object variables, usually it has to be called
  53:Src/mc_interface.c ****   *         once right after object creation. It is also used to assign the
  54:Src/mc_interface.c ****   *         state machine object, the speed and torque controller, and the FOC
  55:Src/mc_interface.c ****   *         drive object to be used by MC Interface.
  56:Src/mc_interface.c ****   * @param  pHandle pointer on the component instance to initialize.
  57:Src/mc_interface.c ****   * @param  pSTM the state machine object used by the MCI.
  58:Src/mc_interface.c ****   * @param  pSTC the speed and torque controller used by the MCI.
  59:Src/mc_interface.c ****   * @param  pFOCVars pointer to FOC vars to be used by MCI.
  60:Src/mc_interface.c ****   * @retval none.
  61:Src/mc_interface.c ****   */
  62:Src/mc_interface.c **** __weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWM
  63:Src/mc_interface.c **** {
  30              		.loc 1 63 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  64:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  65:Src/mc_interface.c ****   if (MC_NULL == pHandle)
  66:Src/mc_interface.c ****   {
  67:Src/mc_interface.c ****     /* Nothing to do */
  68:Src/mc_interface.c ****   }
  69:Src/mc_interface.c ****   else
  70:Src/mc_interface.c ****   {
  71:Src/mc_interface.c **** #endif
  72:Src/mc_interface.c ****     pHandle->pSTC = pSTC;
  35              		.loc 1 72 5 view .LVU1
  36              		.loc 1 72 19 is_stmt 0 view .LVU2
  37 0000 0160     		str	r1, [r0]
  73:Src/mc_interface.c ****     pHandle->pFOCVars = pFOCVars;
  38              		.loc 1 73 5 is_stmt 1 view .LVU3
  39              		.loc 1 73 23 is_stmt 0 view .LVU4
  40 0002 4260     		str	r2, [r0, #4]
  74:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  41              		.loc 1 74 5 is_stmt 1 view .LVU5
ARM GAS  /tmp/ccZYtsq1.s 			page 3


  42              		.loc 1 74 19 is_stmt 0 view .LVU6
  43 0004 8360     		str	r3, [r0, #8]
  75:Src/mc_interface.c **** 
  76:Src/mc_interface.c ****     /* Buffer related initialization */
  77:Src/mc_interface.c ****     pHandle->lastCommand = MCI_NOCOMMANDSYET;
  44              		.loc 1 77 5 is_stmt 1 view .LVU7
  45              		.loc 1 77 26 is_stmt 0 view .LVU8
  46 0006 0023     		movs	r3, #0
  47              	.LVL1:
  48              		.loc 1 77 26 view .LVU9
  49 0008 0373     		strb	r3, [r0, #12]
  78:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  50              		.loc 1 78 5 is_stmt 1 view .LVU10
  51              		.loc 1 78 26 is_stmt 0 view .LVU11
  52 000a C381     		strh	r3, [r0, #14]	@ movhi
  79:Src/mc_interface.c ****     pHandle->hSpeedAmp = 0;
  53              		.loc 1 79 5 is_stmt 1 view .LVU12
  54              		.loc 1 79 24 is_stmt 0 view .LVU13
  55 000c 4382     		strh	r3, [r0, #18]	@ movhi
  80:Src/mc_interface.c ****     pHandle->hSpeedPhase = 0;
  56              		.loc 1 80 5 is_stmt 1 view .LVU14
  57              		.loc 1 80 26 is_stmt 0 view .LVU15
  58 000e 0382     		strh	r3, [r0, #16]	@ movhi
  81:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  59              		.loc 1 81 5 is_stmt 1 view .LVU16
  60              		.loc 1 81 27 is_stmt 0 view .LVU17
  61 0010 8382     		strh	r3, [r0, #20]	@ movhi
  82:Src/mc_interface.c ****     pHandle->hTorqueAmp = 0;
  62              		.loc 1 82 5 is_stmt 1 view .LVU18
  63              		.loc 1 82 25 is_stmt 0 view .LVU19
  64 0012 0383     		strh	r3, [r0, #24]	@ movhi
  83:Src/mc_interface.c ****     pHandle->hTorquePhase = 0;
  65              		.loc 1 83 5 is_stmt 1 view .LVU20
  66              		.loc 1 83 27 is_stmt 0 view .LVU21
  67 0014 C382     		strh	r3, [r0, #22]	@ movhi
  84:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  68              		.loc 1 84 5 is_stmt 1 view .LVU22
  69              		.loc 1 84 26 is_stmt 0 view .LVU23
  70 0016 C383     		strh	r3, [r0, #30]	@ movhi
  85:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  71              		.loc 1 85 5 is_stmt 1 view .LVU24
  72              		.loc 1 85 27 is_stmt 0 view .LVU25
  73 0018 80F82630 		strb	r3, [r0, #38]
  86:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  74              		.loc 1 86 5 is_stmt 1 view .LVU26
  75              		.loc 1 86 28 is_stmt 0 view .LVU27
  76 001c 80F82030 		strb	r3, [r0, #32]
  87:Src/mc_interface.c ****     pHandle->State = IDLE;
  77              		.loc 1 87 5 is_stmt 1 view .LVU28
  78              		.loc 1 87 20 is_stmt 0 view .LVU29
  79 0020 80F82130 		strb	r3, [r0, #33]
  88:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  80              		.loc 1 88 5 is_stmt 1 view .LVU30
  81              		.loc 1 88 28 is_stmt 0 view .LVU31
  82 0024 4384     		strh	r3, [r0, #34]	@ movhi
  89:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  83              		.loc 1 89 5 is_stmt 1 view .LVU32
ARM GAS  /tmp/ccZYtsq1.s 			page 4


  84              		.loc 1 89 25 is_stmt 0 view .LVU33
  85 0026 8384     		strh	r3, [r0, #36]	@ movhi
  90:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  91:Src/mc_interface.c ****   }
  92:Src/mc_interface.c **** #endif
  93:Src/mc_interface.c **** }
  86              		.loc 1 93 1 view .LVU34
  87 0028 7047     		bx	lr
  88              		.cfi_endproc
  89              	.LFE1437:
  91              		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  92              		.align	1
  93              		.weak	MCI_ExecSpeedRamp
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	MCI_ExecSpeedRamp:
 100              	.LVL2:
 101              	.LFB1438:
  94:Src/mc_interface.c **** 
  95:Src/mc_interface.c **** /**
  96:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
  97:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
  98:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
  99:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 100:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 101:Src/mc_interface.c ****   * @param  hFinalSpeed is the value of mechanical rotor speed reference at the
 102:Src/mc_interface.c ****   *         end of the ramp expressed in the unit defined by #SPEED_UNIT.
 103:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 104:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 105:Src/mc_interface.c ****   *         value.
 106:Src/mc_interface.c ****   * @retval none.
 107:Src/mc_interface.c ****   */
 108:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
 109:Src/mc_interface.c **** {
 102              		.loc 1 109 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 110:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 111:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 112:Src/mc_interface.c ****   {
 113:Src/mc_interface.c ****     /* Nothing to do */
 114:Src/mc_interface.c ****   }
 115:Src/mc_interface.c ****   else
 116:Src/mc_interface.c ****   {
 117:Src/mc_interface.c **** #endif
 118:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 107              		.loc 1 118 5 view .LVU36
 108              		.loc 1 118 26 is_stmt 0 view .LVU37
 109 0000 0123     		movs	r3, #1
 110 0002 0373     		strb	r3, [r0, #12]
 119:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
 111              		.loc 1 119 5 is_stmt 1 view .LVU38
 112              		.loc 1 119 26 is_stmt 0 view .LVU39
ARM GAS  /tmp/ccZYtsq1.s 			page 5


 113 0004 C181     		strh	r1, [r0, #14]	@ movhi
 120:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 114              		.loc 1 120 5 is_stmt 1 view .LVU40
 115              		.loc 1 120 26 is_stmt 0 view .LVU41
 116 0006 C283     		strh	r2, [r0, #30]	@ movhi
 121:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 117              		.loc 1 121 5 is_stmt 1 view .LVU42
 118              		.loc 1 121 27 is_stmt 0 view .LVU43
 119 0008 80F82630 		strb	r3, [r0, #38]
 122:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 120              		.loc 1 122 5 is_stmt 1 view .LVU44
 121              		.loc 1 122 36 is_stmt 0 view .LVU45
 122 000c 0323     		movs	r3, #3
 123 000e 80F82730 		strb	r3, [r0, #39]
 123:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 124:Src/mc_interface.c ****   }
 125:Src/mc_interface.c **** #endif
 126:Src/mc_interface.c **** }
 124              		.loc 1 126 1 view .LVU46
 125 0012 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE1438:
 129              		.section	.text.MCI_ExecSpeedSin,"ax",%progbits
 130              		.align	1
 131              		.weak	MCI_ExecSpeedSin
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	MCI_ExecSpeedSin:
 138              	.LVL3:
 139              	.LFB1439:
 127:Src/mc_interface.c **** 
 128:Src/mc_interface.c **** __weak void MCI_ExecSpeedSin( MCI_Handle_t * pHandle,  const int16_t hFinalSpeedMean, const uint16_
 129:Src/mc_interface.c **** {
 140              		.loc 1 129 1 is_stmt 1 view -0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              		.loc 1 129 1 is_stmt 0 view .LVU48
 146 0000 10B4     		push	{r4}
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 4, -4
 130:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 131:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 132:Src/mc_interface.c ****   {
 133:Src/mc_interface.c ****     /* Nothing to do */
 134:Src/mc_interface.c ****   }
 135:Src/mc_interface.c ****   else
 136:Src/mc_interface.c ****   {
 137:Src/mc_interface.c **** #endif
 138:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDSIN;
 149              		.loc 1 138 5 is_stmt 1 view .LVU49
 150              		.loc 1 138 26 is_stmt 0 view .LVU50
 151 0002 0424     		movs	r4, #4
 152 0004 0473     		strb	r4, [r0, #12]
ARM GAS  /tmp/ccZYtsq1.s 			page 6


 139:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeedMean;
 153              		.loc 1 139 5 is_stmt 1 view .LVU51
 154              		.loc 1 139 26 is_stmt 0 view .LVU52
 155 0006 C181     		strh	r1, [r0, #14]	@ movhi
 140:Src/mc_interface.c ****     pHandle->hSpeedAmp = hFinalSpeedAmp;
 156              		.loc 1 140 5 is_stmt 1 view .LVU53
 157              		.loc 1 140 24 is_stmt 0 view .LVU54
 158 0008 4282     		strh	r2, [r0, #18]	@ movhi
 141:Src/mc_interface.c ****     pHandle->hSpeedPhase = hPhase;
 159              		.loc 1 141 5 is_stmt 1 view .LVU55
 160              		.loc 1 141 26 is_stmt 0 view .LVU56
 161 000a 0382     		strh	r3, [r0, #16]	@ movhi
 142:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 162              		.loc 1 142 5 is_stmt 1 view .LVU57
 163              		.loc 1 142 27 is_stmt 0 view .LVU58
 164 000c 0123     		movs	r3, #1
 165              	.LVL4:
 166              		.loc 1 142 27 view .LVU59
 167 000e 80F82630 		strb	r3, [r0, #38]
 143:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 168              		.loc 1 143 5 is_stmt 1 view .LVU60
 169              		.loc 1 143 36 is_stmt 0 view .LVU61
 170 0012 0323     		movs	r3, #3
 171 0014 80F82730 		strb	r3, [r0, #39]
 144:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 145:Src/mc_interface.c ****   }
 146:Src/mc_interface.c **** #endif
 147:Src/mc_interface.c **** }
 172              		.loc 1 147 1 view .LVU62
 173 0018 5DF8044B 		ldr	r4, [sp], #4
 174              		.cfi_restore 4
 175              		.cfi_def_cfa_offset 0
 176 001c 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE1439:
 180              		.section	.text.MCI_ExecTorqueSin,"ax",%progbits
 181              		.align	1
 182              		.weak	MCI_ExecTorqueSin
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	MCI_ExecTorqueSin:
 189              	.LVL5:
 190              	.LFB1440:
 148:Src/mc_interface.c **** 
 149:Src/mc_interface.c **** __weak void MCI_ExecTorqueSin(MCI_Handle_t *pHandle, const int16_t hFinalTorqueMean, const uint16_t
 150:Src/mc_interface.c **** {
 191              		.loc 1 150 1 is_stmt 1 view -0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              		.loc 1 150 1 is_stmt 0 view .LVU64
 197 0000 10B4     		push	{r4}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 4, -4
ARM GAS  /tmp/ccZYtsq1.s 			page 7


 151:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 152:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 153:Src/mc_interface.c ****   {
 154:Src/mc_interface.c ****     /* Nothing to do */
 155:Src/mc_interface.c ****   }
 156:Src/mc_interface.c ****   else
 157:Src/mc_interface.c ****   {
 158:Src/mc_interface.c **** #endif
 159:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUESIN;
 200              		.loc 1 159 5 is_stmt 1 view .LVU65
 201              		.loc 1 159 26 is_stmt 0 view .LVU66
 202 0002 0524     		movs	r4, #5
 203 0004 0473     		strb	r4, [r0, #12]
 160:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorqueMean;
 204              		.loc 1 160 5 is_stmt 1 view .LVU67
 205              		.loc 1 160 27 is_stmt 0 view .LVU68
 206 0006 8182     		strh	r1, [r0, #20]	@ movhi
 161:Src/mc_interface.c ****     pHandle->hTorqueAmp = hFinalTorqueAmp;
 207              		.loc 1 161 5 is_stmt 1 view .LVU69
 208              		.loc 1 161 25 is_stmt 0 view .LVU70
 209 0008 0283     		strh	r2, [r0, #24]	@ movhi
 162:Src/mc_interface.c ****     pHandle->hTorquePhase = hPhase;
 210              		.loc 1 162 5 is_stmt 1 view .LVU71
 211              		.loc 1 162 27 is_stmt 0 view .LVU72
 212 000a C382     		strh	r3, [r0, #22]	@ movhi
 163:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 213              		.loc 1 163 5 is_stmt 1 view .LVU73
 214              		.loc 1 163 27 is_stmt 0 view .LVU74
 215 000c 0123     		movs	r3, #1
 216              	.LVL6:
 217              		.loc 1 163 27 view .LVU75
 218 000e 80F82630 		strb	r3, [r0, #38]
 164:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 219              		.loc 1 164 5 is_stmt 1 view .LVU76
 220              		.loc 1 164 36 is_stmt 0 view .LVU77
 221 0012 0423     		movs	r3, #4
 222 0014 80F82730 		strb	r3, [r0, #39]
 165:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 166:Src/mc_interface.c ****   }
 167:Src/mc_interface.c **** #endif
 168:Src/mc_interface.c **** }
 223              		.loc 1 168 1 view .LVU78
 224 0018 5DF8044B 		ldr	r4, [sp], #4
 225              		.cfi_restore 4
 226              		.cfi_def_cfa_offset 0
 227 001c 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE1440:
 231              		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
 232              		.align	1
 233              		.weak	MCI_ExecSpeedRamp_F
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	MCI_ExecSpeedRamp_F:
 240              	.LVL7:
ARM GAS  /tmp/ccZYtsq1.s 			page 8


 241              	.LFB1441:
 169:Src/mc_interface.c **** 
 170:Src/mc_interface.c **** /**
 171:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
 172:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 173:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 174:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 175:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 176:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
 177:Src/mc_interface.c ****   *         end of the ramp expressed in rpm.
 178:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 179:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 180:Src/mc_interface.c ****   *         value.
 181:Src/mc_interface.c ****   * @retval none.
 182:Src/mc_interface.c ****   */
 183:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F( MCI_Handle_t * pHandle, const float FinalSpeed, uint16_t hDuration
 184:Src/mc_interface.c **** {
 242              		.loc 1 184 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		.loc 1 184 1 is_stmt 0 view .LVU80
 247 0000 08B5     		push	{r3, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 3, -8
 250              		.cfi_offset 14, -4
 251 0002 0A46     		mov	r2, r1
 185:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 186:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 187:Src/mc_interface.c ****   {
 188:Src/mc_interface.c ****     /* Nothing to do */
 189:Src/mc_interface.c ****   }
 190:Src/mc_interface.c ****   else
 191:Src/mc_interface.c ****   {
 192:Src/mc_interface.c **** #endif
 193:Src/mc_interface.c ****     int16_t hFinalSpeed = (int16_t) ((FinalSpeed * SPEED_UNIT) / U_RPM);
 252              		.loc 1 193 5 is_stmt 1 view .LVU81
 253              		.loc 1 193 50 is_stmt 0 view .LVU82
 254 0004 F2EE047A 		vmov.f32	s15, #1.0e+1
 255 0008 20EE270A 		vmul.f32	s0, s0, s15
 256              	.LVL8:
 257              		.loc 1 193 64 view .LVU83
 258 000c 9FED057A 		vldr.32	s14, .L9
 259 0010 C0EE077A 		vdiv.f32	s15, s0, s14
 260              		.loc 1 193 13 view .LVU84
 261 0014 FDEEE77A 		vcvt.s32.f32	s15, s15
 262              	.LVL9:
 194:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 263              		.loc 1 194 5 is_stmt 1 view .LVU85
 264 0018 17EE903A 		vmov	r3, s15	@ int
 265 001c 19B2     		sxth	r1, r3
 266              	.LVL10:
 267              		.loc 1 194 5 is_stmt 0 view .LVU86
 268 001e FFF7FEFF 		bl	MCI_ExecSpeedRamp
 269              	.LVL11:
 195:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 196:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccZYtsq1.s 			page 9


 197:Src/mc_interface.c **** #endif
 198:Src/mc_interface.c **** }
 270              		.loc 1 198 1 view .LVU87
 271 0022 08BD     		pop	{r3, pc}
 272              	.L10:
 273              		.align	2
 274              	.L9:
 275 0024 00007042 		.word	1114636288
 276              		.cfi_endproc
 277              	.LFE1441:
 279              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 280              		.align	1
 281              		.weak	MCI_ExecTorqueRamp
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	MCI_ExecTorqueRamp:
 288              	.LVL12:
 289              	.LFB1442:
 199:Src/mc_interface.c **** 
 200:Src/mc_interface.c **** /**
 201:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
 202:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 203:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 204:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 205:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 206:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 207:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
 208:Src/mc_interface.c ****   *         digit.
 209:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 210:Src/mc_interface.c ****   *         is possible to use the formula:
 211:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 212:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 213:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 214:Src/mc_interface.c ****   *         value.
 215:Src/mc_interface.c ****   * @retval none.
 216:Src/mc_interface.c ****   */
 217:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
 218:Src/mc_interface.c **** {
 290              		.loc 1 218 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 219:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 220:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 221:Src/mc_interface.c ****   {
 222:Src/mc_interface.c ****     /* Nothing to do */
 223:Src/mc_interface.c ****   }
 224:Src/mc_interface.c ****   else
 225:Src/mc_interface.c ****   {
 226:Src/mc_interface.c **** #endif
 227:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 295              		.loc 1 227 5 view .LVU89
 296              		.loc 1 227 26 is_stmt 0 view .LVU90
 297 0000 0223     		movs	r3, #2
ARM GAS  /tmp/ccZYtsq1.s 			page 10


 298 0002 0373     		strb	r3, [r0, #12]
 228:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 299              		.loc 1 228 5 is_stmt 1 view .LVU91
 300              		.loc 1 228 27 is_stmt 0 view .LVU92
 301 0004 8182     		strh	r1, [r0, #20]	@ movhi
 229:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 302              		.loc 1 229 5 is_stmt 1 view .LVU93
 303              		.loc 1 229 26 is_stmt 0 view .LVU94
 304 0006 C283     		strh	r2, [r0, #30]	@ movhi
 230:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 305              		.loc 1 230 5 is_stmt 1 view .LVU95
 306              		.loc 1 230 27 is_stmt 0 view .LVU96
 307 0008 0123     		movs	r3, #1
 308 000a 80F82630 		strb	r3, [r0, #38]
 231:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 309              		.loc 1 231 5 is_stmt 1 view .LVU97
 310              		.loc 1 231 36 is_stmt 0 view .LVU98
 311 000e 0423     		movs	r3, #4
 312 0010 80F82730 		strb	r3, [r0, #39]
 232:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 233:Src/mc_interface.c ****   }
 234:Src/mc_interface.c **** #endif
 235:Src/mc_interface.c **** }
 313              		.loc 1 235 1 view .LVU99
 314 0014 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE1442:
 318              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 319              		.align	1
 320              		.weak	MCI_ExecTorqueRamp_F
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv4-sp-d16
 326              	MCI_ExecTorqueRamp_F:
 327              	.LVL13:
 328              	.LFB1443:
 236:Src/mc_interface.c **** 
 237:Src/mc_interface.c **** /**
 238:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
 239:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 240:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 241:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 242:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 243:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 244:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
 245:Src/mc_interface.c ****   *         Ampere.
 246:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 247:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 248:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 249:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 250:Src/mc_interface.c ****   *         value.
 251:Src/mc_interface.c ****   * @retval none.
 252:Src/mc_interface.c ****   */
 253:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F( MCI_Handle_t * pHandle,  float FinalTorque, uint16_t hDurationms 
 254:Src/mc_interface.c **** {
 329              		.loc 1 254 1 is_stmt 1 view -0
ARM GAS  /tmp/ccZYtsq1.s 			page 11


 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		.loc 1 254 1 is_stmt 0 view .LVU101
 334 0000 08B5     		push	{r3, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 3, -8
 337              		.cfi_offset 14, -4
 338 0002 0A46     		mov	r2, r1
 255:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 256:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 257:Src/mc_interface.c ****   {
 258:Src/mc_interface.c ****     /* Nothing to do */
 259:Src/mc_interface.c ****   }
 260:Src/mc_interface.c ****   else
 261:Src/mc_interface.c ****   {
 262:Src/mc_interface.c **** #endif
 263:Src/mc_interface.c ****     int16_t hFinalTorque = (int16_t) (FinalTorque * CURRENT_CONV_FACTOR);
 339              		.loc 1 263 5 is_stmt 1 view .LVU102
 340              		.loc 1 263 51 is_stmt 0 view .LVU103
 341 0004 DFED057A 		vldr.32	s15, .L14
 342 0008 20EE270A 		vmul.f32	s0, s0, s15
 343              	.LVL14:
 344              		.loc 1 263 13 view .LVU104
 345 000c BDEEC00A 		vcvt.s32.f32	s0, s0
 346              	.LVL15:
 264:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 347              		.loc 1 264 5 is_stmt 1 view .LVU105
 348 0010 10EE103A 		vmov	r3, s0	@ int
 349 0014 19B2     		sxth	r1, r3
 350              	.LVL16:
 351              		.loc 1 264 5 is_stmt 0 view .LVU106
 352 0016 FFF7FEFF 		bl	MCI_ExecTorqueRamp
 353              	.LVL17:
 265:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 266:Src/mc_interface.c ****   }
 267:Src/mc_interface.c **** #endif
 268:Src/mc_interface.c **** }
 354              		.loc 1 268 1 view .LVU107
 355 001a 08BD     		pop	{r3, pc}
 356              	.L15:
 357              		.align	2
 358              	.L14:
 359 001c 00000844 		.word	1141374976
 360              		.cfi_endproc
 361              	.LFE1443:
 363              		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 364              		.align	1
 365              		.weak	MCI_SetCurrentReferences
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	MCI_SetCurrentReferences:
 372              	.LVL18:
 373              	.LFB1444:
 269:Src/mc_interface.c **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 12


 270:Src/mc_interface.c **** /**
 271:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 272:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 273:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 274:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 275:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 276:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 277:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 278:Src/mc_interface.c ****   *         format.
 279:Src/mc_interface.c ****   * @retval none.
 280:Src/mc_interface.c ****   */
 281:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
 282:Src/mc_interface.c **** {
 374              		.loc 1 282 1 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379              		.loc 1 282 1 is_stmt 0 view .LVU109
 380 0000 82B0     		sub	sp, sp, #8
 381              		.cfi_def_cfa_offset 8
 283:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 284:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 285:Src/mc_interface.c ****   {
 286:Src/mc_interface.c ****     /* Nothing to do */
 287:Src/mc_interface.c ****   }
 288:Src/mc_interface.c ****   else
 289:Src/mc_interface.c ****   {
 290:Src/mc_interface.c **** #endif
 291:Src/mc_interface.c **** 
 292:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 382              		.loc 1 292 5 is_stmt 1 view .LVU110
 383              		.loc 1 292 26 is_stmt 0 view .LVU111
 384 0002 0322     		movs	r2, #3
 385 0004 0273     		strb	r2, [r0, #12]
 293:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 386              		.loc 1 293 5 is_stmt 1 view .LVU112
 387              		.loc 1 293 23 is_stmt 0 view .LVU113
 388 0006 4183     		strh	r1, [r0, #26]	@ movhi
 294:Src/mc_interface.c ****     pHandle->Iqdref.d = Iqdref.d;
 389              		.loc 1 294 5 is_stmt 1 view .LVU114
 390              		.loc 1 294 31 is_stmt 0 view .LVU115
 391 0008 0914     		asrs	r1, r1, #16
 392              		.loc 1 294 23 view .LVU116
 393 000a 8183     		strh	r1, [r0, #28]	@ movhi
 295:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 394              		.loc 1 295 5 is_stmt 1 view .LVU117
 395              		.loc 1 295 27 is_stmt 0 view .LVU118
 396 000c 0123     		movs	r3, #1
 397 000e 80F82630 		strb	r3, [r0, #38]
 296:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 398              		.loc 1 296 5 is_stmt 1 view .LVU119
 399              		.loc 1 296 36 is_stmt 0 view .LVU120
 400 0012 0423     		movs	r3, #4
 401 0014 80F82730 		strb	r3, [r0, #39]
 297:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 298:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccZYtsq1.s 			page 13


 299:Src/mc_interface.c **** #endif
 300:Src/mc_interface.c **** }
 402              		.loc 1 300 1 view .LVU121
 403 0018 02B0     		add	sp, sp, #8
 404              		.cfi_def_cfa_offset 0
 405              		@ sp needed
 406 001a 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE1444:
 410              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 411              		.align	1
 412              		.weak	MCI_SetCurrentReferences_F
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	MCI_SetCurrentReferences_F:
 419              	.LVL19:
 420              	.LFB1445:
 301:Src/mc_interface.c **** 
 302:Src/mc_interface.c **** /**
 303:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 304:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 305:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 306:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 307:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 308:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 309:Src/mc_interface.c ****   * @param  Iqdref current (A) references on qd reference frame in qd_f_t format.
 310:Src/mc_interface.c ****   *
 311:Src/mc_interface.c ****   * @retval none.
 312:Src/mc_interface.c ****   */
 313:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F( MCI_Handle_t * pHandle, qd_f_t IqdRef )
 314:Src/mc_interface.c **** {
 421              		.loc 1 314 1 is_stmt 1 view -0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 16
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		.loc 1 314 1 is_stmt 0 view .LVU123
 426 0000 00B5     		push	{lr}
 427              		.cfi_def_cfa_offset 4
 428              		.cfi_offset 14, -4
 429 0002 85B0     		sub	sp, sp, #20
 430              		.cfi_def_cfa_offset 24
 315:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 316:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 317:Src/mc_interface.c ****   {
 318:Src/mc_interface.c ****     /* Nothing to do */
 319:Src/mc_interface.c ****   }
 320:Src/mc_interface.c ****   else
 321:Src/mc_interface.c ****   {
 322:Src/mc_interface.c **** #endif
 323:Src/mc_interface.c ****     qd_t Iqdref;
 431              		.loc 1 323 5 is_stmt 1 view .LVU124
 324:Src/mc_interface.c ****     Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 432              		.loc 1 324 5 view .LVU125
 433              		.loc 1 324 36 is_stmt 0 view .LVU126
 434 0004 DFED0B7A 		vldr.32	s15, .L20
ARM GAS  /tmp/ccZYtsq1.s 			page 14


 435 0008 60EEA70A 		vmul.f32	s1, s1, s15
 436              		.loc 1 324 16 view .LVU127
 437 000c FDEEE00A 		vcvt.s32.f32	s1, s1
 438              		.loc 1 324 14 view .LVU128
 439 0010 10EE903A 		vmov	r3, s1	@ int
 440 0014 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 325:Src/mc_interface.c ****     Iqdref.q = (int16_t) (IqdRef.q * CURRENT_CONV_FACTOR);
 441              		.loc 1 325 5 is_stmt 1 view .LVU129
 442              		.loc 1 325 36 is_stmt 0 view .LVU130
 443 0018 20EE270A 		vmul.f32	s0, s0, s15
 444              		.loc 1 325 16 view .LVU131
 445 001c BDEEC00A 		vcvt.s32.f32	s0, s0
 446              		.loc 1 325 14 view .LVU132
 447 0020 10EE103A 		vmov	r3, s0	@ int
 448 0024 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 326:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, Iqdref);
 449              		.loc 1 326 5 is_stmt 1 view .LVU133
 450 0028 0399     		ldr	r1, [sp, #12]
 451 002a FFF7FEFF 		bl	MCI_SetCurrentReferences
 452              	.LVL20:
 327:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 328:Src/mc_interface.c ****   }
 329:Src/mc_interface.c **** #endif
 330:Src/mc_interface.c **** }
 453              		.loc 1 330 1 is_stmt 0 view .LVU134
 454 002e 05B0     		add	sp, sp, #20
 455              		.cfi_def_cfa_offset 4
 456              		@ sp needed
 457 0030 5DF804FB 		ldr	pc, [sp], #4
 458              	.L21:
 459              		.align	2
 460              	.L20:
 461 0034 00000844 		.word	1141374976
 462              		.cfi_endproc
 463              	.LFE1445:
 465              		.section	.text.MCI_SetSpeedMode,"ax",%progbits
 466              		.align	1
 467              		.weak	MCI_SetSpeedMode
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	MCI_SetSpeedMode:
 474              	.LVL21:
 475              	.LFB1446:
 331:Src/mc_interface.c **** 
 332:Src/mc_interface.c **** /**
 333:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 334:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 335:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 336:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 337:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 338:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 339:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 340:Src/mc_interface.c ****   *         format.
 341:Src/mc_interface.c ****   * @retval none.
 342:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccZYtsq1.s 			page 15


 343:Src/mc_interface.c **** __weak void MCI_SetSpeedMode( MCI_Handle_t * pHandle )
 344:Src/mc_interface.c **** {
 476              		.loc 1 344 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		.loc 1 344 1 is_stmt 0 view .LVU136
 481 0000 10B5     		push	{r4, lr}
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 4, -8
 484              		.cfi_offset 14, -4
 485 0002 0446     		mov	r4, r0
 345:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = INTERNAL;
 486              		.loc 1 345 3 is_stmt 1 view .LVU137
 487              		.loc 1 345 10 is_stmt 0 view .LVU138
 488 0004 4368     		ldr	r3, [r0, #4]
 489              		.loc 1 345 34 view .LVU139
 490 0006 0022     		movs	r2, #0
 491 0008 83F82420 		strb	r2, [r3, #36]
 346:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_SPEED_MODE );
 492              		.loc 1 346 3 is_stmt 1 view .LVU140
 493 000c 0321     		movs	r1, #3
 494 000e 0068     		ldr	r0, [r0]
 495              	.LVL22:
 496              		.loc 1 346 3 is_stmt 0 view .LVU141
 497 0010 FFF7FEFF 		bl	STC_SetControlMode
 498              	.LVL23:
 347:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 499              		.loc 1 347 3 is_stmt 1 view .LVU142
 500              		.loc 1 347 34 is_stmt 0 view .LVU143
 501 0014 0323     		movs	r3, #3
 502 0016 84F82730 		strb	r3, [r4, #39]
 348:Src/mc_interface.c **** }
 503              		.loc 1 348 1 view .LVU144
 504 001a 10BD     		pop	{r4, pc}
 505              		.loc 1 348 1 view .LVU145
 506              		.cfi_endproc
 507              	.LFE1446:
 509              		.section	.text.MCI_SetOpenLoopCurrent,"ax",%progbits
 510              		.align	1
 511              		.weak	MCI_SetOpenLoopCurrent
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu fpv4-sp-d16
 517              	MCI_SetOpenLoopCurrent:
 518              	.LVL24:
 519              	.LFB1447:
 349:Src/mc_interface.c **** 
 350:Src/mc_interface.c **** /**
 351:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 352:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 353:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 354:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 355:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 356:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 357:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
ARM GAS  /tmp/ccZYtsq1.s 			page 16


 358:Src/mc_interface.c ****   *         format.
 359:Src/mc_interface.c ****   * @retval none.
 360:Src/mc_interface.c ****   */
 361:Src/mc_interface.c **** __weak void MCI_SetOpenLoopCurrent( MCI_Handle_t * pHandle )
 362:Src/mc_interface.c **** {
 520              		.loc 1 362 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		.loc 1 362 1 is_stmt 0 view .LVU147
 525 0000 10B5     		push	{r4, lr}
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 4, -8
 528              		.cfi_offset 14, -4
 529 0002 0446     		mov	r4, r0
 363:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 530              		.loc 1 363 3 is_stmt 1 view .LVU148
 531              		.loc 1 363 10 is_stmt 0 view .LVU149
 532 0004 4368     		ldr	r3, [r0, #4]
 533              		.loc 1 363 34 view .LVU150
 534 0006 0122     		movs	r2, #1
 535 0008 83F82420 		strb	r2, [r3, #36]
 364:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE );
 536              		.loc 1 364 3 is_stmt 1 view .LVU151
 537 000c 0221     		movs	r1, #2
 538 000e 0068     		ldr	r0, [r0]
 539              	.LVL25:
 540              		.loc 1 364 3 is_stmt 0 view .LVU152
 541 0010 FFF7FEFF 		bl	STC_SetControlMode
 542              	.LVL26:
 365:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 543              		.loc 1 365 3 is_stmt 1 view .LVU153
 544              		.loc 1 365 34 is_stmt 0 view .LVU154
 545 0014 0223     		movs	r3, #2
 546 0016 84F82730 		strb	r3, [r4, #39]
 366:Src/mc_interface.c **** }
 547              		.loc 1 366 1 view .LVU155
 548 001a 10BD     		pop	{r4, pc}
 549              		.loc 1 366 1 view .LVU156
 550              		.cfi_endproc
 551              	.LFE1447:
 553              		.section	.text.MCI_SetOpenLoopVoltage,"ax",%progbits
 554              		.align	1
 555              		.weak	MCI_SetOpenLoopVoltage
 556              		.syntax unified
 557              		.thumb
 558              		.thumb_func
 559              		.fpu fpv4-sp-d16
 561              	MCI_SetOpenLoopVoltage:
 562              	.LVL27:
 563              	.LFB1448:
 367:Src/mc_interface.c **** 
 368:Src/mc_interface.c **** /**
 369:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 370:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 371:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 372:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
ARM GAS  /tmp/ccZYtsq1.s 			page 17


 373:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 374:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 375:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 376:Src/mc_interface.c ****   *         format.
 377:Src/mc_interface.c ****   * @retval none.
 378:Src/mc_interface.c ****   */
 379:Src/mc_interface.c **** __weak void MCI_SetOpenLoopVoltage( MCI_Handle_t * pHandle )
 380:Src/mc_interface.c **** {
 564              		.loc 1 380 1 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		.loc 1 380 1 is_stmt 0 view .LVU158
 569 0000 38B5     		push	{r3, r4, r5, lr}
 570              		.cfi_def_cfa_offset 16
 571              		.cfi_offset 3, -16
 572              		.cfi_offset 4, -12
 573              		.cfi_offset 5, -8
 574              		.cfi_offset 14, -4
 575 0002 0446     		mov	r4, r0
 381:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 576              		.loc 1 381 3 is_stmt 1 view .LVU159
 577              		.loc 1 381 10 is_stmt 0 view .LVU160
 578 0004 4368     		ldr	r3, [r0, #4]
 579              		.loc 1 381 34 view .LVU161
 580 0006 0125     		movs	r5, #1
 581 0008 83F82450 		strb	r5, [r3, #36]
 382:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 582              		.loc 1 382 3 is_stmt 1 view .LVU162
 583 000c 2946     		mov	r1, r5
 584 000e 0068     		ldr	r0, [r0]
 585              	.LVL28:
 586              		.loc 1 382 3 is_stmt 0 view .LVU163
 587 0010 FFF7FEFF 		bl	STC_SetControlMode
 588              	.LVL29:
 383:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 589              		.loc 1 383 3 is_stmt 1 view .LVU164
 590              		.loc 1 383 34 is_stmt 0 view .LVU165
 591 0014 84F82750 		strb	r5, [r4, #39]
 384:Src/mc_interface.c **** }
 592              		.loc 1 384 1 view .LVU166
 593 0018 38BD     		pop	{r3, r4, r5, pc}
 594              		.loc 1 384 1 view .LVU167
 595              		.cfi_endproc
 596              	.LFE1448:
 598              		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 599              		.align	1
 600              		.weak	MCI_GetCalibratedOffsetsMotor
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu fpv4-sp-d16
 606              	MCI_GetCalibratedOffsetsMotor:
 607              	.LVL30:
 608              	.LFB1452:
 385:Src/mc_interface.c **** 
 386:Src/mc_interface.c **** /**
ARM GAS  /tmp/ccZYtsq1.s 			page 18


 387:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure.
 388:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 389:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 390:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 391:Src/mc_interface.c ****   *         Before calling MCI_StartMotor it is mandatory to execute one of
 392:Src/mc_interface.c ****   *         these commands:\n
 393:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 394:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 395:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 396:Src/mc_interface.c ****   *         Otherwise the behavior in run state will be unpredictable.\n
 397:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartMotor command is used just to begin the
 398:Src/mc_interface.c ****   *         start-up procedure moving the state machine from IDLE state to
 399:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartMotor is not blocking the execution
 400:Src/mc_interface.c ****   *         of project until the motor is really running; to do this, the user
 401:Src/mc_interface.c ****   *         have to check the state machine and verify that the RUN state (or
 402:Src/mc_interface.c ****   *         any other state) has been reached.
 403:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 404:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 405:Src/mc_interface.c ****   *         otherwise it return false.
 406:Src/mc_interface.c ****   */
 407:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 408:Src/mc_interface.c **** {
 409:Src/mc_interface.c ****   bool RetVal;
 410:Src/mc_interface.c **** 
 411:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 412:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 413:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 414:Src/mc_interface.c ****   {
 415:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 416:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 417:Src/mc_interface.c ****     RetVal = true;
 418:Src/mc_interface.c ****   }
 419:Src/mc_interface.c ****   else
 420:Src/mc_interface.c ****   {
 421:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 422:Src/mc_interface.c ****     RetVal = false;
 423:Src/mc_interface.c ****   }
 424:Src/mc_interface.c **** 
 425:Src/mc_interface.c ****   return (RetVal);
 426:Src/mc_interface.c **** }
 427:Src/mc_interface.c **** 
 428:Src/mc_interface.c **** /**
 429:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure with an
 430:Src/mc_interface.c ****   *          offset calibration even if it has been already done previously.
 431:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 432:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 433:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 434:Src/mc_interface.c ****   *         Before calling MCI_StartWithMeasurementOffset it is mandatory to execute
 435:Src/mc_interface.c ****   *         one of these commands:\n
 436:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 437:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 438:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 439:Src/mc_interface.c ****   *         Otherwise the behaviour in run state will be unpredictable.\n
 440:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartWithMeasurementOffset command is used just to
 441:Src/mc_interface.c ****   *         begin the start-up procedure moving the state machine from IDLE state to
 442:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartWithMeasurementOffset is not blocking
 443:Src/mc_interface.c ****   *         the execution of project until the motor is really running; to do this,
ARM GAS  /tmp/ccZYtsq1.s 			page 19


 444:Src/mc_interface.c ****   *         the user have to check the state machine and verify that the RUN state (or
 445:Src/mc_interface.c ****   *         any other state) has been reached.
 446:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 447:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 448:Src/mc_interface.c ****   *         otherwise it return false.
 449:Src/mc_interface.c ****   */
 450:Src/mc_interface.c **** __weak bool MCI_StartWithMeasurementOffset(MCI_Handle_t* pHandle)
 451:Src/mc_interface.c **** {
 452:Src/mc_interface.c ****   bool RetVal;
 453:Src/mc_interface.c **** 
 454:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 455:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 456:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 457:Src/mc_interface.c ****   {
 458:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 459:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 460:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 461:Src/mc_interface.c ****     RetVal = true;
 462:Src/mc_interface.c ****   }
 463:Src/mc_interface.c ****   else
 464:Src/mc_interface.c ****   {
 465:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 466:Src/mc_interface.c ****     RetVal = false;
 467:Src/mc_interface.c ****   }
 468:Src/mc_interface.c **** 
 469:Src/mc_interface.c ****   return (RetVal);
 470:Src/mc_interface.c **** }
 471:Src/mc_interface.c **** 
 472:Src/mc_interface.c **** /**
 473:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 474:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 475:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 476:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 477:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 478:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 479:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 480:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 481:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 482:Src/mc_interface.c ****   *         any other state) has been reached.
 483:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 484:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 485:Src/mc_interface.c ****   *         otherwise it return false.
 486:Src/mc_interface.c ****   */
 487:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 488:Src/mc_interface.c **** {
 489:Src/mc_interface.c ****   bool RetVal;
 490:Src/mc_interface.c **** 
 491:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 492:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 493:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 494:Src/mc_interface.c ****   {
 495:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 496:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 497:Src/mc_interface.c ****     RetVal = true;
 498:Src/mc_interface.c ****   }
 499:Src/mc_interface.c ****   else
 500:Src/mc_interface.c ****   {
ARM GAS  /tmp/ccZYtsq1.s 			page 20


 501:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 502:Src/mc_interface.c ****     RetVal = false;
 503:Src/mc_interface.c ****   }
 504:Src/mc_interface.c **** 
 505:Src/mc_interface.c ****   return (RetVal);
 506:Src/mc_interface.c **** }
 507:Src/mc_interface.c **** 
 508:Src/mc_interface.c **** /**
 509:Src/mc_interface.c ****   * @brief  This is a user command used to get the phase offset values.
 510:Src/mc_interface.c ****   *         User must take  care of this possibility by checking the return value.\n
 511:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_GetCalibratedOffsetsMotor command is used to get the phase
 512:Src/mc_interface.c ****   *          offset values .
 513:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 514:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that conatains phase A, and C values.
 515:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 516:Src/mc_interface.c ****   *         otherwise it return false.
 517:Src/mc_interface.c ****   */
 518:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizati
 519:Src/mc_interface.c **** {
 609              		.loc 1 519 1 is_stmt 1 view -0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		.loc 1 519 1 is_stmt 0 view .LVU169
 614 0000 10B5     		push	{r4, lr}
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 4, -8
 617              		.cfi_offset 14, -4
 520:Src/mc_interface.c ****   bool RetVal;
 618              		.loc 1 520 3 is_stmt 1 view .LVU170
 521:Src/mc_interface.c **** 
 522:Src/mc_interface.c ****   if ( pHandle->pPWM->offsetCalibStatus == true )
 619              		.loc 1 522 3 view .LVU171
 620              		.loc 1 522 15 is_stmt 0 view .LVU172
 621 0002 8068     		ldr	r0, [r0, #8]
 622              	.LVL31:
 623              		.loc 1 522 21 view .LVU173
 624 0004 90F86E40 		ldrb	r4, [r0, #110]	@ zero_extendqisi2
 625              		.loc 1 522 6 view .LVU174
 626 0008 0CB9     		cbnz	r4, .L31
 627              	.LVL32:
 628              	.L29:
 523:Src/mc_interface.c ****   {
 524:Src/mc_interface.c ****     PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 525:Src/mc_interface.c ****     RetVal = true;
 526:Src/mc_interface.c ****   }
 527:Src/mc_interface.c ****   else
 528:Src/mc_interface.c ****   {
 529:Src/mc_interface.c ****     RetVal = false;
 530:Src/mc_interface.c ****   }
 531:Src/mc_interface.c **** 
 532:Src/mc_interface.c ****   return(RetVal);
 629              		.loc 1 532 3 is_stmt 1 view .LVU175
 533:Src/mc_interface.c **** }
 630              		.loc 1 533 1 is_stmt 0 view .LVU176
 631 000a 2046     		mov	r0, r4
 632 000c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccZYtsq1.s 			page 21


 633              	.LVL33:
 634              	.L31:
 524:Src/mc_interface.c ****     RetVal = true;
 635              		.loc 1 524 5 is_stmt 1 view .LVU177
 636 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 637              	.LVL34:
 525:Src/mc_interface.c ****   }
 638              		.loc 1 525 5 view .LVU178
 525:Src/mc_interface.c ****   }
 639              		.loc 1 525 5 is_stmt 0 view .LVU179
 640 0012 FAE7     		b	.L29
 641              		.cfi_endproc
 642              	.LFE1452:
 644              		.section	.text.MCI_FaultProcessing,"ax",%progbits
 645              		.align	1
 646              		.weak	MCI_FaultProcessing
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	MCI_FaultProcessing:
 653              	.LVL35:
 654              	.LFB1456:
 534:Src/mc_interface.c **** 
 535:Src/mc_interface.c **** /**
 536:Src/mc_interface.c ****   * @brief  This is a user command used to set the phase offset values.
 537:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 538:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 539:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 540:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 541:Src/mc_interface.c ****   *          offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 542:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 543:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 544:Src/mc_interface.c ****   *         any other state) has been reached.
 545:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 546:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that contains phase A, and C values.
 547:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 548:Src/mc_interface.c ****   *         otherwise it return false.
 549:Src/mc_interface.c ****   */
 550:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor( MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizat
 551:Src/mc_interface.c **** {
 552:Src/mc_interface.c ****   bool RetVal;
 553:Src/mc_interface.c **** 
 554:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 555:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 556:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 557:Src/mc_interface.c ****   {
 558:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 559:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 560:Src/mc_interface.c ****       RetVal = true;
 561:Src/mc_interface.c ****   }
 562:Src/mc_interface.c **** 
 563:Src/mc_interface.c ****     return(RetVal);
 564:Src/mc_interface.c **** }
 565:Src/mc_interface.c **** 
 566:Src/mc_interface.c **** /**
 567:Src/mc_interface.c ****   * @brief  This is a user command used to begin the stop motor procedure.
ARM GAS  /tmp/ccZYtsq1.s 			page 22


 568:Src/mc_interface.c ****   *         If the state machine is in RUN or START states the command is
 569:Src/mc_interface.c ****   *         executed instantaneously otherwise the command is discarded. User
 570:Src/mc_interface.c ****   *         must take care of this possibility by checking the return value.\n
 571:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StopMotor command is used just to begin the
 572:Src/mc_interface.c ****   *         stop motor procedure moving the state machine to ANY_STOP.
 573:Src/mc_interface.c ****   *         The command MCI_StopMotor is not blocking the execution of project
 574:Src/mc_interface.c ****   *         until the motor is really stopped; to do this, the user have to
 575:Src/mc_interface.c ****   *         check the state machine and verify that the IDLE state has been
 576:Src/mc_interface.c ****   *         reached again.
 577:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 578:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 579:Src/mc_interface.c ****   *         otherwise it return false.
 580:Src/mc_interface.c ****   */
 581:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t * pHandle)
 582:Src/mc_interface.c **** {
 583:Src/mc_interface.c ****   bool RetVal;
 584:Src/mc_interface.c ****   bool status;
 585:Src/mc_interface.c ****   MCI_State_t State;
 586:Src/mc_interface.c **** 
 587:Src/mc_interface.c ****   State = MCI_GetSTMState(pHandle);
 588:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 589:Src/mc_interface.c ****   {
 590:Src/mc_interface.c ****     status = false;
 591:Src/mc_interface.c ****   }
 592:Src/mc_interface.c ****   else
 593:Src/mc_interface.c ****   {
 594:Src/mc_interface.c ****     status = true;
 595:Src/mc_interface.c ****   }
 596:Src/mc_interface.c **** 
 597:Src/mc_interface.c ****   if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 598:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 599:Src/mc_interface.c ****        status == true )
 600:Src/mc_interface.c ****   {
 601:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_STOP;
 602:Src/mc_interface.c ****     RetVal = true;
 603:Src/mc_interface.c ****   }
 604:Src/mc_interface.c ****   else
 605:Src/mc_interface.c ****   {
 606:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 607:Src/mc_interface.c ****     RetVal = false;
 608:Src/mc_interface.c ****   }
 609:Src/mc_interface.c **** 
 610:Src/mc_interface.c ****   return (RetVal);
 611:Src/mc_interface.c **** }
 612:Src/mc_interface.c **** 
 613:Src/mc_interface.c **** /**
 614:Src/mc_interface.c ****   * @brief  This is a user command used to indicate that the user has seen the
 615:Src/mc_interface.c ****   *         error condition. If is possible, the command is executed
 616:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 617:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 618:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 619:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 620:Src/mc_interface.c ****   *         otherwise it return false.
 621:Src/mc_interface.c ****   */
 622:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 623:Src/mc_interface.c **** {
 624:Src/mc_interface.c ****   bool RetVal;
ARM GAS  /tmp/ccZYtsq1.s 			page 23


 625:Src/mc_interface.c **** 
 626:Src/mc_interface.c ****   if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 627:Src/mc_interface.c ****   {
 628:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
 629:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 630:Src/mc_interface.c ****     RetVal = true;
 631:Src/mc_interface.c ****   }
 632:Src/mc_interface.c ****   else
 633:Src/mc_interface.c ****   {
 634:Src/mc_interface.c ****     /* reject the command as the conditions are not met */
 635:Src/mc_interface.c ****     RetVal = false;
 636:Src/mc_interface.c ****   }
 637:Src/mc_interface.c ****   return (RetVal);
 638:Src/mc_interface.c **** }
 639:Src/mc_interface.c **** 
 640:Src/mc_interface.c **** /**
 641:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 642:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 643:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 644:Src/mc_interface.c ****  * @param pHanlde pointer of type  STM_Handle_t
 645:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 646:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 647:Src/mc_interface.c ****  * @retval State_t New state machine state after fault processing
 648:Src/mc_interface.c ****  */
 649:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 650:Src/mc_interface.c **** {
 655              		.loc 1 650 1 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 651:Src/mc_interface.c ****   /* Set current errors */
 652:Src/mc_interface.c ****   pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 660              		.loc 1 652 3 view .LVU181
 661              		.loc 1 652 36 is_stmt 0 view .LVU182
 662 0000 438C     		ldrh	r3, [r0, #34]
 663              		.loc 1 652 67 view .LVU183
 664 0002 0B43     		orrs	r3, r3, r1
 665 0004 23EA0203 		bic	r3, r3, r2
 666              		.loc 1 652 26 view .LVU184
 667 0008 4384     		strh	r3, [r0, #34]	@ movhi
 653:Src/mc_interface.c ****   pHandle->PastFaults |= hSetErrors;
 668              		.loc 1 653 3 is_stmt 1 view .LVU185
 669              		.loc 1 653 23 is_stmt 0 view .LVU186
 670 000a 838C     		ldrh	r3, [r0, #36]
 671 000c 1943     		orrs	r1, r1, r3
 672              	.LVL36:
 673              		.loc 1 653 23 view .LVU187
 674 000e 8184     		strh	r1, [r0, #36]	@ movhi
 654:Src/mc_interface.c **** 
 655:Src/mc_interface.c ****   return;
 675              		.loc 1 655 3 is_stmt 1 view .LVU188
 656:Src/mc_interface.c **** }
 676              		.loc 1 656 1 is_stmt 0 view .LVU189
 677 0010 7047     		bx	lr
 678              		.cfi_endproc
 679              	.LFE1456:
ARM GAS  /tmp/ccZYtsq1.s 			page 24


 681              		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 682              		.align	1
 683              		.weak	MCI_ExecBufferedCommands
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu fpv4-sp-d16
 689              	MCI_ExecBufferedCommands:
 690              	.LVL37:
 691              	.LFB1457:
 657:Src/mc_interface.c **** 
 658:Src/mc_interface.c **** /**
 659:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 660:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 661:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 662:Src/mc_interface.c ****   *         occurs.
 663:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 664:Src/mc_interface.c ****   * @retval none.
 665:Src/mc_interface.c ****   */
 666:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 667:Src/mc_interface.c **** {
 692              		.loc 1 667 1 is_stmt 1 view -0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 668:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 669:Src/mc_interface.c ****   if (NULL == pHandle)
 670:Src/mc_interface.c ****   {
 671:Src/mc_interface.c ****     /* Nothing to do */
 672:Src/mc_interface.c ****   }
 673:Src/mc_interface.c ****   else
 674:Src/mc_interface.c ****   {
 675:Src/mc_interface.c **** #endif
 676:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 696              		.loc 1 676 5 view .LVU191
 697              		.loc 1 676 17 is_stmt 0 view .LVU192
 698 0000 90F82630 		ldrb	r3, [r0, #38]	@ zero_extendqisi2
 699              		.loc 1 676 8 view .LVU193
 700 0004 012B     		cmp	r3, #1
 701 0006 00D0     		beq	.L48
 702 0008 7047     		bx	lr
 703              	.L48:
 667:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 704              		.loc 1 667 1 view .LVU194
 705 000a 10B5     		push	{r4, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 4, -8
 708              		.cfi_offset 14, -4
 709 000c 0446     		mov	r4, r0
 710              	.LBB28:
 677:Src/mc_interface.c ****     {
 678:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 711              		.loc 1 678 7 is_stmt 1 view .LVU195
 712              	.LVL38:
 679:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 713              		.loc 1 679 7 view .LVU196
 714              		.loc 1 679 22 is_stmt 0 view .LVU197
ARM GAS  /tmp/ccZYtsq1.s 			page 25


 715 000e 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 716 0010 013B     		subs	r3, r3, #1
 717 0012 042B     		cmp	r3, #4
 718 0014 5AD8     		bhi	.L35
 719 0016 DFE803F0 		tbb	[pc, r3]
 720              	.L37:
 721 001a 03       		.byte	(.L41-.L37)/2
 722 001b 2C       		.byte	(.L40-.L37)/2
 723 001c 50       		.byte	(.L39-.L37)/2
 724 001d 17       		.byte	(.L38-.L37)/2
 725 001e 3B       		.byte	(.L36-.L37)/2
 726 001f 00       		.p2align 1
 727              	.L41:
 680:Src/mc_interface.c ****       {
 681:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 682:Src/mc_interface.c ****         {
 683:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 728              		.loc 1 683 11 is_stmt 1 view .LVU198
 729              		.loc 1 683 18 is_stmt 0 view .LVU199
 730 0020 4368     		ldr	r3, [r0, #4]
 731              		.loc 1 683 42 view .LVU200
 732 0022 0022     		movs	r2, #0
 733 0024 83F82420 		strb	r2, [r3, #36]
 684:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 734              		.loc 1 684 11 is_stmt 1 view .LVU201
 735 0028 0321     		movs	r1, #3
 736 002a 0068     		ldr	r0, [r0]
 737              	.LVL39:
 738              		.loc 1 684 11 is_stmt 0 view .LVU202
 739 002c FFF7FEFF 		bl	STC_SetControlMode
 740              	.LVL40:
 685:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 741              		.loc 1 685 11 is_stmt 1 view .LVU203
 742              		.loc 1 685 36 is_stmt 0 view .LVU204
 743 0030 E28B     		ldrh	r2, [r4, #30]
 744 0032 B4F90E10 		ldrsh	r1, [r4, #14]
 745 0036 2068     		ldr	r0, [r4]
 746 0038 FFF7FEFF 		bl	STC_ExecRamp
 747              	.LVL41:
 686:Src/mc_interface.c ****           break;
 748              		.loc 1 686 11 is_stmt 1 view .LVU205
 749              	.L42:
 687:Src/mc_interface.c ****         }
 688:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDSIN:
 689:Src/mc_interface.c ****         {
 690:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 691:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 692:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
 693:Src/mc_interface.c ****           break;
 694:Src/mc_interface.c ****         }
 695:Src/mc_interface.c **** 
 696:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 697:Src/mc_interface.c ****         {
 698:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 699:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 700:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 701:Src/mc_interface.c ****           break;
ARM GAS  /tmp/ccZYtsq1.s 			page 26


 702:Src/mc_interface.c ****         }
 703:Src/mc_interface.c **** 
 704:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUESIN:
 705:Src/mc_interface.c ****         {
 706:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 707:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 708:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hTorq
 709:Src/mc_interface.c ****           break;
 710:Src/mc_interface.c ****         }
 711:Src/mc_interface.c **** 
 712:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 713:Src/mc_interface.c ****         {
 714:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 715:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 716:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 717:Src/mc_interface.c ****           break;
 718:Src/mc_interface.c ****         }
 719:Src/mc_interface.c ****         default:
 720:Src/mc_interface.c ****           break;
 721:Src/mc_interface.c ****       }
 722:Src/mc_interface.c **** 
 723:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 750              		.loc 1 723 7 view .LVU206
 751              		.loc 1 723 10 is_stmt 0 view .LVU207
 752 003c 0028     		cmp	r0, #0
 753 003e 45D0     		beq	.L35
 754              	.LVL42:
 755              	.L43:
 724:Src/mc_interface.c ****       {
 725:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 756              		.loc 1 725 9 is_stmt 1 view .LVU208
 757              		.loc 1 725 31 is_stmt 0 view .LVU209
 758 0040 0223     		movs	r3, #2
 759 0042 84F82630 		strb	r3, [r4, #38]
 760              	.L33:
 761              		.loc 1 725 31 view .LVU210
 762              	.LBE28:
 726:Src/mc_interface.c ****       }
 727:Src/mc_interface.c ****       else
 728:Src/mc_interface.c ****       {
 729:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 730:Src/mc_interface.c ****       }
 731:Src/mc_interface.c ****     }
 732:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 733:Src/mc_interface.c ****   }
 734:Src/mc_interface.c **** #endif
 735:Src/mc_interface.c **** }
 763              		.loc 1 735 1 view .LVU211
 764 0046 10BD     		pop	{r4, pc}
 765              	.LVL43:
 766              	.L38:
 767              	.LBB31:
 768              	.LBB29:
 690:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 769              		.loc 1 690 11 is_stmt 1 view .LVU212
 690:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 770              		.loc 1 690 18 is_stmt 0 view .LVU213
ARM GAS  /tmp/ccZYtsq1.s 			page 27


 771 0048 4368     		ldr	r3, [r0, #4]
 690:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 772              		.loc 1 690 42 view .LVU214
 773 004a 0022     		movs	r2, #0
 774 004c 83F82420 		strb	r2, [r3, #36]
 691:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
 775              		.loc 1 691 11 is_stmt 1 view .LVU215
 776 0050 0321     		movs	r1, #3
 777 0052 0068     		ldr	r0, [r0]
 778              	.LVL44:
 691:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
 779              		.loc 1 691 11 is_stmt 0 view .LVU216
 780 0054 FFF7FEFF 		bl	STC_SetControlMode
 781              	.LVL45:
 692:Src/mc_interface.c ****           break;
 782              		.loc 1 692 11 is_stmt 1 view .LVU217
 692:Src/mc_interface.c ****           break;
 783              		.loc 1 692 36 is_stmt 0 view .LVU218
 784 0058 B4F91030 		ldrsh	r3, [r4, #16]
 785 005c B4F91220 		ldrsh	r2, [r4, #18]
 786 0060 B4F90E10 		ldrsh	r1, [r4, #14]
 787 0064 2068     		ldr	r0, [r4]
 788 0066 FFF7FEFF 		bl	STC_ExecSin
 789              	.LVL46:
 692:Src/mc_interface.c ****           break;
 790              		.loc 1 692 34 view .LVU219
 791 006a 0038     		subs	r0, r0, #0
 792 006c 18BF     		it	ne
 793 006e 0120     		movne	r0, #1
 794              	.LVL47:
 693:Src/mc_interface.c ****         }
 795              		.loc 1 693 11 is_stmt 1 view .LVU220
 796 0070 E4E7     		b	.L42
 797              	.LVL48:
 798              	.L40:
 693:Src/mc_interface.c ****         }
 799              		.loc 1 693 11 is_stmt 0 view .LVU221
 800              	.LBE29:
 698:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 801              		.loc 1 698 11 is_stmt 1 view .LVU222
 698:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 802              		.loc 1 698 18 is_stmt 0 view .LVU223
 803 0072 4368     		ldr	r3, [r0, #4]
 698:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 804              		.loc 1 698 42 view .LVU224
 805 0074 0022     		movs	r2, #0
 806 0076 83F82420 		strb	r2, [r3, #36]
 699:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 807              		.loc 1 699 11 is_stmt 1 view .LVU225
 808 007a 0421     		movs	r1, #4
 809 007c 0068     		ldr	r0, [r0]
 810              	.LVL49:
 699:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 811              		.loc 1 699 11 is_stmt 0 view .LVU226
 812 007e FFF7FEFF 		bl	STC_SetControlMode
 813              	.LVL50:
 700:Src/mc_interface.c ****           break;
ARM GAS  /tmp/ccZYtsq1.s 			page 28


 814              		.loc 1 700 11 is_stmt 1 view .LVU227
 700:Src/mc_interface.c ****           break;
 815              		.loc 1 700 36 is_stmt 0 view .LVU228
 816 0082 E28B     		ldrh	r2, [r4, #30]
 817 0084 B4F91410 		ldrsh	r1, [r4, #20]
 818 0088 2068     		ldr	r0, [r4]
 819 008a FFF7FEFF 		bl	STC_ExecRamp
 820              	.LVL51:
 701:Src/mc_interface.c ****         }
 821              		.loc 1 701 11 is_stmt 1 view .LVU229
 822 008e D5E7     		b	.L42
 823              	.LVL52:
 824              	.L36:
 825              	.LBB30:
 706:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 826              		.loc 1 706 11 view .LVU230
 706:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 827              		.loc 1 706 18 is_stmt 0 view .LVU231
 828 0090 4368     		ldr	r3, [r0, #4]
 706:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 829              		.loc 1 706 42 view .LVU232
 830 0092 0022     		movs	r2, #0
 831 0094 83F82420 		strb	r2, [r3, #36]
 707:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hTorq
 832              		.loc 1 707 11 is_stmt 1 view .LVU233
 833 0098 0421     		movs	r1, #4
 834 009a 0068     		ldr	r0, [r0]
 835              	.LVL53:
 707:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hTorq
 836              		.loc 1 707 11 is_stmt 0 view .LVU234
 837 009c FFF7FEFF 		bl	STC_SetControlMode
 838              	.LVL54:
 708:Src/mc_interface.c ****           break;
 839              		.loc 1 708 11 is_stmt 1 view .LVU235
 708:Src/mc_interface.c ****           break;
 840              		.loc 1 708 36 is_stmt 0 view .LVU236
 841 00a0 B4F91630 		ldrsh	r3, [r4, #22]
 842 00a4 B4F91820 		ldrsh	r2, [r4, #24]
 843 00a8 B4F91410 		ldrsh	r1, [r4, #20]
 844 00ac 2068     		ldr	r0, [r4]
 845 00ae FFF7FEFF 		bl	STC_ExecSin
 846              	.LVL55:
 708:Src/mc_interface.c ****           break;
 847              		.loc 1 708 34 view .LVU237
 848 00b2 0038     		subs	r0, r0, #0
 849 00b4 18BF     		it	ne
 850 00b6 0120     		movne	r0, #1
 851              	.LVL56:
 709:Src/mc_interface.c ****         }
 852              		.loc 1 709 11 is_stmt 1 view .LVU238
 853 00b8 C0E7     		b	.L42
 854              	.LVL57:
 855              	.L39:
 709:Src/mc_interface.c ****         }
 856              		.loc 1 709 11 is_stmt 0 view .LVU239
 857              	.LBE30:
 714:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
ARM GAS  /tmp/ccZYtsq1.s 			page 29


 858              		.loc 1 714 11 is_stmt 1 view .LVU240
 714:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 859              		.loc 1 714 18 is_stmt 0 view .LVU241
 860 00ba 4368     		ldr	r3, [r0, #4]
 714:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 861              		.loc 1 714 42 view .LVU242
 862 00bc 0122     		movs	r2, #1
 863 00be 83F82420 		strb	r2, [r3, #36]
 715:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 864              		.loc 1 715 11 is_stmt 1 view .LVU243
 715:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 865              		.loc 1 715 18 is_stmt 0 view .LVU244
 866 00c2 4368     		ldr	r3, [r0, #4]
 715:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 867              		.loc 1 715 37 view .LVU245
 868 00c4 D0F81A20 		ldr	r2, [r0, #26]	@ unaligned
 869 00c8 1A61     		str	r2, [r3, #16]	@ unaligned
 716:Src/mc_interface.c ****           break;
 870              		.loc 1 716 11 is_stmt 1 view .LVU246
 871              	.LVL58:
 717:Src/mc_interface.c ****         }
 872              		.loc 1 717 11 view .LVU247
 723:Src/mc_interface.c ****       {
 873              		.loc 1 723 7 view .LVU248
 874 00ca B9E7     		b	.L43
 875              	.LVL59:
 876              	.L35:
 729:Src/mc_interface.c ****       }
 877              		.loc 1 729 9 view .LVU249
 729:Src/mc_interface.c ****       }
 878              		.loc 1 729 31 is_stmt 0 view .LVU250
 879 00cc 0323     		movs	r3, #3
 880 00ce 84F82630 		strb	r3, [r4, #38]
 881              	.LBE31:
 882              		.loc 1 735 1 view .LVU251
 883 00d2 B8E7     		b	.L33
 884              		.cfi_endproc
 885              	.LFE1457:
 887              		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 888              		.align	1
 889              		.weak	MCI_IsCommandAcknowledged
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu fpv4-sp-d16
 895              	MCI_IsCommandAcknowledged:
 896              	.LVL60:
 897              	.LFB1458:
 736:Src/mc_interface.c **** 
 737:Src/mc_interface.c **** /**
 738:Src/mc_interface.c ****   * @brief  It returns information about the state of the last buffered command.
 739:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 740:Src/mc_interface.c ****   * @retval CommandState_t  It can be one of the following codes:
 741:Src/mc_interface.c ****   *         - MCI_BUFFER_EMPTY if no buffered command has been called.
 742:Src/mc_interface.c ****   *         - MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 743:Src/mc_interface.c ****   *         condition hasn't already occurred.
 744:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_SUCCESFULLY if the buffered command has
ARM GAS  /tmp/ccZYtsq1.s 			page 30


 745:Src/mc_interface.c ****   *         been executed successfully. In this case calling this function reset
 746:Src/mc_interface.c ****   *         the command state to BC_BUFFER_EMPTY.
 747:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_UNSUCCESFULLY if the buffered command has
 748:Src/mc_interface.c ****   *         been executed unsuccessfully. In this case calling this function
 749:Src/mc_interface.c ****   *         reset the command state to BC_BUFFER_EMPTY.
 750:Src/mc_interface.c ****   */
 751:Src/mc_interface.c **** __weak MCI_CommandState_t  MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 752:Src/mc_interface.c **** {
 898              		.loc 1 752 1 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903              		.loc 1 752 1 is_stmt 0 view .LVU253
 904 0000 0346     		mov	r3, r0
 753:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 905              		.loc 1 753 3 is_stmt 1 view .LVU254
 754:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 755:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 756:Src/mc_interface.c ****   {
 757:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 758:Src/mc_interface.c ****   }
 759:Src/mc_interface.c ****   else
 760:Src/mc_interface.c ****   {
 761:Src/mc_interface.c **** #endif
 762:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 906              		.loc 1 762 5 view .LVU255
 907              		.loc 1 762 12 is_stmt 0 view .LVU256
 908 0002 90F82600 		ldrb	r0, [r0, #38]	@ zero_extendqisi2
 909              	.LVL61:
 763:Src/mc_interface.c **** 
 764:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESFULLY == retV
 910              		.loc 1 764 5 is_stmt 1 view .LVU257
 911              		.loc 1 764 54 is_stmt 0 view .LVU258
 912 0006 821E     		subs	r2, r0, #2
 913 0008 D2B2     		uxtb	r2, r2
 914              		.loc 1 764 8 view .LVU259
 915 000a 012A     		cmp	r2, #1
 916 000c 00D9     		bls	.L51
 917              	.L50:
 765:Src/mc_interface.c ****     {
 766:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 767:Src/mc_interface.c ****     }
 768:Src/mc_interface.c ****     else
 769:Src/mc_interface.c ****     {
 770:Src/mc_interface.c ****       /* Nothing to do */
 771:Src/mc_interface.c ****     }
 918              		.loc 1 771 5 is_stmt 1 view .LVU260
 772:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 773:Src/mc_interface.c ****   }
 774:Src/mc_interface.c **** #endif
 775:Src/mc_interface.c ****   return (retVal);
 919              		.loc 1 775 3 view .LVU261
 776:Src/mc_interface.c **** }
 920              		.loc 1 776 1 is_stmt 0 view .LVU262
 921 000e 7047     		bx	lr
 922              	.L51:
ARM GAS  /tmp/ccZYtsq1.s 			page 31


 766:Src/mc_interface.c ****     }
 923              		.loc 1 766 7 is_stmt 1 view .LVU263
 766:Src/mc_interface.c ****     }
 924              		.loc 1 766 29 is_stmt 0 view .LVU264
 925 0010 0022     		movs	r2, #0
 926 0012 83F82620 		strb	r2, [r3, #38]
 927 0016 FAE7     		b	.L50
 928              		.cfi_endproc
 929              	.LFE1458:
 931              		.section	.text.MCI_GetSTMState,"ax",%progbits
 932              		.align	1
 933              		.weak	MCI_GetSTMState
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu fpv4-sp-d16
 939              	MCI_GetSTMState:
 940              	.LVL62:
 941              	.LFB1459:
 777:Src/mc_interface.c **** 
 778:Src/mc_interface.c **** /**
 779:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 780:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 781:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 782:Src/mc_interface.c ****   */
 783:Src/mc_interface.c **** __weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
 784:Src/mc_interface.c **** {
 942              		.loc 1 784 1 is_stmt 1 view -0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 0
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 946              		@ link register save eliminated.
 785:Src/mc_interface.c ****   return (pHandle->State);
 947              		.loc 1 785 3 view .LVU266
 786:Src/mc_interface.c **** }
 948              		.loc 1 786 1 is_stmt 0 view .LVU267
 949 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 950              	.LVL63:
 951              		.loc 1 786 1 view .LVU268
 952 0004 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE1459:
 956              		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 957              		.align	1
 958              		.weak	MCI_GetOccurredFaults
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 962              		.fpu fpv4-sp-d16
 964              	MCI_GetOccurredFaults:
 965              	.LVL64:
 966              	.LFB1460:
 787:Src/mc_interface.c **** 
 788:Src/mc_interface.c **** /**
 789:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
 790:Src/mc_interface.c ****   *        historically occurred since the state machine has been moved into
 791:Src/mc_interface.c ****   *        FAULT_NOW state.
ARM GAS  /tmp/ccZYtsq1.s 			page 32


 792:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 793:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 794:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
 795:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 796:Src/mc_interface.c ****   *         FAULT_NOW state.
 797:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 798:Src/mc_interface.c ****   */
 799:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
 800:Src/mc_interface.c **** {
 967              		.loc 1 800 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 801:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 972              		.loc 1 801 3 view .LVU270
 802:Src/mc_interface.c **** }
 973              		.loc 1 802 1 is_stmt 0 view .LVU271
 974 0000 808C     		ldrh	r0, [r0, #36]
 975              	.LVL65:
 976              		.loc 1 802 1 view .LVU272
 977 0002 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE1460:
 981              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
 982              		.align	1
 983              		.weak	MCI_GetCurrentFaults
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu fpv4-sp-d16
 989              	MCI_GetCurrentFaults:
 990              	.LVL66:
 991              	.LFB1461:
 803:Src/mc_interface.c **** 
 804:Src/mc_interface.c **** /**
 805:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
 806:Src/mc_interface.c ****   *        currently present.
 807:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 808:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 809:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about about currently
 810:Src/mc_interface.c ****   *         present faults.
 811:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 812:Src/mc_interface.c ****   */
 813:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
 814:Src/mc_interface.c **** {
 992              		.loc 1 814 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 815:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 997              		.loc 1 815 3 view .LVU274
 816:Src/mc_interface.c **** }
 998              		.loc 1 816 1 is_stmt 0 view .LVU275
 999 0000 408C     		ldrh	r0, [r0, #34]
 1000              	.LVL67:
ARM GAS  /tmp/ccZYtsq1.s 			page 33


 1001              		.loc 1 816 1 view .LVU276
 1002 0002 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE1461:
 1006              		.section	.text.MCI_StartMotor,"ax",%progbits
 1007              		.align	1
 1008              		.weak	MCI_StartMotor
 1009              		.syntax unified
 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	MCI_StartMotor:
 1015              	.LVL68:
 1016              	.LFB1449:
 408:Src/mc_interface.c ****   bool RetVal;
 1017              		.loc 1 408 1 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 408:Src/mc_interface.c ****   bool RetVal;
 1021              		.loc 1 408 1 is_stmt 0 view .LVU278
 1022 0000 10B5     		push	{r4, lr}
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 4, -8
 1025              		.cfi_offset 14, -4
 1026 0002 0446     		mov	r4, r0
 409:Src/mc_interface.c **** 
 1027              		.loc 1 409 3 is_stmt 1 view .LVU279
 411:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1028              		.loc 1 411 3 view .LVU280
 411:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1029              		.loc 1 411 16 is_stmt 0 view .LVU281
 1030 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1031              	.LVL69:
 411:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1032              		.loc 1 411 6 view .LVU282
 1033 0008 08B1     		cbz	r0, .L61
 422:Src/mc_interface.c ****   }
 1034              		.loc 1 422 12 view .LVU283
 1035 000a 0020     		movs	r0, #0
 1036              	.L56:
 1037              	.LVL70:
 425:Src/mc_interface.c **** }
 1038              		.loc 1 425 3 is_stmt 1 view .LVU284
 426:Src/mc_interface.c **** 
 1039              		.loc 1 426 1 is_stmt 0 view .LVU285
 1040 000c 10BD     		pop	{r4, pc}
 1041              	.LVL71:
 1042              	.L61:
 412:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1043              		.loc 1 412 24 discriminator 1 view .LVU286
 1044 000e 2046     		mov	r0, r4
 1045 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1046              	.LVL72:
 411:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1047              		.loc 1 411 42 discriminator 1 view .LVU287
 1048 0014 08B1     		cbz	r0, .L62
ARM GAS  /tmp/ccZYtsq1.s 			page 34


 422:Src/mc_interface.c ****   }
 1049              		.loc 1 422 12 view .LVU288
 1050 0016 0020     		movs	r0, #0
 1051 0018 F8E7     		b	.L56
 1052              	.L62:
 413:Src/mc_interface.c ****   {
 1053              		.loc 1 413 24 view .LVU289
 1054 001a 2046     		mov	r0, r4
 1055 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1056              	.LVL73:
 412:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1057              		.loc 1 412 56 view .LVU290
 1058 0020 28B9     		cbnz	r0, .L59
 415:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1059              		.loc 1 415 5 is_stmt 1 view .LVU291
 415:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1060              		.loc 1 415 28 is_stmt 0 view .LVU292
 1061 0022 0120     		movs	r0, #1
 1062 0024 84F82000 		strb	r0, [r4, #32]
 416:Src/mc_interface.c ****     RetVal = true;
 1063              		.loc 1 416 5 is_stmt 1 view .LVU293
 416:Src/mc_interface.c ****     RetVal = true;
 1064              		.loc 1 416 27 is_stmt 0 view .LVU294
 1065 0028 84F82600 		strb	r0, [r4, #38]
 417:Src/mc_interface.c ****   }
 1066              		.loc 1 417 5 is_stmt 1 view .LVU295
 1067              	.LVL74:
 417:Src/mc_interface.c ****   }
 1068              		.loc 1 417 12 is_stmt 0 view .LVU296
 1069 002c EEE7     		b	.L56
 1070              	.LVL75:
 1071              	.L59:
 422:Src/mc_interface.c ****   }
 1072              		.loc 1 422 12 view .LVU297
 1073 002e 0020     		movs	r0, #0
 1074 0030 ECE7     		b	.L56
 1075              		.cfi_endproc
 1076              	.LFE1449:
 1078              		.section	.text.MCI_StartWithMeasurementOffset,"ax",%progbits
 1079              		.align	1
 1080              		.weak	MCI_StartWithMeasurementOffset
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1084              		.fpu fpv4-sp-d16
 1086              	MCI_StartWithMeasurementOffset:
 1087              	.LVL76:
 1088              	.LFB1450:
 451:Src/mc_interface.c ****   bool RetVal;
 1089              		.loc 1 451 1 is_stmt 1 view -0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 451:Src/mc_interface.c ****   bool RetVal;
 1093              		.loc 1 451 1 is_stmt 0 view .LVU299
 1094 0000 10B5     		push	{r4, lr}
 1095              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccZYtsq1.s 			page 35


 1096              		.cfi_offset 4, -8
 1097              		.cfi_offset 14, -4
 1098 0002 0446     		mov	r4, r0
 452:Src/mc_interface.c **** 
 1099              		.loc 1 452 3 is_stmt 1 view .LVU300
 454:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1100              		.loc 1 454 3 view .LVU301
 454:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1101              		.loc 1 454 16 is_stmt 0 view .LVU302
 1102 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1103              	.LVL77:
 454:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1104              		.loc 1 454 6 view .LVU303
 1105 0008 08B1     		cbz	r0, .L69
 466:Src/mc_interface.c ****   }
 1106              		.loc 1 466 12 view .LVU304
 1107 000a 0020     		movs	r0, #0
 1108              	.L64:
 1109              	.LVL78:
 469:Src/mc_interface.c **** }
 1110              		.loc 1 469 3 is_stmt 1 view .LVU305
 470:Src/mc_interface.c **** 
 1111              		.loc 1 470 1 is_stmt 0 view .LVU306
 1112 000c 10BD     		pop	{r4, pc}
 1113              	.LVL79:
 1114              	.L69:
 455:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1115              		.loc 1 455 24 discriminator 1 view .LVU307
 1116 000e 2046     		mov	r0, r4
 1117 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1118              	.LVL80:
 454:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1119              		.loc 1 454 42 discriminator 1 view .LVU308
 1120 0014 08B1     		cbz	r0, .L70
 466:Src/mc_interface.c ****   }
 1121              		.loc 1 466 12 view .LVU309
 1122 0016 0020     		movs	r0, #0
 1123 0018 F8E7     		b	.L64
 1124              	.L70:
 456:Src/mc_interface.c ****   {
 1125              		.loc 1 456 24 view .LVU310
 1126 001a 2046     		mov	r0, r4
 1127 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1128              	.LVL81:
 455:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1129              		.loc 1 455 56 view .LVU311
 1130 0020 48B9     		cbnz	r0, .L67
 458:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1131              		.loc 1 458 5 is_stmt 1 view .LVU312
 458:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1132              		.loc 1 458 28 is_stmt 0 view .LVU313
 1133 0022 0120     		movs	r0, #1
 1134 0024 84F82000 		strb	r0, [r4, #32]
 459:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1135              		.loc 1 459 5 is_stmt 1 view .LVU314
 459:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1136              		.loc 1 459 27 is_stmt 0 view .LVU315
ARM GAS  /tmp/ccZYtsq1.s 			page 36


 1137 0028 84F82600 		strb	r0, [r4, #38]
 460:Src/mc_interface.c ****     RetVal = true;
 1138              		.loc 1 460 5 is_stmt 1 view .LVU316
 460:Src/mc_interface.c ****     RetVal = true;
 1139              		.loc 1 460 12 is_stmt 0 view .LVU317
 1140 002c A368     		ldr	r3, [r4, #8]
 460:Src/mc_interface.c ****     RetVal = true;
 1141              		.loc 1 460 38 view .LVU318
 1142 002e 0022     		movs	r2, #0
 1143 0030 83F86E20 		strb	r2, [r3, #110]
 461:Src/mc_interface.c ****   }
 1144              		.loc 1 461 5 is_stmt 1 view .LVU319
 1145              	.LVL82:
 461:Src/mc_interface.c ****   }
 1146              		.loc 1 461 12 is_stmt 0 view .LVU320
 1147 0034 EAE7     		b	.L64
 1148              	.LVL83:
 1149              	.L67:
 466:Src/mc_interface.c ****   }
 1150              		.loc 1 466 12 view .LVU321
 1151 0036 0020     		movs	r0, #0
 1152 0038 E8E7     		b	.L64
 1153              		.cfi_endproc
 1154              	.LFE1450:
 1156              		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 1157              		.align	1
 1158              		.weak	MCI_StartOffsetMeasurments
 1159              		.syntax unified
 1160              		.thumb
 1161              		.thumb_func
 1162              		.fpu fpv4-sp-d16
 1164              	MCI_StartOffsetMeasurments:
 1165              	.LVL84:
 1166              	.LFB1451:
 488:Src/mc_interface.c ****   bool RetVal;
 1167              		.loc 1 488 1 is_stmt 1 view -0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 488:Src/mc_interface.c ****   bool RetVal;
 1171              		.loc 1 488 1 is_stmt 0 view .LVU323
 1172 0000 10B5     		push	{r4, lr}
 1173              		.cfi_def_cfa_offset 8
 1174              		.cfi_offset 4, -8
 1175              		.cfi_offset 14, -4
 1176 0002 0446     		mov	r4, r0
 489:Src/mc_interface.c **** 
 1177              		.loc 1 489 3 is_stmt 1 view .LVU324
 491:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1178              		.loc 1 491 3 view .LVU325
 491:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1179              		.loc 1 491 16 is_stmt 0 view .LVU326
 1180 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1181              	.LVL85:
 491:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1182              		.loc 1 491 6 view .LVU327
 1183 0008 08B1     		cbz	r0, .L77
ARM GAS  /tmp/ccZYtsq1.s 			page 37


 502:Src/mc_interface.c ****   }
 1184              		.loc 1 502 12 view .LVU328
 1185 000a 0020     		movs	r0, #0
 1186              	.L72:
 1187              	.LVL86:
 505:Src/mc_interface.c **** }
 1188              		.loc 1 505 3 is_stmt 1 view .LVU329
 506:Src/mc_interface.c **** 
 1189              		.loc 1 506 1 is_stmt 0 view .LVU330
 1190 000c 10BD     		pop	{r4, pc}
 1191              	.LVL87:
 1192              	.L77:
 492:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1193              		.loc 1 492 24 discriminator 1 view .LVU331
 1194 000e 2046     		mov	r0, r4
 1195 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1196              	.LVL88:
 491:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1197              		.loc 1 491 42 discriminator 1 view .LVU332
 1198 0014 08B1     		cbz	r0, .L78
 502:Src/mc_interface.c ****   }
 1199              		.loc 1 502 12 view .LVU333
 1200 0016 0020     		movs	r0, #0
 1201 0018 F8E7     		b	.L72
 1202              	.L78:
 493:Src/mc_interface.c ****   {
 1203              		.loc 1 493 24 view .LVU334
 1204 001a 2046     		mov	r0, r4
 1205 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1206              	.LVL89:
 492:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1207              		.loc 1 492 56 view .LVU335
 1208 0020 40B9     		cbnz	r0, .L75
 495:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1209              		.loc 1 495 5 is_stmt 1 view .LVU336
 495:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1210              		.loc 1 495 28 is_stmt 0 view .LVU337
 1211 0022 0323     		movs	r3, #3
 1212 0024 84F82030 		strb	r3, [r4, #32]
 496:Src/mc_interface.c ****     RetVal = true;
 1213              		.loc 1 496 5 is_stmt 1 view .LVU338
 496:Src/mc_interface.c ****     RetVal = true;
 1214              		.loc 1 496 12 is_stmt 0 view .LVU339
 1215 0028 A368     		ldr	r3, [r4, #8]
 496:Src/mc_interface.c ****     RetVal = true;
 1216              		.loc 1 496 38 view .LVU340
 1217 002a 0022     		movs	r2, #0
 1218 002c 83F86E20 		strb	r2, [r3, #110]
 497:Src/mc_interface.c ****   }
 1219              		.loc 1 497 5 is_stmt 1 view .LVU341
 1220              	.LVL90:
 497:Src/mc_interface.c ****   }
 1221              		.loc 1 497 12 is_stmt 0 view .LVU342
 1222 0030 0120     		movs	r0, #1
 1223 0032 EBE7     		b	.L72
 1224              	.LVL91:
 1225              	.L75:
ARM GAS  /tmp/ccZYtsq1.s 			page 38


 502:Src/mc_interface.c ****   }
 1226              		.loc 1 502 12 view .LVU343
 1227 0034 0020     		movs	r0, #0
 1228 0036 E9E7     		b	.L72
 1229              		.cfi_endproc
 1230              	.LFE1451:
 1232              		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 1233              		.align	1
 1234              		.weak	MCI_SetCalibratedOffsetsMotor
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1238              		.fpu fpv4-sp-d16
 1240              	MCI_SetCalibratedOffsetsMotor:
 1241              	.LVL92:
 1242              	.LFB1453:
 551:Src/mc_interface.c ****   bool RetVal;
 1243              		.loc 1 551 1 is_stmt 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 551:Src/mc_interface.c ****   bool RetVal;
 1247              		.loc 1 551 1 is_stmt 0 view .LVU345
 1248 0000 38B5     		push	{r3, r4, r5, lr}
 1249              		.cfi_def_cfa_offset 16
 1250              		.cfi_offset 3, -16
 1251              		.cfi_offset 4, -12
 1252              		.cfi_offset 5, -8
 1253              		.cfi_offset 14, -4
 1254 0002 0446     		mov	r4, r0
 1255 0004 0D46     		mov	r5, r1
 552:Src/mc_interface.c **** 
 1256              		.loc 1 552 3 is_stmt 1 view .LVU346
 554:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1257              		.loc 1 554 3 view .LVU347
 554:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1258              		.loc 1 554 16 is_stmt 0 view .LVU348
 1259 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1260              	.LVL93:
 554:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1261              		.loc 1 554 6 view .LVU349
 1262 000a 08B1     		cbz	r0, .L82
 1263              	.L80:
 1264              	.LVL94:
 563:Src/mc_interface.c **** }
 1265              		.loc 1 563 5 is_stmt 1 view .LVU350
 564:Src/mc_interface.c **** 
 1266              		.loc 1 564 1 is_stmt 0 view .LVU351
 1267 000c 0120     		movs	r0, #1
 1268 000e 38BD     		pop	{r3, r4, r5, pc}
 1269              	.LVL95:
 1270              	.L82:
 555:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1271              		.loc 1 555 24 discriminator 1 view .LVU352
 1272 0010 2046     		mov	r0, r4
 1273 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1274              	.LVL96:
ARM GAS  /tmp/ccZYtsq1.s 			page 39


 554:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1275              		.loc 1 554 42 discriminator 1 view .LVU353
 1276 0016 0028     		cmp	r0, #0
 1277 0018 F8D1     		bne	.L80
 556:Src/mc_interface.c ****   {
 1278              		.loc 1 556 24 view .LVU354
 1279 001a 2046     		mov	r0, r4
 1280 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1281              	.LVL97:
 555:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1282              		.loc 1 555 56 view .LVU355
 1283 0020 0028     		cmp	r0, #0
 1284 0022 F3D1     		bne	.L80
 558:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 1285              		.loc 1 558 7 is_stmt 1 view .LVU356
 1286 0024 2946     		mov	r1, r5
 1287 0026 A068     		ldr	r0, [r4, #8]
 1288 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 1289              	.LVL98:
 559:Src/mc_interface.c ****       RetVal = true;
 1290              		.loc 1 559 7 view .LVU357
 559:Src/mc_interface.c ****       RetVal = true;
 1291              		.loc 1 559 14 is_stmt 0 view .LVU358
 1292 002c A368     		ldr	r3, [r4, #8]
 559:Src/mc_interface.c ****       RetVal = true;
 1293              		.loc 1 559 40 view .LVU359
 1294 002e 0122     		movs	r2, #1
 1295 0030 83F86E20 		strb	r2, [r3, #110]
 560:Src/mc_interface.c ****   }
 1296              		.loc 1 560 7 is_stmt 1 view .LVU360
 1297              	.LVL99:
 560:Src/mc_interface.c ****   }
 1298              		.loc 1 560 7 is_stmt 0 view .LVU361
 1299 0034 EAE7     		b	.L80
 1300              		.cfi_endproc
 1301              	.LFE1453:
 1303              		.section	.text.MCI_StopMotor,"ax",%progbits
 1304              		.align	1
 1305              		.weak	MCI_StopMotor
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu fpv4-sp-d16
 1311              	MCI_StopMotor:
 1312              	.LVL100:
 1313              	.LFB1454:
 582:Src/mc_interface.c ****   bool RetVal;
 1314              		.loc 1 582 1 is_stmt 1 view -0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 582:Src/mc_interface.c ****   bool RetVal;
 1318              		.loc 1 582 1 is_stmt 0 view .LVU363
 1319 0000 38B5     		push	{r3, r4, r5, lr}
 1320              		.cfi_def_cfa_offset 16
 1321              		.cfi_offset 3, -16
 1322              		.cfi_offset 4, -12
ARM GAS  /tmp/ccZYtsq1.s 			page 40


 1323              		.cfi_offset 5, -8
 1324              		.cfi_offset 14, -4
 1325 0002 0446     		mov	r4, r0
 583:Src/mc_interface.c ****   bool status;
 1326              		.loc 1 583 3 is_stmt 1 view .LVU364
 584:Src/mc_interface.c ****   MCI_State_t State;
 1327              		.loc 1 584 3 view .LVU365
 585:Src/mc_interface.c **** 
 1328              		.loc 1 585 3 view .LVU366
 587:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1329              		.loc 1 587 3 view .LVU367
 587:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1330              		.loc 1 587 11 is_stmt 0 view .LVU368
 1331 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1332              	.LVL101:
 588:Src/mc_interface.c ****   {
 1333              		.loc 1 588 3 is_stmt 1 view .LVU369
 588:Src/mc_interface.c ****   {
 1334              		.loc 1 588 6 is_stmt 0 view .LVU370
 1335 0008 28B1     		cbz	r0, .L86
 588:Src/mc_interface.c ****   {
 1336              		.loc 1 588 22 discriminator 1 view .LVU371
 1337 000a 0C28     		cmp	r0, #12
 1338 000c 01D0     		beq	.L91
 594:Src/mc_interface.c ****   }
 1339              		.loc 1 594 12 view .LVU372
 1340 000e 0125     		movs	r5, #1
 1341 0010 02E0     		b	.L84
 1342              	.L91:
 590:Src/mc_interface.c ****   }
 1343              		.loc 1 590 12 view .LVU373
 1344 0012 0025     		movs	r5, #0
 1345 0014 00E0     		b	.L84
 1346              	.L86:
 1347 0016 0025     		movs	r5, #0
 1348              	.L84:
 1349              	.LVL102:
 597:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1350              		.loc 1 597 3 is_stmt 1 view .LVU374
 597:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1351              		.loc 1 597 24 is_stmt 0 view .LVU375
 1352 0018 2046     		mov	r0, r4
 1353              	.LVL103:
 597:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1354              		.loc 1 597 24 view .LVU376
 1355 001a FFF7FEFF 		bl	MCI_GetOccurredFaults
 1356              	.LVL104:
 597:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1357              		.loc 1 597 6 view .LVU377
 1358 001e 10B1     		cbz	r0, .L92
 607:Src/mc_interface.c ****   }
 1359              		.loc 1 607 12 view .LVU378
 1360 0020 0025     		movs	r5, #0
 1361              	.LVL105:
 1362              	.L85:
 610:Src/mc_interface.c **** }
 1363              		.loc 1 610 3 is_stmt 1 view .LVU379
ARM GAS  /tmp/ccZYtsq1.s 			page 41


 611:Src/mc_interface.c **** 
 1364              		.loc 1 611 1 is_stmt 0 view .LVU380
 1365 0022 2846     		mov	r0, r5
 1366 0024 38BD     		pop	{r3, r4, r5, pc}
 1367              	.LVL106:
 1368              	.L92:
 598:Src/mc_interface.c ****        status == true )
 1369              		.loc 1 598 24 discriminator 1 view .LVU381
 1370 0026 2046     		mov	r0, r4
 1371 0028 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1372              	.LVL107:
 597:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1373              		.loc 1 597 56 discriminator 1 view .LVU382
 1374 002c 28B9     		cbnz	r0, .L89
 598:Src/mc_interface.c ****        status == true )
 1375              		.loc 1 598 55 view .LVU383
 1376 002e 002D     		cmp	r5, #0
 1377 0030 F7D0     		beq	.L85
 601:Src/mc_interface.c ****     RetVal = true;
 1378              		.loc 1 601 5 is_stmt 1 view .LVU384
 601:Src/mc_interface.c ****     RetVal = true;
 1379              		.loc 1 601 28 is_stmt 0 view .LVU385
 1380 0032 0523     		movs	r3, #5
 1381 0034 84F82030 		strb	r3, [r4, #32]
 602:Src/mc_interface.c ****   }
 1382              		.loc 1 602 5 is_stmt 1 view .LVU386
 1383              	.LVL108:
 602:Src/mc_interface.c ****   }
 1384              		.loc 1 602 12 is_stmt 0 view .LVU387
 1385 0038 F3E7     		b	.L85
 1386              	.LVL109:
 1387              	.L89:
 607:Src/mc_interface.c ****   }
 1388              		.loc 1 607 12 view .LVU388
 1389 003a 0025     		movs	r5, #0
 1390              	.LVL110:
 607:Src/mc_interface.c ****   }
 1391              		.loc 1 607 12 view .LVU389
 1392 003c F1E7     		b	.L85
 1393              		.cfi_endproc
 1394              	.LFE1454:
 1396              		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
 1397              		.align	1
 1398              		.weak	MCI_FaultAcknowledged
 1399              		.syntax unified
 1400              		.thumb
 1401              		.thumb_func
 1402              		.fpu fpv4-sp-d16
 1404              	MCI_FaultAcknowledged:
 1405              	.LVL111:
 1406              	.LFB1455:
 623:Src/mc_interface.c ****   bool RetVal;
 1407              		.loc 1 623 1 is_stmt 1 view -0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 623:Src/mc_interface.c ****   bool RetVal;
ARM GAS  /tmp/ccZYtsq1.s 			page 42


 1411              		.loc 1 623 1 is_stmt 0 view .LVU391
 1412 0000 10B5     		push	{r4, lr}
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 4, -8
 1415              		.cfi_offset 14, -4
 1416 0002 0446     		mov	r4, r0
 624:Src/mc_interface.c **** 
 1417              		.loc 1 624 3 is_stmt 1 view .LVU392
 626:Src/mc_interface.c ****   {
 1418              		.loc 1 626 3 view .LVU393
 626:Src/mc_interface.c ****   {
 1419              		.loc 1 626 22 is_stmt 0 view .LVU394
 1420 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1421              	.LVL112:
 626:Src/mc_interface.c ****   {
 1422              		.loc 1 626 6 view .LVU395
 1423 0008 0B28     		cmp	r0, #11
 1424 000a 01D0     		beq	.L98
 635:Src/mc_interface.c ****   }
 1425              		.loc 1 635 12 view .LVU396
 1426 000c 0020     		movs	r0, #0
 1427              	.L94:
 1428              	.LVL113:
 637:Src/mc_interface.c **** }
 1429              		.loc 1 637 3 is_stmt 1 view .LVU397
 638:Src/mc_interface.c **** 
 1430              		.loc 1 638 1 is_stmt 0 view .LVU398
 1431 000e 10BD     		pop	{r4, pc}
 1432              	.LVL114:
 1433              	.L98:
 626:Src/mc_interface.c ****   {
 1434              		.loc 1 626 68 discriminator 1 view .LVU399
 1435 0010 2046     		mov	r0, r4
 1436 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1437              	.LVL115:
 626:Src/mc_interface.c ****   {
 1438              		.loc 1 626 48 discriminator 1 view .LVU400
 1439 0016 30B9     		cbnz	r0, .L96
 628:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1440              		.loc 1 628 5 is_stmt 1 view .LVU401
 628:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1441              		.loc 1 628 25 is_stmt 0 view .LVU402
 1442 0018 0023     		movs	r3, #0
 1443 001a A384     		strh	r3, [r4, #36]	@ movhi
 629:Src/mc_interface.c ****     RetVal = true;
 1444              		.loc 1 629 5 is_stmt 1 view .LVU403
 629:Src/mc_interface.c ****     RetVal = true;
 1445              		.loc 1 629 28 is_stmt 0 view .LVU404
 1446 001c 0223     		movs	r3, #2
 1447 001e 84F82030 		strb	r3, [r4, #32]
 630:Src/mc_interface.c ****   }
 1448              		.loc 1 630 5 is_stmt 1 view .LVU405
 1449              	.LVL116:
 630:Src/mc_interface.c ****   }
 1450              		.loc 1 630 12 is_stmt 0 view .LVU406
 1451 0022 0120     		movs	r0, #1
 1452 0024 F3E7     		b	.L94
ARM GAS  /tmp/ccZYtsq1.s 			page 43


 1453              	.LVL117:
 1454              	.L96:
 635:Src/mc_interface.c ****   }
 1455              		.loc 1 635 12 view .LVU407
 1456 0026 0020     		movs	r0, #0
 1457 0028 F1E7     		b	.L94
 1458              		.cfi_endproc
 1459              	.LFE1455:
 1461              		.section	.text.MCI_GetFaultState,"ax",%progbits
 1462              		.align	1
 1463              		.weak	MCI_GetFaultState
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1467              		.fpu fpv4-sp-d16
 1469              	MCI_GetFaultState:
 1470              	.LVL118:
 1471              	.LFB1462:
 817:Src/mc_interface.c **** 
 818:Src/mc_interface.c **** /**
 819:Src/mc_interface.c ****   * @brief It returns two 16 bit fields containing information about both faults
 820:Src/mc_interface.c ****   *        currently present and faults historically occurred since the state
 821:Src/mc_interface.c ****   *        machine has been moved into state
 822:Src/mc_interface.c ****   * @param pHanlde pointer of type  STM_Handle_t.
 823:Src/mc_interface.c ****   * @retval uint32_t  Two 16 bit fields: in the most significant half are stored
 824:Src/mc_interface.c ****   *         the information about currently present faults. In the least
 825:Src/mc_interface.c ****   *         significant half are stored the information about the faults
 826:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 827:Src/mc_interface.c ****   *         FAULT_NOW state
 828:Src/mc_interface.c ****   */
 829:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
 830:Src/mc_interface.c **** {
 1472              		.loc 1 830 1 is_stmt 1 view -0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476              		@ link register save eliminated.
 831:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1477              		.loc 1 831 3 view .LVU409
 832:Src/mc_interface.c **** 
 833:Src/mc_interface.c ****   LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1478              		.loc 1 833 3 view .LVU410
 1479              		.loc 1 833 39 is_stmt 0 view .LVU411
 1480 0000 838C     		ldrh	r3, [r0, #36]
 1481              	.LVL119:
 834:Src/mc_interface.c ****   LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1482              		.loc 1 834 3 is_stmt 1 view .LVU412
 1483              		.loc 1 834 40 is_stmt 0 view .LVU413
 1484 0002 408C     		ldrh	r0, [r0, #34]
 1485              	.LVL120:
 835:Src/mc_interface.c **** 
 836:Src/mc_interface.c ****   return (LocalFaultState);
 1486              		.loc 1 836 3 is_stmt 1 view .LVU414
 837:Src/mc_interface.c **** }
 1487              		.loc 1 837 1 is_stmt 0 view .LVU415
 1488 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1489              	.LVL121:
ARM GAS  /tmp/ccZYtsq1.s 			page 44


 1490              		.loc 1 837 1 view .LVU416
 1491 0008 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE1462:
 1495              		.section	.text.MCI_GetControlMode,"ax",%progbits
 1496              		.align	1
 1497              		.weak	MCI_GetControlMode
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
 1503              	MCI_GetControlMode:
 1504              	.LVL122:
 1505              	.LFB1463:
 838:Src/mc_interface.c **** 
 839:Src/mc_interface.c **** /**
 840:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
 841:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 842:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
 843:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 844:Src/mc_interface.c ****   */
 845:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
 846:Src/mc_interface.c **** {
 1506              		.loc 1 846 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 847:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 848:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
 849:Src/mc_interface.c **** #else
 850:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1511              		.loc 1 850 3 view .LVU418
 851:Src/mc_interface.c **** #endif
 852:Src/mc_interface.c **** }
 1512              		.loc 1 852 1 is_stmt 0 view .LVU419
 1513 0000 90F82700 		ldrb	r0, [r0, #39]	@ zero_extendqisi2
 1514              	.LVL123:
 1515              		.loc 1 852 1 view .LVU420
 1516 0004 7047     		bx	lr
 1517              		.cfi_endproc
 1518              	.LFE1463:
 1520              		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1521              		.align	1
 1522              		.weak	MCI_GetImposedMotorDirection
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	MCI_GetImposedMotorDirection:
 1529              	.LVL124:
 1530              	.LFB1464:
 853:Src/mc_interface.c **** 
 854:Src/mc_interface.c **** /**
 855:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
 856:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
 857:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  /tmp/ccZYtsq1.s 			page 45


 858:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
 859:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
 860:Src/mc_interface.c ****   */
 861:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle)
 862:Src/mc_interface.c **** {
 1531              		.loc 1 862 1 is_stmt 1 view -0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535              		@ link register save eliminated.
 863:Src/mc_interface.c ****   int16_t retVal = 1;
 1536              		.loc 1 863 3 view .LVU422
 864:Src/mc_interface.c **** 
 865:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 866:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 867:Src/mc_interface.c ****   {
 868:Src/mc_interface.c ****     /* Nothing to do */
 869:Src/mc_interface.c ****   }
 870:Src/mc_interface.c ****   else
 871:Src/mc_interface.c ****   {
 872:Src/mc_interface.c **** #endif
 873:Src/mc_interface.c ****     switch (pHandle->lastCommand)
 1537              		.loc 1 873 5 view .LVU423
 1538              		.loc 1 873 20 is_stmt 0 view .LVU424
 1539 0000 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 1540 0002 013B     		subs	r3, r3, #1
 1541 0004 032B     		cmp	r3, #3
 1542 0006 15D8     		bhi	.L107
 1543 0008 DFE803F0 		tbb	[pc, r3]
 1544              	.L104:
 1545 000c 02       		.byte	(.L103-.L104)/2
 1546 000d 08       		.byte	(.L106-.L104)/2
 1547 000e 0E       		.byte	(.L105-.L104)/2
 1548 000f 02       		.byte	(.L103-.L104)/2
 1549              		.p2align 1
 1550              	.L103:
 874:Src/mc_interface.c ****     {
 875:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDSIN:
 876:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDRAMP:
 877:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
 1551              		.loc 1 877 9 is_stmt 1 view .LVU425
 1552              		.loc 1 877 20 is_stmt 0 view .LVU426
 1553 0010 B0F90E30 		ldrsh	r3, [r0, #14]
 1554              		.loc 1 877 12 view .LVU427
 1555 0014 002B     		cmp	r3, #0
 1556 0016 0FDB     		blt	.L108
 863:Src/mc_interface.c **** 
 1557              		.loc 1 863 11 view .LVU428
 1558 0018 0120     		movs	r0, #1
 1559              	.LVL125:
 863:Src/mc_interface.c **** 
 1560              		.loc 1 863 11 view .LVU429
 1561 001a 7047     		bx	lr
 1562              	.LVL126:
 1563              	.L106:
 878:Src/mc_interface.c ****         {
 879:Src/mc_interface.c **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 46


 880:Src/mc_interface.c ****           retVal = -1;
 881:Src/mc_interface.c ****         }
 882:Src/mc_interface.c ****         break;
 883:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
 884:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
 1564              		.loc 1 884 9 is_stmt 1 view .LVU430
 1565              		.loc 1 884 20 is_stmt 0 view .LVU431
 1566 001c B0F91430 		ldrsh	r3, [r0, #20]
 1567              		.loc 1 884 12 view .LVU432
 1568 0020 002B     		cmp	r3, #0
 1569 0022 0CDB     		blt	.L109
 863:Src/mc_interface.c **** 
 1570              		.loc 1 863 11 view .LVU433
 1571 0024 0120     		movs	r0, #1
 1572              	.LVL127:
 863:Src/mc_interface.c **** 
 1573              		.loc 1 863 11 view .LVU434
 1574 0026 7047     		bx	lr
 1575              	.LVL128:
 1576              	.L105:
 885:Src/mc_interface.c ****         {
 886:Src/mc_interface.c ****           retVal = -1;
 887:Src/mc_interface.c ****         }
 888:Src/mc_interface.c ****         break;
 889:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
 890:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
 1577              		.loc 1 890 9 is_stmt 1 view .LVU435
 1578              		.loc 1 890 28 is_stmt 0 view .LVU436
 1579 0028 B0F91A30 		ldrsh	r3, [r0, #26]
 1580              		.loc 1 890 12 view .LVU437
 1581 002c 002B     		cmp	r3, #0
 1582 002e 09DB     		blt	.L110
 863:Src/mc_interface.c **** 
 1583              		.loc 1 863 11 view .LVU438
 1584 0030 0120     		movs	r0, #1
 1585              	.LVL129:
 863:Src/mc_interface.c **** 
 1586              		.loc 1 863 11 view .LVU439
 1587 0032 7047     		bx	lr
 1588              	.LVL130:
 1589              	.L107:
 873:Src/mc_interface.c ****     {
 1590              		.loc 1 873 20 view .LVU440
 1591 0034 0120     		movs	r0, #1
 1592              	.LVL131:
 873:Src/mc_interface.c ****     {
 1593              		.loc 1 873 20 view .LVU441
 1594 0036 7047     		bx	lr
 1595              	.LVL132:
 1596              	.L108:
 880:Src/mc_interface.c ****         }
 1597              		.loc 1 880 18 view .LVU442
 1598 0038 4FF0FF30 		mov	r0, #-1
 1599              	.LVL133:
 880:Src/mc_interface.c ****         }
 1600              		.loc 1 880 18 view .LVU443
 1601 003c 7047     		bx	lr
ARM GAS  /tmp/ccZYtsq1.s 			page 47


 1602              	.LVL134:
 1603              	.L109:
 886:Src/mc_interface.c ****         }
 1604              		.loc 1 886 18 view .LVU444
 1605 003e 4FF0FF30 		mov	r0, #-1
 1606              	.LVL135:
 886:Src/mc_interface.c ****         }
 1607              		.loc 1 886 18 view .LVU445
 1608 0042 7047     		bx	lr
 1609              	.LVL136:
 1610              	.L110:
 891:Src/mc_interface.c ****         {
 892:Src/mc_interface.c ****           retVal = -1;
 1611              		.loc 1 892 18 view .LVU446
 1612 0044 4FF0FF30 		mov	r0, #-1
 1613              	.LVL137:
 893:Src/mc_interface.c ****         }
 894:Src/mc_interface.c ****         break;
 895:Src/mc_interface.c ****       default:
 896:Src/mc_interface.c ****         break;
 897:Src/mc_interface.c ****     }
 898:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 899:Src/mc_interface.c ****   }
 900:Src/mc_interface.c **** #endif
 901:Src/mc_interface.c ****   return (retVal);
 1614              		.loc 1 901 3 is_stmt 1 view .LVU447
 902:Src/mc_interface.c **** }
 1615              		.loc 1 902 1 is_stmt 0 view .LVU448
 1616 0048 7047     		bx	lr
 1617              		.cfi_endproc
 1618              	.LFE1464:
 1620              		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1621              		.align	1
 1622              		.weak	MCI_GetLastRampFinalSpeed
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1626              		.fpu fpv4-sp-d16
 1628              	MCI_GetLastRampFinalSpeed:
 1629              	.LVL138:
 1630              	.LFB1465:
 903:Src/mc_interface.c **** 
 904:Src/mc_interface.c **** /**
 905:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
 906:Src/mc_interface.c ****   *         user expressed in the unit defined by #SPEED_UNIT.
 907:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 908:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in
 909:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT.
 910:Src/mc_interface.c ****   */
 911:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle)
 912:Src/mc_interface.c **** {
 1631              		.loc 1 912 1 is_stmt 1 view -0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 913:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
ARM GAS  /tmp/ccZYtsq1.s 			page 48


 914:Src/mc_interface.c ****   int16_t retVal = 0;
 915:Src/mc_interface.c **** 
 916:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 917:Src/mc_interface.c ****   {
 918:Src/mc_interface.c ****     /* Nothing to do */
 919:Src/mc_interface.c ****   }
 920:Src/mc_interface.c ****   else
 921:Src/mc_interface.c ****   {
 922:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
 923:Src/mc_interface.c ****   }
 924:Src/mc_interface.c ****   return (retVal);
 925:Src/mc_interface.c **** #else
 926:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1636              		.loc 1 926 3 view .LVU450
 927:Src/mc_interface.c **** #endif
 928:Src/mc_interface.c **** }
 1637              		.loc 1 928 1 is_stmt 0 view .LVU451
 1638 0000 B0F90E00 		ldrsh	r0, [r0, #14]
 1639              	.LVL139:
 1640              		.loc 1 928 1 view .LVU452
 1641 0004 7047     		bx	lr
 1642              		.cfi_endproc
 1643              	.LFE1465:
 1645              		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1646              		.align	1
 1647              		.weak	MCI_GetLastRampFinalTorque
 1648              		.syntax unified
 1649              		.thumb
 1650              		.thumb_func
 1651              		.fpu fpv4-sp-d16
 1653              	MCI_GetLastRampFinalTorque:
 1654              	.LVL140:
 1655              	.LFB1466:
 929:Src/mc_interface.c **** 
 930:Src/mc_interface.c **** /**
 931:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
 932:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
 933:Src/mc_interface.c ****   *         digit.
 934:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 935:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
 936:Src/mc_interface.c ****   */
 937:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle)
 938:Src/mc_interface.c **** {
 1656              		.loc 1 938 1 is_stmt 1 view -0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 939:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 940:Src/mc_interface.c ****   int16_t retVal = 0;
 941:Src/mc_interface.c **** 
 942:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 943:Src/mc_interface.c ****   {
 944:Src/mc_interface.c ****     /* Nothing to do */
 945:Src/mc_interface.c ****   }
 946:Src/mc_interface.c ****   else
 947:Src/mc_interface.c ****   {
ARM GAS  /tmp/ccZYtsq1.s 			page 49


 948:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
 949:Src/mc_interface.c ****   }
 950:Src/mc_interface.c ****   return (retVal);
 951:Src/mc_interface.c **** #else
 952:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1661              		.loc 1 952 3 view .LVU454
 953:Src/mc_interface.c **** #endif
 954:Src/mc_interface.c **** }
 1662              		.loc 1 954 1 is_stmt 0 view .LVU455
 1663 0000 B0F91400 		ldrsh	r0, [r0, #20]
 1664              	.LVL141:
 1665              		.loc 1 954 1 view .LVU456
 1666 0004 7047     		bx	lr
 1667              		.cfi_endproc
 1668              	.LFE1466:
 1670              		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1671              		.align	1
 1672              		.weak	MCI_GetLastRampFinalDuration
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1676              		.fpu fpv4-sp-d16
 1678              	MCI_GetLastRampFinalDuration:
 1679              	.LVL142:
 1680              	.LFB1467:
 955:Src/mc_interface.c **** 
 956:Src/mc_interface.c **** /**
 957:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
 958:Src/mc_interface.c ****   *         user .
 959:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 960:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
 961:Src/mc_interface.c ****   */
 962:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle)
 963:Src/mc_interface.c **** {
 1681              		.loc 1 963 1 is_stmt 1 view -0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 0
 1684              		@ frame_needed = 0, uses_anonymous_args = 0
 1685              		@ link register save eliminated.
 964:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 965:Src/mc_interface.c ****   uint16_t retVal = 0;
 966:Src/mc_interface.c **** 
 967:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 968:Src/mc_interface.c ****   {
 969:Src/mc_interface.c ****     /* Nothing to do */
 970:Src/mc_interface.c ****   }
 971:Src/mc_interface.c ****   else
 972:Src/mc_interface.c ****   {
 973:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
 974:Src/mc_interface.c ****   }
 975:Src/mc_interface.c ****   return (retVal);
 976:Src/mc_interface.c **** #else
 977:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1686              		.loc 1 977 3 view .LVU458
 978:Src/mc_interface.c **** #endif
 979:Src/mc_interface.c **** }
 1687              		.loc 1 979 1 is_stmt 0 view .LVU459
ARM GAS  /tmp/ccZYtsq1.s 			page 50


 1688 0000 C08B     		ldrh	r0, [r0, #30]
 1689              	.LVL143:
 1690              		.loc 1 979 1 view .LVU460
 1691 0002 7047     		bx	lr
 1692              		.cfi_endproc
 1693              	.LFE1467:
 1695              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1696              		.align	1
 1697              		.weak	MCI_GetLastRampFinalSpeed_F
 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv4-sp-d16
 1703              	MCI_GetLastRampFinalSpeed_F:
 1704              	.LVL144:
 1705              	.LFB1468:
 980:Src/mc_interface.c **** 
 981:Src/mc_interface.c **** /**
 982:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
 983:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 984:Src/mc_interface.c ****   * @retval float last ramp final speed sent by the user expressed in rpm.
 985:Src/mc_interface.c ****   */
 986:Src/mc_interface.c **** __weak float MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle)
 987:Src/mc_interface.c **** {
 1706              		.loc 1 987 1 is_stmt 1 view -0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 0
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710              		@ link register save eliminated.
 988:Src/mc_interface.c ****   float RetVal = 0.0;
 1711              		.loc 1 988 3 view .LVU462
 989:Src/mc_interface.c **** 
 990:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1712              		.loc 1 990 3 view .LVU463
 1713              		.loc 1 990 6 is_stmt 0 view .LVU464
 1714 0000 48B1     		cbz	r0, .L116
 991:Src/mc_interface.c ****   {
 992:Src/mc_interface.c ****     /* Nothing to do */
 993:Src/mc_interface.c ****   }
 994:Src/mc_interface.c ****   else
 995:Src/mc_interface.c ****   {
 996:Src/mc_interface.c ****     RetVal = (float)((pHandle->hFinalSpeed * U_RPM) / SPEED_UNIT);
 1715              		.loc 1 996 5 is_stmt 1 view .LVU465
 1716              		.loc 1 996 30 is_stmt 0 view .LVU466
 1717 0002 B0F90E30 		ldrsh	r3, [r0, #14]
 1718              		.loc 1 996 53 view .LVU467
 1719 0006 03EB4303 		add	r3, r3, r3, lsl #1
 1720 000a 5B00     		lsls	r3, r3, #1
 1721              		.loc 1 996 12 view .LVU468
 1722 000c 07EE903A 		vmov	s15, r3	@ int
 1723 0010 B8EEE70A 		vcvt.f32.s32	s0, s15
 1724              	.LVL145:
 1725              		.loc 1 996 12 view .LVU469
 1726 0014 7047     		bx	lr
 1727              	.LVL146:
 1728              	.L116:
 988:Src/mc_interface.c **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 51


 1729              		.loc 1 988 9 view .LVU470
 1730 0016 9FED010A 		vldr.32	s0, .L117
 997:Src/mc_interface.c ****   }
 998:Src/mc_interface.c ****   return (RetVal);
 1731              		.loc 1 998 3 is_stmt 1 view .LVU471
 999:Src/mc_interface.c **** }
 1732              		.loc 1 999 1 is_stmt 0 view .LVU472
 1733 001a 7047     		bx	lr
 1734              	.L118:
 1735              		.align	2
 1736              	.L117:
 1737 001c 00000000 		.word	0
 1738              		.cfi_endproc
 1739              	.LFE1468:
 1741              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1742              		.align	1
 1743              		.weak	MCI_RampCompleted
 1744              		.syntax unified
 1745              		.thumb
 1746              		.thumb_func
 1747              		.fpu fpv4-sp-d16
 1749              	MCI_RampCompleted:
 1750              	.LVL147:
 1751              	.LFB1469:
1000:Src/mc_interface.c **** 
1001:Src/mc_interface.c **** /**
1002:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
1003:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1004:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
1005:Src/mc_interface.c ****   */
1006:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
1007:Src/mc_interface.c **** {
 1752              		.loc 1 1007 1 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756              		.loc 1 1007 1 is_stmt 0 view .LVU474
 1757 0000 10B5     		push	{r4, lr}
 1758              		.cfi_def_cfa_offset 8
 1759              		.cfi_offset 4, -8
 1760              		.cfi_offset 14, -4
 1761 0002 0446     		mov	r4, r0
1008:Src/mc_interface.c ****   bool retVal = false;
 1762              		.loc 1 1008 3 is_stmt 1 view .LVU475
 1763              	.LVL148:
1009:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1010:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1011:Src/mc_interface.c ****   {
1012:Src/mc_interface.c ****     /* Nothing to do */
1013:Src/mc_interface.c ****   }
1014:Src/mc_interface.c ****   else
1015:Src/mc_interface.c ****   {
1016:Src/mc_interface.c **** #endif
1017:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1764              		.loc 1 1017 5 view .LVU476
 1765              		.loc 1 1017 16 is_stmt 0 view .LVU477
 1766 0004 FFF7FEFF 		bl	MCI_GetSTMState
ARM GAS  /tmp/ccZYtsq1.s 			page 52


 1767              	.LVL149:
 1768              		.loc 1 1017 8 view .LVU478
 1769 0008 0628     		cmp	r0, #6
 1770 000a 01D0     		beq	.L123
1008:Src/mc_interface.c ****   bool retVal = false;
 1771              		.loc 1 1008 8 view .LVU479
 1772 000c 0020     		movs	r0, #0
 1773              	.LVL150:
 1774              	.L120:
1018:Src/mc_interface.c ****     {
1019:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
1020:Src/mc_interface.c ****     }
1021:Src/mc_interface.c ****     else
1022:Src/mc_interface.c ****     {
1023:Src/mc_interface.c ****       /* Nothing to do */
1024:Src/mc_interface.c ****     }
 1775              		.loc 1 1024 5 is_stmt 1 view .LVU480
1025:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1026:Src/mc_interface.c ****   }
1027:Src/mc_interface.c **** #endif
1028:Src/mc_interface.c ****   return (retVal);
 1776              		.loc 1 1028 3 view .LVU481
1029:Src/mc_interface.c **** }
 1777              		.loc 1 1029 1 is_stmt 0 view .LVU482
 1778 000e 10BD     		pop	{r4, pc}
 1779              	.LVL151:
 1780              	.L123:
1019:Src/mc_interface.c ****     }
 1781              		.loc 1 1019 7 is_stmt 1 view .LVU483
1019:Src/mc_interface.c ****     }
 1782              		.loc 1 1019 16 is_stmt 0 view .LVU484
 1783 0010 2068     		ldr	r0, [r4]
 1784 0012 FFF7FEFF 		bl	STC_RampCompleted
 1785              	.LVL152:
1019:Src/mc_interface.c ****     }
 1786              		.loc 1 1019 16 view .LVU485
 1787 0016 FAE7     		b	.L120
 1788              		.cfi_endproc
 1789              	.LFE1469:
 1791              		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1792              		.align	1
 1793              		.weak	MCI_StopSpeedRamp
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1797              		.fpu fpv4-sp-d16
 1799              	MCI_StopSpeedRamp:
 1800              	.LVL153:
 1801              	.LFB1470:
1030:Src/mc_interface.c **** 
1031:Src/mc_interface.c **** /**
1032:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
1033:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1034:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
1035:Src/mc_interface.c ****   *
1036:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
1037:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
ARM GAS  /tmp/ccZYtsq1.s 			page 53


1038:Src/mc_interface.c ****   */
1039:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
1040:Src/mc_interface.c **** {
 1802              		.loc 1 1040 1 is_stmt 1 view -0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 1806              		.loc 1 1040 1 is_stmt 0 view .LVU487
 1807 0000 08B5     		push	{r3, lr}
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 3, -8
 1810              		.cfi_offset 14, -4
1041:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1042:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
1043:Src/mc_interface.c **** #else
1044:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1811              		.loc 1 1044 3 is_stmt 1 view .LVU488
 1812              		.loc 1 1044 11 is_stmt 0 view .LVU489
 1813 0002 0068     		ldr	r0, [r0]
 1814              	.LVL154:
 1815              		.loc 1 1044 11 view .LVU490
 1816 0004 FFF7FEFF 		bl	STC_StopSpeedRamp
 1817              	.LVL155:
1045:Src/mc_interface.c **** #endif
1046:Src/mc_interface.c **** }
 1818              		.loc 1 1046 1 view .LVU491
 1819 0008 08BD     		pop	{r3, pc}
 1820              		.cfi_endproc
 1821              	.LFE1470:
 1823              		.section	.text.MCI_StopRamp,"ax",%progbits
 1824              		.align	1
 1825              		.weak	MCI_StopRamp
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1829              		.fpu fpv4-sp-d16
 1831              	MCI_StopRamp:
 1832              	.LVL156:
 1833              	.LFB1471:
1047:Src/mc_interface.c **** 
1048:Src/mc_interface.c **** /**
1049:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
1050:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1051:Src/mc_interface.c ****   */
1052:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
1053:Src/mc_interface.c **** {
 1834              		.loc 1 1053 1 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		.loc 1 1053 1 is_stmt 0 view .LVU493
 1839 0000 08B5     		push	{r3, lr}
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 3, -8
 1842              		.cfi_offset 14, -4
1054:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1055:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccZYtsq1.s 			page 54


1056:Src/mc_interface.c ****   {
1057:Src/mc_interface.c ****     /* Nothing to do */
1058:Src/mc_interface.c ****   }
1059:Src/mc_interface.c ****   else
1060:Src/mc_interface.c ****   {
1061:Src/mc_interface.c **** #endif
1062:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1843              		.loc 1 1062 5 is_stmt 1 view .LVU494
 1844 0002 0068     		ldr	r0, [r0]
 1845              	.LVL157:
 1846              		.loc 1 1062 5 is_stmt 0 view .LVU495
 1847 0004 FFF7FEFF 		bl	STC_StopRamp
 1848              	.LVL158:
1063:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1064:Src/mc_interface.c ****   }
1065:Src/mc_interface.c **** #endif
1066:Src/mc_interface.c **** }
 1849              		.loc 1 1066 1 view .LVU496
 1850 0008 08BD     		pop	{r3, pc}
 1851              		.cfi_endproc
 1852              	.LFE1471:
 1854              		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1855              		.align	1
 1856              		.weak	MCI_GetSpdSensorReliability
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	MCI_GetSpdSensorReliability:
 1863              	.LVL159:
 1864              	.LFB1472:
1067:Src/mc_interface.c **** 
1068:Src/mc_interface.c **** /**
1069:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1070:Src/mc_interface.c ****   *         actually used for reference frame transformation
1071:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1072:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1073:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1074:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1075:Src/mc_interface.c ****   */
1076:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1077:Src/mc_interface.c **** {
 1865              		.loc 1 1077 1 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 0
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 1869              		.loc 1 1077 1 is_stmt 0 view .LVU498
 1870 0000 08B5     		push	{r3, lr}
 1871              		.cfi_def_cfa_offset 8
 1872              		.cfi_offset 3, -8
 1873              		.cfi_offset 14, -4
1078:Src/mc_interface.c ****   bool status;
 1874              		.loc 1 1078 3 is_stmt 1 view .LVU499
1079:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1080:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1081:Src/mc_interface.c ****   {
1082:Src/mc_interface.c ****     status = false;
ARM GAS  /tmp/ccZYtsq1.s 			page 55


1083:Src/mc_interface.c ****   }
1084:Src/mc_interface.c ****   else
1085:Src/mc_interface.c ****   {
1086:Src/mc_interface.c **** #endif
1087:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1875              		.loc 1 1087 5 view .LVU500
 1876              		.loc 1 1087 43 is_stmt 0 view .LVU501
 1877 0002 0068     		ldr	r0, [r0]
 1878              	.LVL160:
 1879              		.loc 1 1087 43 view .LVU502
 1880 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1881              	.LVL161:
1088:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1882              		.loc 1 1088 5 is_stmt 1 view .LVU503
 1883              		.loc 1 1088 14 is_stmt 0 view .LVU504
 1884 0008 FFF7FEFF 		bl	SPD_Check
 1885              	.LVL162:
1089:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1090:Src/mc_interface.c ****   }
1091:Src/mc_interface.c **** #endif
1092:Src/mc_interface.c **** 
1093:Src/mc_interface.c ****   return (status);
 1886              		.loc 1 1093 3 is_stmt 1 view .LVU505
1094:Src/mc_interface.c **** }
 1887              		.loc 1 1094 1 is_stmt 0 view .LVU506
 1888 000c 08BD     		pop	{r3, pc}
 1889              		.cfi_endproc
 1890              	.LFE1472:
 1892              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1893              		.align	1
 1894              		.weak	MCI_GetAvrgMecSpeedUnit
 1895              		.syntax unified
 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv4-sp-d16
 1900              	MCI_GetAvrgMecSpeedUnit:
 1901              	.LVL163:
 1902              	.LFB1473:
1095:Src/mc_interface.c **** 
1096:Src/mc_interface.c **** /**
1097:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1098:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
1099:Src/mc_interface.c ****   *         used by FOC algorithm
1100:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1101:Src/mc_interface.c ****   */
1102:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1103:Src/mc_interface.c **** {
 1903              		.loc 1 1103 1 is_stmt 1 view -0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              		.loc 1 1103 1 is_stmt 0 view .LVU508
 1908 0000 08B5     		push	{r3, lr}
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 3, -8
 1911              		.cfi_offset 14, -4
1104:Src/mc_interface.c ****   int16_t temp_speed;
ARM GAS  /tmp/ccZYtsq1.s 			page 56


 1912              		.loc 1 1104 3 is_stmt 1 view .LVU509
1105:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1106:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1107:Src/mc_interface.c ****   {
1108:Src/mc_interface.c ****     temp_speed = 0;
1109:Src/mc_interface.c ****   }
1110:Src/mc_interface.c ****   else
1111:Src/mc_interface.c ****   {
1112:Src/mc_interface.c **** #endif
1113:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1913              		.loc 1 1113 5 view .LVU510
 1914              		.loc 1 1113 44 is_stmt 0 view .LVU511
 1915 0002 0068     		ldr	r0, [r0]
 1916              	.LVL164:
 1917              		.loc 1 1113 44 view .LVU512
 1918 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1919              	.LVL165:
1114:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1920              		.loc 1 1114 5 is_stmt 1 view .LVU513
 1921              		.loc 1 1114 18 is_stmt 0 view .LVU514
 1922 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1923              	.LVL166:
1115:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1116:Src/mc_interface.c ****   }
1117:Src/mc_interface.c **** #endif
1118:Src/mc_interface.c ****   return (temp_speed);
 1924              		.loc 1 1118 3 is_stmt 1 view .LVU515
1119:Src/mc_interface.c **** }
 1925              		.loc 1 1119 1 is_stmt 0 view .LVU516
 1926 000c 08BD     		pop	{r3, pc}
 1927              		.cfi_endproc
 1928              	.LFE1473:
 1930              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1931              		.align	1
 1932              		.weak	MCI_GetAvrgMecSpeed_F
 1933              		.syntax unified
 1934              		.thumb
 1935              		.thumb_func
 1936              		.fpu fpv4-sp-d16
 1938              	MCI_GetAvrgMecSpeed_F:
 1939              	.LVL167:
 1940              	.LFB1474:
1120:Src/mc_interface.c **** 
1121:Src/mc_interface.c **** /**
1122:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
1123:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1124:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1125:Src/mc_interface.c ****   */
1126:Src/mc_interface.c **** __weak float MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1127:Src/mc_interface.c **** {
 1941              		.loc 1 1127 1 is_stmt 1 view -0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              		.loc 1 1127 1 is_stmt 0 view .LVU518
 1946 0000 08B5     		push	{r3, lr}
 1947              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccZYtsq1.s 			page 57


 1948              		.cfi_offset 3, -8
 1949              		.cfi_offset 14, -4
1128:Src/mc_interface.c ****   SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1950              		.loc 1 1128 3 is_stmt 1 view .LVU519
 1951              		.loc 1 1128 41 is_stmt 0 view .LVU520
 1952 0002 0068     		ldr	r0, [r0]
 1953              	.LVL168:
 1954              		.loc 1 1128 41 view .LVU521
 1955 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1956              	.LVL169:
1129:Src/mc_interface.c **** 
1130:Src/mc_interface.c ****   return ((float)((SPD_GetAvrgMecSpeedUnit(SpeedSensor) * U_RPM) / SPEED_UNIT));
 1957              		.loc 1 1130 3 is_stmt 1 view .LVU522
 1958              		.loc 1 1130 20 is_stmt 0 view .LVU523
 1959 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1960              	.LVL170:
 1961              		.loc 1 1130 66 view .LVU524
 1962 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1963 0010 4300     		lsls	r3, r0, #1
 1964 0012 00EE103A 		vmov	s0, r3	@ int
1131:Src/mc_interface.c **** }
 1965              		.loc 1 1131 1 view .LVU525
 1966 0016 B8EEC00A 		vcvt.f32.s32	s0, s0
 1967 001a 08BD     		pop	{r3, pc}
 1968              		.cfi_endproc
 1969              	.LFE1474:
 1971              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1972              		.align	1
 1973              		.weak	MCI_GetMecSpeedRefUnit
 1974              		.syntax unified
 1975              		.thumb
 1976              		.thumb_func
 1977              		.fpu fpv4-sp-d16
 1979              	MCI_GetMecSpeedRefUnit:
 1980              	.LVL171:
 1981              	.LFB1475:
1132:Src/mc_interface.c **** 
1133:Src/mc_interface.c **** /**
1134:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1135:Src/mc_interface.c ****   *
1136:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1137:Src/mc_interface.c ****   *
1138:Src/mc_interface.c ****   */
1139:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1140:Src/mc_interface.c **** {
 1982              		.loc 1 1140 1 is_stmt 1 view -0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		.loc 1 1140 1 is_stmt 0 view .LVU527
 1987 0000 08B5     		push	{r3, lr}
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 3, -8
 1990              		.cfi_offset 14, -4
1141:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1142:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1143:Src/mc_interface.c **** #else
ARM GAS  /tmp/ccZYtsq1.s 			page 58


1144:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1991              		.loc 1 1144 3 is_stmt 1 view .LVU528
 1992              		.loc 1 1144 11 is_stmt 0 view .LVU529
 1993 0002 0068     		ldr	r0, [r0]
 1994              	.LVL172:
 1995              		.loc 1 1144 11 view .LVU530
 1996 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1997              	.LVL173:
1145:Src/mc_interface.c **** #endif
1146:Src/mc_interface.c **** }
 1998              		.loc 1 1146 1 view .LVU531
 1999 0008 08BD     		pop	{r3, pc}
 2000              		.cfi_endproc
 2001              	.LFE1475:
 2003              		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 2004              		.align	1
 2005              		.weak	MCI_GetMecSpeedRef_F
 2006              		.syntax unified
 2007              		.thumb
 2008              		.thumb_func
 2009              		.fpu fpv4-sp-d16
 2011              	MCI_GetMecSpeedRef_F:
 2012              	.LVL174:
 2013              	.LFB1476:
1147:Src/mc_interface.c **** 
1148:Src/mc_interface.c **** /**
1149:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1150:Src/mc_interface.c ****   *
1151:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1152:Src/mc_interface.c ****   *
1153:Src/mc_interface.c ****   */
1154:Src/mc_interface.c **** __weak float MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1155:Src/mc_interface.c **** {
 2014              		.loc 1 1155 1 is_stmt 1 view -0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 2018              		.loc 1 1155 1 is_stmt 0 view .LVU533
 2019 0000 08B5     		push	{r3, lr}
 2020              		.cfi_def_cfa_offset 8
 2021              		.cfi_offset 3, -8
 2022              		.cfi_offset 14, -4
1156:Src/mc_interface.c ****   return ((float)((STC_GetMecSpeedRefUnit( pHandle->pSTC ) * U_RPM) / SPEED_UNIT));
 2023              		.loc 1 1156 3 is_stmt 1 view .LVU534
 2024              		.loc 1 1156 20 is_stmt 0 view .LVU535
 2025 0002 0068     		ldr	r0, [r0]
 2026              	.LVL175:
 2027              		.loc 1 1156 20 view .LVU536
 2028 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 2029              	.LVL176:
 2030              		.loc 1 1156 69 view .LVU537
 2031 0008 00EB4000 		add	r0, r0, r0, lsl #1
 2032 000c 4300     		lsls	r3, r0, #1
 2033 000e 00EE103A 		vmov	s0, r3	@ int
1157:Src/mc_interface.c **** }
 2034              		.loc 1 1157 1 view .LVU538
 2035 0012 B8EEC00A 		vcvt.f32.s32	s0, s0
ARM GAS  /tmp/ccZYtsq1.s 			page 59


 2036 0016 08BD     		pop	{r3, pc}
 2037              		.cfi_endproc
 2038              	.LFE1476:
 2040              		.section	.text.MCI_GetIab,"ax",%progbits
 2041              		.align	1
 2042              		.weak	MCI_GetIab
 2043              		.syntax unified
 2044              		.thumb
 2045              		.thumb_func
 2046              		.fpu fpv4-sp-d16
 2048              	MCI_GetIab:
 2049              	.LVL177:
 2050              	.LFB1477:
1158:Src/mc_interface.c **** 
1159:Src/mc_interface.c **** /**
1160:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1161:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1162:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1163:Src/mc_interface.c ****   */
1164:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
1165:Src/mc_interface.c **** {
 2051              		.loc 1 1165 1 is_stmt 1 view -0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 8
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 2055              		@ link register save eliminated.
 2056              		.loc 1 1165 1 is_stmt 0 view .LVU540
 2057 0000 82B0     		sub	sp, sp, #8
 2058              		.cfi_def_cfa_offset 8
1166:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1167:Src/mc_interface.c ****   ab_t tempVal;
1168:Src/mc_interface.c **** 
1169:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1170:Src/mc_interface.c ****   {
1171:Src/mc_interface.c ****     tempVal.a = 0;
1172:Src/mc_interface.c ****     tempVal.b = 0;
1173:Src/mc_interface.c ****   }
1174:Src/mc_interface.c ****   else
1175:Src/mc_interface.c ****   {
1176:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1177:Src/mc_interface.c ****   }
1178:Src/mc_interface.c ****   return (tempVal);
1179:Src/mc_interface.c **** #else
1180:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 2059              		.loc 1 1180 3 is_stmt 1 view .LVU541
 2060              		.loc 1 1180 18 is_stmt 0 view .LVU542
 2061 0002 4368     		ldr	r3, [r0, #4]
 2062              		.loc 1 1180 28 view .LVU543
 2063 0004 1868     		ldr	r0, [r3]	@ unaligned
 2064              	.LVL178:
 2065              		.loc 1 1180 28 view .LVU544
 2066 0006 0023     		movs	r3, #0
 2067 0008 82B2     		uxth	r2, r0
 2068 000a 62F30F03 		bfi	r3, r2, #0, #16
 2069 000e 000C     		lsrs	r0, r0, #16
 2070 0010 60F31F43 		bfi	r3, r0, #16, #16
1181:Src/mc_interface.c **** #endif
ARM GAS  /tmp/ccZYtsq1.s 			page 60


1182:Src/mc_interface.c **** }
 2071              		.loc 1 1182 1 view .LVU545
 2072 0014 1846     		mov	r0, r3
 2073 0016 02B0     		add	sp, sp, #8
 2074              		.cfi_def_cfa_offset 0
 2075              		@ sp needed
 2076 0018 7047     		bx	lr
 2077              		.cfi_endproc
 2078              	.LFE1477:
 2080              		.global	__aeabi_f2d
 2081              		.global	__aeabi_dmul
 2082              		.global	__aeabi_d2f
 2083              		.section	.text.MCI_GetIab_F,"ax",%progbits
 2084              		.align	1
 2085              		.weak	MCI_GetIab_F
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2089              		.fpu fpv4-sp-d16
 2091              	MCI_GetIab_F:
 2092              	.LVL179:
 2093              	.LFB1478:
1183:Src/mc_interface.c **** 
1184:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle)
1185:Src/mc_interface.c **** {
 2094              		.loc 1 1185 1 is_stmt 1 view -0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 24
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098              		.loc 1 1185 1 is_stmt 0 view .LVU547
 2099 0000 10B5     		push	{r4, lr}
 2100              		.cfi_def_cfa_offset 8
 2101              		.cfi_offset 4, -8
 2102              		.cfi_offset 14, -4
 2103 0002 86B0     		sub	sp, sp, #24
 2104              		.cfi_def_cfa_offset 32
1186:Src/mc_interface.c ****   ab_f_t Iab;
 2105              		.loc 1 1186 3 is_stmt 1 view .LVU548
1187:Src/mc_interface.c **** 
1188:Src/mc_interface.c ****   Iab.a = (float)((float)pHandle->pFOCVars->Iab.a * CURRENT_CONV_FACTOR_INV);
 2106              		.loc 1 1188 3 view .LVU549
 2107              		.loc 1 1188 33 is_stmt 0 view .LVU550
 2108 0004 4468     		ldr	r4, [r0, #4]
 2109              		.loc 1 1188 48 view .LVU551
 2110 0006 B4F90000 		ldrsh	r0, [r4]
 2111              	.LVL180:
 2112              		.loc 1 1188 19 view .LVU552
 2113 000a 07EE900A 		vmov	s15, r0	@ int
 2114 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2115 0012 17EE900A 		vmov	r0, s15
 2116 0016 FFF7FEFF 		bl	__aeabi_f2d
 2117              	.LVL181:
 2118              		.loc 1 1188 51 view .LVU553
 2119 001a 13A3     		adr	r3, .L142
 2120 001c D3E90023 		ldrd	r2, [r3]
 2121 0020 FFF7FEFF 		bl	__aeabi_dmul
 2122              	.LVL182:
ARM GAS  /tmp/ccZYtsq1.s 			page 61


 2123              		.loc 1 1188 11 view .LVU554
 2124 0024 FFF7FEFF 		bl	__aeabi_d2f
 2125              	.LVL183:
 2126              		.loc 1 1188 9 view .LVU555
 2127 0028 0290     		str	r0, [sp, #8]	@ float
1189:Src/mc_interface.c ****   Iab.b = (float)((float)pHandle->pFOCVars->Iab.b * CURRENT_CONV_FACTOR_INV);
 2128              		.loc 1 1189 3 is_stmt 1 view .LVU556
 2129              		.loc 1 1189 48 is_stmt 0 view .LVU557
 2130 002a B4F90200 		ldrsh	r0, [r4, #2]
 2131              		.loc 1 1189 19 view .LVU558
 2132 002e 07EE900A 		vmov	s15, r0	@ int
 2133 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2134 0036 17EE900A 		vmov	r0, s15
 2135 003a FFF7FEFF 		bl	__aeabi_f2d
 2136              	.LVL184:
 2137              		.loc 1 1189 51 view .LVU559
 2138 003e 0AA3     		adr	r3, .L142
 2139 0040 D3E90023 		ldrd	r2, [r3]
 2140 0044 FFF7FEFF 		bl	__aeabi_dmul
 2141              	.LVL185:
 2142              		.loc 1 1189 11 view .LVU560
 2143 0048 FFF7FEFF 		bl	__aeabi_d2f
 2144              	.LVL186:
 2145              		.loc 1 1189 9 view .LVU561
 2146 004c 0390     		str	r0, [sp, #12]	@ float
1190:Src/mc_interface.c **** 
1191:Src/mc_interface.c ****   return (Iab);
 2147              		.loc 1 1191 3 is_stmt 1 view .LVU562
 2148              		.loc 1 1191 10 is_stmt 0 view .LVU563
 2149 004e 0399     		ldr	r1, [sp, #12]
 2150 0050 0298     		ldr	r0, [sp, #8]
 2151 0052 06AB     		add	r3, sp, #24
 2152 0054 03E90300 		stmdb	r3, {r0, r1}
1192:Src/mc_interface.c **** 
1193:Src/mc_interface.c **** }
 2153              		.loc 1 1193 1 view .LVU564
 2154 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2155 005c DDED050A 		vldr.32	s1, [sp, #20]
 2156 0060 06B0     		add	sp, sp, #24
 2157              		.cfi_def_cfa_offset 8
 2158              		@ sp needed
 2159 0062 10BD     		pop	{r4, pc}
 2160              	.L143:
 2161 0064 AFF30080 		.align	3
 2162              	.L142:
 2163 0068 A59F4B31 		.word	827039653
 2164 006c 68165E3F 		.word	1063130728
 2165              		.cfi_endproc
 2166              	.LFE1478:
 2168              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 2169              		.align	1
 2170              		.weak	MCI_GetIalphabeta
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2174              		.fpu fpv4-sp-d16
 2176              	MCI_GetIalphabeta:
ARM GAS  /tmp/ccZYtsq1.s 			page 62


 2177              	.LVL187:
 2178              	.LFB1479:
1194:Src/mc_interface.c **** 
1195:Src/mc_interface.c **** /**
1196:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
1197:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1198:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1199:Src/mc_interface.c ****   */
1200:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
1201:Src/mc_interface.c **** {
 2179              		.loc 1 1201 1 is_stmt 1 view -0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 8
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
 2184              		.loc 1 1201 1 is_stmt 0 view .LVU566
 2185 0000 82B0     		sub	sp, sp, #8
 2186              		.cfi_def_cfa_offset 8
1202:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1203:Src/mc_interface.c ****   alphabeta_t tempVal;
1204:Src/mc_interface.c **** 
1205:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1206:Src/mc_interface.c ****   {
1207:Src/mc_interface.c ****     tempVal.alpha = 0;
1208:Src/mc_interface.c ****     tempVal.beta = 0;
1209:Src/mc_interface.c ****   }
1210:Src/mc_interface.c ****   else
1211:Src/mc_interface.c ****   {
1212:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1213:Src/mc_interface.c ****   }
1214:Src/mc_interface.c ****   return (tempVal);
1215:Src/mc_interface.c **** #else
1216:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 2187              		.loc 1 1216 3 is_stmt 1 view .LVU567
 2188              		.loc 1 1216 18 is_stmt 0 view .LVU568
 2189 0002 4368     		ldr	r3, [r0, #4]
 2190              		.loc 1 1216 28 view .LVU569
 2191 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2192              	.LVL188:
 2193              		.loc 1 1216 28 view .LVU570
 2194 0006 0023     		movs	r3, #0
 2195 0008 82B2     		uxth	r2, r0
 2196 000a 62F30F03 		bfi	r3, r2, #0, #16
 2197 000e 000C     		lsrs	r0, r0, #16
 2198 0010 60F31F43 		bfi	r3, r0, #16, #16
1217:Src/mc_interface.c **** #endif
1218:Src/mc_interface.c **** }
 2199              		.loc 1 1218 1 view .LVU571
 2200 0014 1846     		mov	r0, r3
 2201 0016 02B0     		add	sp, sp, #8
 2202              		.cfi_def_cfa_offset 0
 2203              		@ sp needed
 2204 0018 7047     		bx	lr
 2205              		.cfi_endproc
 2206              	.LFE1479:
 2208              		.section	.text.MCI_GetIqd,"ax",%progbits
 2209              		.align	1
ARM GAS  /tmp/ccZYtsq1.s 			page 63


 2210              		.weak	MCI_GetIqd
 2211              		.syntax unified
 2212              		.thumb
 2213              		.thumb_func
 2214              		.fpu fpv4-sp-d16
 2216              	MCI_GetIqd:
 2217              	.LVL189:
 2218              	.LFB1480:
1219:Src/mc_interface.c **** 
1220:Src/mc_interface.c **** /**
1221:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1222:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1223:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1224:Src/mc_interface.c ****   */
1225:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
1226:Src/mc_interface.c **** {
 2219              		.loc 1 1226 1 is_stmt 1 view -0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 8
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223              		@ link register save eliminated.
 2224              		.loc 1 1226 1 is_stmt 0 view .LVU573
 2225 0000 82B0     		sub	sp, sp, #8
 2226              		.cfi_def_cfa_offset 8
1227:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1228:Src/mc_interface.c ****   qd_t tempVal;
1229:Src/mc_interface.c **** 
1230:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1231:Src/mc_interface.c ****   {
1232:Src/mc_interface.c ****     tempVal.q = 0;
1233:Src/mc_interface.c ****     tempVal.d = 0;
1234:Src/mc_interface.c ****   }
1235:Src/mc_interface.c ****   else
1236:Src/mc_interface.c ****   {
1237:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1238:Src/mc_interface.c ****   }
1239:Src/mc_interface.c ****   return (tempVal);
1240:Src/mc_interface.c **** #else
1241:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 2227              		.loc 1 1241 3 is_stmt 1 view .LVU574
 2228              		.loc 1 1241 18 is_stmt 0 view .LVU575
 2229 0002 4368     		ldr	r3, [r0, #4]
 2230              		.loc 1 1241 28 view .LVU576
 2231 0004 D868     		ldr	r0, [r3, #12]	@ unaligned
 2232              	.LVL190:
 2233              		.loc 1 1241 28 view .LVU577
 2234 0006 0023     		movs	r3, #0
 2235 0008 82B2     		uxth	r2, r0
 2236 000a 62F30F03 		bfi	r3, r2, #0, #16
 2237 000e 000C     		lsrs	r0, r0, #16
 2238 0010 60F31F43 		bfi	r3, r0, #16, #16
1242:Src/mc_interface.c **** #endif
1243:Src/mc_interface.c **** }
 2239              		.loc 1 1243 1 view .LVU578
 2240 0014 1846     		mov	r0, r3
 2241 0016 02B0     		add	sp, sp, #8
 2242              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccZYtsq1.s 			page 64


 2243              		@ sp needed
 2244 0018 7047     		bx	lr
 2245              		.cfi_endproc
 2246              	.LFE1480:
 2248              		.section	.text.MCI_GetIqd_F,"ax",%progbits
 2249              		.align	1
 2250              		.weak	MCI_GetIqd_F
 2251              		.syntax unified
 2252              		.thumb
 2253              		.thumb_func
 2254              		.fpu fpv4-sp-d16
 2256              	MCI_GetIqd_F:
 2257              	.LVL191:
 2258              	.LFB1481:
1244:Src/mc_interface.c **** 
1245:Src/mc_interface.c **** /**
1246:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float format
1247:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1248:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1249:Src/mc_interface.c ****   */
1250:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle)
1251:Src/mc_interface.c **** {
 2259              		.loc 1 1251 1 is_stmt 1 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 24
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 2263              		.loc 1 1251 1 is_stmt 0 view .LVU580
 2264 0000 10B5     		push	{r4, lr}
 2265              		.cfi_def_cfa_offset 8
 2266              		.cfi_offset 4, -8
 2267              		.cfi_offset 14, -4
 2268 0002 86B0     		sub	sp, sp, #24
 2269              		.cfi_def_cfa_offset 32
1252:Src/mc_interface.c ****   qd_f_t Iqd;
 2270              		.loc 1 1252 3 is_stmt 1 view .LVU581
1253:Src/mc_interface.c **** 
1254:Src/mc_interface.c ****   Iqd.d = (float)((float)pHandle->pFOCVars->Iqd.d * CURRENT_CONV_FACTOR_INV);
 2271              		.loc 1 1254 3 view .LVU582
 2272              		.loc 1 1254 33 is_stmt 0 view .LVU583
 2273 0004 4468     		ldr	r4, [r0, #4]
 2274              		.loc 1 1254 48 view .LVU584
 2275 0006 B4F90E00 		ldrsh	r0, [r4, #14]
 2276              	.LVL192:
 2277              		.loc 1 1254 19 view .LVU585
 2278 000a 07EE900A 		vmov	s15, r0	@ int
 2279 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2280 0012 17EE900A 		vmov	r0, s15
 2281 0016 FFF7FEFF 		bl	__aeabi_f2d
 2282              	.LVL193:
 2283              		.loc 1 1254 51 view .LVU586
 2284 001a 13A3     		adr	r3, .L150
 2285 001c D3E90023 		ldrd	r2, [r3]
 2286 0020 FFF7FEFF 		bl	__aeabi_dmul
 2287              	.LVL194:
 2288              		.loc 1 1254 11 view .LVU587
 2289 0024 FFF7FEFF 		bl	__aeabi_d2f
 2290              	.LVL195:
ARM GAS  /tmp/ccZYtsq1.s 			page 65


 2291              		.loc 1 1254 9 view .LVU588
 2292 0028 0390     		str	r0, [sp, #12]	@ float
1255:Src/mc_interface.c ****   Iqd.q = (float)((float)pHandle->pFOCVars->Iqd.q * CURRENT_CONV_FACTOR_INV);
 2293              		.loc 1 1255 3 is_stmt 1 view .LVU589
 2294              		.loc 1 1255 48 is_stmt 0 view .LVU590
 2295 002a B4F90C00 		ldrsh	r0, [r4, #12]
 2296              		.loc 1 1255 19 view .LVU591
 2297 002e 07EE900A 		vmov	s15, r0	@ int
 2298 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2299 0036 17EE900A 		vmov	r0, s15
 2300 003a FFF7FEFF 		bl	__aeabi_f2d
 2301              	.LVL196:
 2302              		.loc 1 1255 51 view .LVU592
 2303 003e 0AA3     		adr	r3, .L150
 2304 0040 D3E90023 		ldrd	r2, [r3]
 2305 0044 FFF7FEFF 		bl	__aeabi_dmul
 2306              	.LVL197:
 2307              		.loc 1 1255 11 view .LVU593
 2308 0048 FFF7FEFF 		bl	__aeabi_d2f
 2309              	.LVL198:
 2310              		.loc 1 1255 9 view .LVU594
 2311 004c 0290     		str	r0, [sp, #8]	@ float
1256:Src/mc_interface.c **** 
1257:Src/mc_interface.c ****   return (Iqd);
 2312              		.loc 1 1257 3 is_stmt 1 view .LVU595
 2313              		.loc 1 1257 10 is_stmt 0 view .LVU596
 2314 004e 0399     		ldr	r1, [sp, #12]
 2315 0050 0298     		ldr	r0, [sp, #8]
 2316 0052 06AB     		add	r3, sp, #24
 2317 0054 03E90300 		stmdb	r3, {r0, r1}
1258:Src/mc_interface.c **** }
 2318              		.loc 1 1258 1 view .LVU597
 2319 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2320 005c DDED050A 		vldr.32	s1, [sp, #20]
 2321 0060 06B0     		add	sp, sp, #24
 2322              		.cfi_def_cfa_offset 8
 2323              		@ sp needed
 2324 0062 10BD     		pop	{r4, pc}
 2325              	.L151:
 2326 0064 AFF30080 		.align	3
 2327              	.L150:
 2328 0068 A59F4B31 		.word	827039653
 2329 006c 68165E3F 		.word	1063130728
 2330              		.cfi_endproc
 2331              	.LFE1481:
 2333              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2334              		.align	1
 2335              		.weak	MCI_GetIqdHF
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2339              		.fpu fpv4-sp-d16
 2341              	MCI_GetIqdHF:
 2342              	.LVL199:
 2343              	.LFB1482:
1259:Src/mc_interface.c **** 
1260:Src/mc_interface.c **** /**
ARM GAS  /tmp/ccZYtsq1.s 			page 66


1261:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1262:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1263:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1264:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1265:Src/mc_interface.c ****   */
1266:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle)
1267:Src/mc_interface.c **** {
 2344              		.loc 1 1267 1 is_stmt 1 view -0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 8
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349              		.loc 1 1267 1 is_stmt 0 view .LVU599
 2350 0000 82B0     		sub	sp, sp, #8
 2351              		.cfi_def_cfa_offset 8
1268:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1269:Src/mc_interface.c ****   qd_t tempVal;
1270:Src/mc_interface.c **** 
1271:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1272:Src/mc_interface.c ****   {
1273:Src/mc_interface.c ****     tempVal.q = 0;
1274:Src/mc_interface.c ****     tempVal.d = 0;
1275:Src/mc_interface.c ****   }
1276:Src/mc_interface.c ****   else
1277:Src/mc_interface.c ****   {
1278:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1279:Src/mc_interface.c ****   }
1280:Src/mc_interface.c ****   return (tempVal);
1281:Src/mc_interface.c **** #else
1282:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2352              		.loc 1 1282 3 is_stmt 1 view .LVU600
 2353              		.loc 1 1282 18 is_stmt 0 view .LVU601
 2354 0002 4368     		ldr	r3, [r0, #4]
 2355              		.loc 1 1282 28 view .LVU602
 2356 0004 9868     		ldr	r0, [r3, #8]	@ unaligned
 2357              	.LVL200:
 2358              		.loc 1 1282 28 view .LVU603
 2359 0006 0023     		movs	r3, #0
 2360 0008 82B2     		uxth	r2, r0
 2361 000a 62F30F03 		bfi	r3, r2, #0, #16
 2362 000e 000C     		lsrs	r0, r0, #16
 2363 0010 60F31F43 		bfi	r3, r0, #16, #16
1283:Src/mc_interface.c **** #endif
1284:Src/mc_interface.c **** }
 2364              		.loc 1 1284 1 view .LVU604
 2365 0014 1846     		mov	r0, r3
 2366 0016 02B0     		add	sp, sp, #8
 2367              		.cfi_def_cfa_offset 0
 2368              		@ sp needed
 2369 0018 7047     		bx	lr
 2370              		.cfi_endproc
 2371              	.LFE1482:
 2373              		.section	.text.MCI_GetIqdref,"ax",%progbits
 2374              		.align	1
 2375              		.weak	MCI_GetIqdref
 2376              		.syntax unified
 2377              		.thumb
ARM GAS  /tmp/ccZYtsq1.s 			page 67


 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	MCI_GetIqdref:
 2382              	.LVL201:
 2383              	.LFB1483:
1285:Src/mc_interface.c **** 
1286:Src/mc_interface.c **** /**
1287:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1288:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1289:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1290:Src/mc_interface.c ****   */
1291:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
1292:Src/mc_interface.c **** {
 2384              		.loc 1 1292 1 is_stmt 1 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 8
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 2388              		@ link register save eliminated.
 2389              		.loc 1 1292 1 is_stmt 0 view .LVU606
 2390 0000 82B0     		sub	sp, sp, #8
 2391              		.cfi_def_cfa_offset 8
1293:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1294:Src/mc_interface.c ****   qd_t tempVal;
1295:Src/mc_interface.c **** 
1296:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1297:Src/mc_interface.c ****   {
1298:Src/mc_interface.c ****     tempVal.q = 0;
1299:Src/mc_interface.c ****     tempVal.d = 0;
1300:Src/mc_interface.c ****   }
1301:Src/mc_interface.c ****   else
1302:Src/mc_interface.c ****   {
1303:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1304:Src/mc_interface.c ****   }
1305:Src/mc_interface.c ****   return (tempVal);
1306:Src/mc_interface.c **** #else
1307:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2392              		.loc 1 1307 3 is_stmt 1 view .LVU607
 2393              		.loc 1 1307 18 is_stmt 0 view .LVU608
 2394 0002 4368     		ldr	r3, [r0, #4]
 2395              		.loc 1 1307 28 view .LVU609
 2396 0004 1869     		ldr	r0, [r3, #16]	@ unaligned
 2397              	.LVL202:
 2398              		.loc 1 1307 28 view .LVU610
 2399 0006 0023     		movs	r3, #0
 2400 0008 82B2     		uxth	r2, r0
 2401 000a 62F30F03 		bfi	r3, r2, #0, #16
 2402 000e 000C     		lsrs	r0, r0, #16
 2403 0010 60F31F43 		bfi	r3, r0, #16, #16
1308:Src/mc_interface.c **** #endif
1309:Src/mc_interface.c **** }
 2404              		.loc 1 1309 1 view .LVU611
 2405 0014 1846     		mov	r0, r3
 2406 0016 02B0     		add	sp, sp, #8
 2407              		.cfi_def_cfa_offset 0
 2408              		@ sp needed
 2409 0018 7047     		bx	lr
 2410              		.cfi_endproc
ARM GAS  /tmp/ccZYtsq1.s 			page 68


 2411              	.LFE1483:
 2413              		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2414              		.align	1
 2415              		.weak	MCI_GetIqdref_F
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv4-sp-d16
 2421              	MCI_GetIqdref_F:
 2422              	.LVL203:
 2423              	.LFB1484:
1310:Src/mc_interface.c **** 
1311:Src/mc_interface.c **** /**
1312:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float format
1313:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1314:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1315:Src/mc_interface.c ****   */
1316:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle)
1317:Src/mc_interface.c **** {
 2424              		.loc 1 1317 1 is_stmt 1 view -0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 24
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428              		.loc 1 1317 1 is_stmt 0 view .LVU613
 2429 0000 10B5     		push	{r4, lr}
 2430              		.cfi_def_cfa_offset 8
 2431              		.cfi_offset 4, -8
 2432              		.cfi_offset 14, -4
 2433 0002 86B0     		sub	sp, sp, #24
 2434              		.cfi_def_cfa_offset 32
1318:Src/mc_interface.c ****   qd_f_t Iqdref;
 2435              		.loc 1 1318 3 is_stmt 1 view .LVU614
1319:Src/mc_interface.c **** 
1320:Src/mc_interface.c ****   Iqdref.d = (float)((float)pHandle->pFOCVars->Iqdref.d * CURRENT_CONV_FACTOR_INV);
 2436              		.loc 1 1320 3 view .LVU615
 2437              		.loc 1 1320 36 is_stmt 0 view .LVU616
 2438 0004 4468     		ldr	r4, [r0, #4]
 2439              		.loc 1 1320 54 view .LVU617
 2440 0006 B4F91200 		ldrsh	r0, [r4, #18]
 2441              	.LVL204:
 2442              		.loc 1 1320 22 view .LVU618
 2443 000a 07EE900A 		vmov	s15, r0	@ int
 2444 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2445 0012 17EE900A 		vmov	r0, s15
 2446 0016 FFF7FEFF 		bl	__aeabi_f2d
 2447              	.LVL205:
 2448              		.loc 1 1320 57 view .LVU619
 2449 001a 13A3     		adr	r3, .L158
 2450 001c D3E90023 		ldrd	r2, [r3]
 2451 0020 FFF7FEFF 		bl	__aeabi_dmul
 2452              	.LVL206:
 2453              		.loc 1 1320 14 view .LVU620
 2454 0024 FFF7FEFF 		bl	__aeabi_d2f
 2455              	.LVL207:
 2456              		.loc 1 1320 12 view .LVU621
 2457 0028 0390     		str	r0, [sp, #12]	@ float
1321:Src/mc_interface.c ****   Iqdref.q = (float)((float)pHandle->pFOCVars->Iqdref.q * CURRENT_CONV_FACTOR_INV);
ARM GAS  /tmp/ccZYtsq1.s 			page 69


 2458              		.loc 1 1321 3 is_stmt 1 view .LVU622
 2459              		.loc 1 1321 54 is_stmt 0 view .LVU623
 2460 002a B4F91000 		ldrsh	r0, [r4, #16]
 2461              		.loc 1 1321 22 view .LVU624
 2462 002e 07EE900A 		vmov	s15, r0	@ int
 2463 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2464 0036 17EE900A 		vmov	r0, s15
 2465 003a FFF7FEFF 		bl	__aeabi_f2d
 2466              	.LVL208:
 2467              		.loc 1 1321 57 view .LVU625
 2468 003e 0AA3     		adr	r3, .L158
 2469 0040 D3E90023 		ldrd	r2, [r3]
 2470 0044 FFF7FEFF 		bl	__aeabi_dmul
 2471              	.LVL209:
 2472              		.loc 1 1321 14 view .LVU626
 2473 0048 FFF7FEFF 		bl	__aeabi_d2f
 2474              	.LVL210:
 2475              		.loc 1 1321 12 view .LVU627
 2476 004c 0290     		str	r0, [sp, #8]	@ float
1322:Src/mc_interface.c **** 
1323:Src/mc_interface.c ****   return ( Iqdref );
 2477              		.loc 1 1323 3 is_stmt 1 view .LVU628
 2478              		.loc 1 1323 10 is_stmt 0 view .LVU629
 2479 004e 0399     		ldr	r1, [sp, #12]
 2480 0050 0298     		ldr	r0, [sp, #8]
 2481 0052 06AB     		add	r3, sp, #24
 2482 0054 03E90300 		stmdb	r3, {r0, r1}
1324:Src/mc_interface.c **** }
 2483              		.loc 1 1324 1 view .LVU630
 2484 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2485 005c DDED050A 		vldr.32	s1, [sp, #20]
 2486 0060 06B0     		add	sp, sp, #24
 2487              		.cfi_def_cfa_offset 8
 2488              		@ sp needed
 2489 0062 10BD     		pop	{r4, pc}
 2490              	.L159:
 2491 0064 AFF30080 		.align	3
 2492              	.L158:
 2493 0068 A59F4B31 		.word	827039653
 2494 006c 68165E3F 		.word	1063130728
 2495              		.cfi_endproc
 2496              	.LFE1484:
 2498              		.section	.text.MCI_GetVqd,"ax",%progbits
 2499              		.align	1
 2500              		.weak	MCI_GetVqd
 2501              		.syntax unified
 2502              		.thumb
 2503              		.thumb_func
 2504              		.fpu fpv4-sp-d16
 2506              	MCI_GetVqd:
 2507              	.LVL211:
 2508              	.LFB1485:
1325:Src/mc_interface.c **** 
1326:Src/mc_interface.c **** /**
1327:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1328:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1329:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
ARM GAS  /tmp/ccZYtsq1.s 			page 70


1330:Src/mc_interface.c ****   */
1331:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
1332:Src/mc_interface.c **** {
 2509              		.loc 1 1332 1 is_stmt 1 view -0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 8
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 2513              		@ link register save eliminated.
 2514              		.loc 1 1332 1 is_stmt 0 view .LVU632
 2515 0000 82B0     		sub	sp, sp, #8
 2516              		.cfi_def_cfa_offset 8
1333:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1334:Src/mc_interface.c ****   qd_t tempVal;
1335:Src/mc_interface.c **** 
1336:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1337:Src/mc_interface.c ****   {
1338:Src/mc_interface.c ****     tempVal.q = 0;
1339:Src/mc_interface.c ****     tempVal.d = 0;
1340:Src/mc_interface.c ****   }
1341:Src/mc_interface.c ****   else
1342:Src/mc_interface.c ****   {
1343:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1344:Src/mc_interface.c ****   }
1345:Src/mc_interface.c ****   return (tempVal);
1346:Src/mc_interface.c **** #else
1347:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2517              		.loc 1 1347 3 is_stmt 1 view .LVU633
 2518              		.loc 1 1347 18 is_stmt 0 view .LVU634
 2519 0002 4368     		ldr	r3, [r0, #4]
 2520              		.loc 1 1347 28 view .LVU635
 2521 0004 D3F81600 		ldr	r0, [r3, #22]	@ unaligned
 2522              	.LVL212:
 2523              		.loc 1 1347 28 view .LVU636
 2524 0008 0023     		movs	r3, #0
 2525 000a 82B2     		uxth	r2, r0
 2526 000c 62F30F03 		bfi	r3, r2, #0, #16
 2527 0010 000C     		lsrs	r0, r0, #16
 2528 0012 60F31F43 		bfi	r3, r0, #16, #16
1348:Src/mc_interface.c **** #endif
1349:Src/mc_interface.c **** }
 2529              		.loc 1 1349 1 view .LVU637
 2530 0016 1846     		mov	r0, r3
 2531 0018 02B0     		add	sp, sp, #8
 2532              		.cfi_def_cfa_offset 0
 2533              		@ sp needed
 2534 001a 7047     		bx	lr
 2535              		.cfi_endproc
 2536              	.LFE1485:
 2538              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2539              		.align	1
 2540              		.weak	MCI_GetValphabeta
 2541              		.syntax unified
 2542              		.thumb
 2543              		.thumb_func
 2544              		.fpu fpv4-sp-d16
 2546              	MCI_GetValphabeta:
 2547              	.LVL213:
ARM GAS  /tmp/ccZYtsq1.s 			page 71


 2548              	.LFB1486:
1350:Src/mc_interface.c **** 
1351:Src/mc_interface.c **** /**
1352:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1353:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1354:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1355:Src/mc_interface.c ****   */
1356:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
1357:Src/mc_interface.c **** {
 2549              		.loc 1 1357 1 is_stmt 1 view -0
 2550              		.cfi_startproc
 2551              		@ args = 0, pretend = 0, frame = 8
 2552              		@ frame_needed = 0, uses_anonymous_args = 0
 2553              		@ link register save eliminated.
 2554              		.loc 1 1357 1 is_stmt 0 view .LVU639
 2555 0000 82B0     		sub	sp, sp, #8
 2556              		.cfi_def_cfa_offset 8
1358:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1359:Src/mc_interface.c ****   alphabeta_t tempVal;
1360:Src/mc_interface.c **** 
1361:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1362:Src/mc_interface.c ****   {
1363:Src/mc_interface.c ****     tempVal.alpha = 0;
1364:Src/mc_interface.c ****     tempVal.beta = 0;
1365:Src/mc_interface.c ****   }
1366:Src/mc_interface.c ****   else
1367:Src/mc_interface.c ****   {
1368:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1369:Src/mc_interface.c ****   }
1370:Src/mc_interface.c ****   return (tempVal);
1371:Src/mc_interface.c **** #else
1372:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2557              		.loc 1 1372 3 is_stmt 1 view .LVU640
 2558              		.loc 1 1372 18 is_stmt 0 view .LVU641
 2559 0002 4368     		ldr	r3, [r0, #4]
 2560              		.loc 1 1372 28 view .LVU642
 2561 0004 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2562              	.LVL214:
 2563              		.loc 1 1372 28 view .LVU643
 2564 0008 0023     		movs	r3, #0
 2565 000a 82B2     		uxth	r2, r0
 2566 000c 62F30F03 		bfi	r3, r2, #0, #16
 2567 0010 000C     		lsrs	r0, r0, #16
 2568 0012 60F31F43 		bfi	r3, r0, #16, #16
1373:Src/mc_interface.c **** #endif
1374:Src/mc_interface.c **** }
 2569              		.loc 1 1374 1 view .LVU644
 2570 0016 1846     		mov	r0, r3
 2571 0018 02B0     		add	sp, sp, #8
 2572              		.cfi_def_cfa_offset 0
 2573              		@ sp needed
 2574 001a 7047     		bx	lr
 2575              		.cfi_endproc
 2576              	.LFE1486:
 2578              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2579              		.align	1
 2580              		.weak	MCI_GetElAngledpp
ARM GAS  /tmp/ccZYtsq1.s 			page 72


 2581              		.syntax unified
 2582              		.thumb
 2583              		.thumb_func
 2584              		.fpu fpv4-sp-d16
 2586              	MCI_GetElAngledpp:
 2587              	.LVL215:
 2588              	.LFB1487:
1375:Src/mc_interface.c **** 
1376:Src/mc_interface.c **** /**
1377:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1378:Src/mc_interface.c ****   *         frame transformation
1379:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1380:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1381:Src/mc_interface.c ****   */
1382:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle)
1383:Src/mc_interface.c **** {
 2589              		.loc 1 1383 1 is_stmt 1 view -0
 2590              		.cfi_startproc
 2591              		@ args = 0, pretend = 0, frame = 0
 2592              		@ frame_needed = 0, uses_anonymous_args = 0
 2593              		@ link register save eliminated.
1384:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1385:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1386:Src/mc_interface.c **** #else
1387:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
 2594              		.loc 1 1387 3 view .LVU646
 2595              		.loc 1 1387 18 is_stmt 0 view .LVU647
 2596 0000 4368     		ldr	r3, [r0, #4]
1388:Src/mc_interface.c **** #endif
1389:Src/mc_interface.c **** }
 2597              		.loc 1 1389 1 view .LVU648
 2598 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2599              	.LVL216:
 2600              		.loc 1 1389 1 view .LVU649
 2601 0006 7047     		bx	lr
 2602              		.cfi_endproc
 2603              	.LFE1487:
 2605              		.section	.text.MCI_GetTeref,"ax",%progbits
 2606              		.align	1
 2607              		.weak	MCI_GetTeref
 2608              		.syntax unified
 2609              		.thumb
 2610              		.thumb_func
 2611              		.fpu fpv4-sp-d16
 2613              	MCI_GetTeref:
 2614              	.LVL217:
 2615              	.LFB1488:
1390:Src/mc_interface.c **** 
1391:Src/mc_interface.c **** /**
1392:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1393:Src/mc_interface.c ****   *         Iqref and Idref computation
1394:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1395:Src/mc_interface.c ****   * @retval int16_t Teref
1396:Src/mc_interface.c ****   */
1397:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
1398:Src/mc_interface.c **** {
 2616              		.loc 1 1398 1 is_stmt 1 view -0
ARM GAS  /tmp/ccZYtsq1.s 			page 73


 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 0
 2619              		@ frame_needed = 0, uses_anonymous_args = 0
 2620              		@ link register save eliminated.
1399:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1400:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1401:Src/mc_interface.c **** #else
1402:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2621              		.loc 1 1402 3 view .LVU651
 2622              		.loc 1 1402 18 is_stmt 0 view .LVU652
 2623 0000 4368     		ldr	r3, [r0, #4]
1403:Src/mc_interface.c **** #endif
1404:Src/mc_interface.c **** }
 2624              		.loc 1 1404 1 view .LVU653
 2625 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2626              	.LVL218:
 2627              		.loc 1 1404 1 view .LVU654
 2628 0006 7047     		bx	lr
 2629              		.cfi_endproc
 2630              	.LFE1488:
 2632              		.global	__aeabi_i2d
 2633              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2634              		.align	1
 2635              		.weak	MCI_GetTeref_F
 2636              		.syntax unified
 2637              		.thumb
 2638              		.thumb_func
 2639              		.fpu fpv4-sp-d16
 2641              	MCI_GetTeref_F:
 2642              	.LVL219:
 2643              	.LFB1489:
1405:Src/mc_interface.c **** 
1406:Src/mc_interface.c **** /**
1407:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1408:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1409:Src/mc_interface.c ****   * @retval float Teref
1410:Src/mc_interface.c ****   */
1411:Src/mc_interface.c **** __weak float MCI_GetTeref_F(MCI_Handle_t *pHandle)
1412:Src/mc_interface.c **** {
 2644              		.loc 1 1412 1 is_stmt 1 view -0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 0
 2647              		@ frame_needed = 0, uses_anonymous_args = 0
 2648              		.loc 1 1412 1 is_stmt 0 view .LVU656
 2649 0000 08B5     		push	{r3, lr}
 2650              		.cfi_def_cfa_offset 8
 2651              		.cfi_offset 3, -8
 2652              		.cfi_offset 14, -4
1413:Src/mc_interface.c **** 
1414:Src/mc_interface.c ****   return ((float)(pHandle->pFOCVars->hTeref * CURRENT_CONV_FACTOR_INV));
 2653              		.loc 1 1414 3 is_stmt 1 view .LVU657
 2654              		.loc 1 1414 26 is_stmt 0 view .LVU658
 2655 0002 4368     		ldr	r3, [r0, #4]
 2656              		.loc 1 1414 45 view .LVU659
 2657 0004 B3F91E00 		ldrsh	r0, [r3, #30]
 2658              	.LVL220:
 2659              		.loc 1 1414 45 view .LVU660
ARM GAS  /tmp/ccZYtsq1.s 			page 74


 2660 0008 FFF7FEFF 		bl	__aeabi_i2d
 2661              	.LVL221:
 2662 000c 04A3     		adr	r3, .L168
 2663 000e D3E90023 		ldrd	r2, [r3]
 2664 0012 FFF7FEFF 		bl	__aeabi_dmul
 2665              	.LVL222:
 2666              		.loc 1 1414 11 view .LVU661
 2667 0016 FFF7FEFF 		bl	__aeabi_d2f
 2668              	.LVL223:
1415:Src/mc_interface.c **** }
 2669              		.loc 1 1415 1 view .LVU662
 2670 001a 00EE100A 		vmov	s0, r0
 2671 001e 08BD     		pop	{r3, pc}
 2672              	.L169:
 2673              		.align	3
 2674              	.L168:
 2675 0020 A59F4B31 		.word	827039653
 2676 0024 68165E3F 		.word	1063130728
 2677              		.cfi_endproc
 2678              	.LFE1489:
 2680              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2681              		.align	1
 2682              		.weak	MCI_GetPhaseCurrentAmplitude
 2683              		.syntax unified
 2684              		.thumb
 2685              		.thumb_func
 2686              		.fpu fpv4-sp-d16
 2688              	MCI_GetPhaseCurrentAmplitude:
 2689              	.LVL224:
 2690              	.LFB1490:
1416:Src/mc_interface.c **** 
1417:Src/mc_interface.c **** /**
1418:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
1419:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1420:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1421:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1422:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1423:Src/mc_interface.c ****   */
1424:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle)
1425:Src/mc_interface.c **** {
 2691              		.loc 1 1425 1 is_stmt 1 view -0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 8
 2694              		@ frame_needed = 0, uses_anonymous_args = 0
 2695              		@ link register save eliminated.
 2696              		.loc 1 1425 1 is_stmt 0 view .LVU664
 2697 0000 82B0     		sub	sp, sp, #8
 2698              		.cfi_def_cfa_offset 8
1426:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2699              		.loc 1 1426 3 is_stmt 1 view .LVU665
1427:Src/mc_interface.c ****   int16_t wAux;
 2700              		.loc 1 1427 3 view .LVU666
1428:Src/mc_interface.c **** 
1429:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1430:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1431:Src/mc_interface.c ****   {
1432:Src/mc_interface.c ****     wAux = 0;
ARM GAS  /tmp/ccZYtsq1.s 			page 75


1433:Src/mc_interface.c ****   }
1434:Src/mc_interface.c ****   else
1435:Src/mc_interface.c ****   {
1436:Src/mc_interface.c **** #endif
1437:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
 2701              		.loc 1 1437 3 view .LVU667
 2702              		.loc 1 1437 23 is_stmt 0 view .LVU668
 2703 0002 4368     		ldr	r3, [r0, #4]
 2704              		.loc 1 1437 14 view .LVU669
 2705 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2706              	.LVL225:
 2707              		.loc 1 1437 14 view .LVU670
 2708 0006 0190     		str	r0, [sp, #4]
1438:Src/mc_interface.c ****   wAux = MCM_Modulus( Local_Curr.alpha, Local_Curr.beta );
 2709              		.loc 1 1438 3 is_stmt 1 view .LVU671
 2710              		.loc 1 1438 10 is_stmt 0 view .LVU672
 2711 0008 03B2     		sxth	r3, r0
 2712 000a 0014     		asrs	r0, r0, #16
 2713              	.LVL226:
 2714              	.LBB32:
 2715              	.LBI32:
 2716              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
ARM GAS  /tmp/ccZYtsq1.s 			page 76


  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /* CORDIC coprocessor configuration register settings */
  41:Inc/mc_math.h **** 
  42:Inc/mc_math.h **** /* CORDIC FUNCTION: PHASE q1.31 (Electrical Angle computation) */
  43:Inc/mc_math.h **** #define CORDIC_CONFIG_PHASE     (LL_CORDIC_FUNCTION_PHASE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDIC
  44:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_2 | LL_CORDIC_NBREAD_1 |\
  45:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  46:Inc/mc_math.h **** 
  47:Inc/mc_math.h **** /* CORDIC FUNCTION: SQUAREROOT q1.31 */
  48:Inc/mc_math.h **** #define CORDIC_CONFIG_SQRT      (LL_CORDIC_FUNCTION_SQUAREROOT | LL_CORDIC_PRECISION_6CYCLES | LL_C
  49:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  50:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  51:Inc/mc_math.h **** 
  52:Inc/mc_math.h **** /* CORDIC FUNCTION: COSINE q1.15 */
  53:Inc/mc_math.h **** #define CORDIC_CONFIG_COSINE    (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDI
  54:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  55:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  56:Inc/mc_math.h **** 
  57:Inc/mc_math.h **** /* CORDIC FUNCTION: MODULUS q1.15 */
  58:Inc/mc_math.h **** #define CORDIC_CONFIG_MODULUS   (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_6CYCLES | LL_CORD
  59:Inc/mc_math.h **** 				 LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  60:Inc/mc_math.h **** 				 LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** #define LOG2(x) \
  66:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  67:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  68:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  69:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  70:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  71:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  72:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  73:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  74:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  75:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  76:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  77:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  78:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  79:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  80:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  81:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  82:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  83:Inc/mc_math.h **** 
  84:Inc/mc_math.h **** /**
  85:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  86:Inc/mc_math.h ****   */
  87:Inc/mc_math.h **** typedef struct
  88:Inc/mc_math.h **** {
  89:Inc/mc_math.h ****   int16_t hCos;
  90:Inc/mc_math.h ****   int16_t hSin;
  91:Inc/mc_math.h **** } Trig_Components;
  92:Inc/mc_math.h **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 77


  93:Inc/mc_math.h **** /**
  94:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  95:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  96:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  97:Inc/mc_math.h ****   *                               Ialpha = Ia
  98:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  99:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format
 100:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format
 101:Inc/mc_math.h ****   */
 102:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
 103:Inc/mc_math.h **** 
 104:Inc/mc_math.h **** /**
 105:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
 106:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
 107:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
 108:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
 109:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
 110:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format
 111:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 112:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format
 113:Inc/mc_math.h ****   */
 114:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
 115:Inc/mc_math.h **** 
 116:Inc/mc_math.h **** /**
 117:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
 118:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
 119:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
 120:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
 121:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 122:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format
 123:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 124:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format
 125:Inc/mc_math.h ****   */
 126:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 127:Inc/mc_math.h **** 
 128:Inc/mc_math.h **** /**
 129:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in
 130:Inc/mc_math.h ****   *         input
 131:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format
 132:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format
 133:Inc/mc_math.h ****   */
 134:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 135:Inc/mc_math.h **** 
 136:Inc/mc_math.h **** /**
 137:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0
 138:Inc/mc_math.h ****   *         for negative s32.
 139:Inc/mc_math.h ****   * @param  Input int32_t number
 140:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0)
 141:Inc/mc_math.h ****   */
 142:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 143:Inc/mc_math.h **** 
 144:Inc/mc_math.h **** /**
 145:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 146:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 147:Inc/mc_math.h ****   */
 148:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 149:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
ARM GAS  /tmp/ccZYtsq1.s 			page 78


 150:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 151:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 152:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 153:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 154:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 155:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 156:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 157:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 158:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 159:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 160:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 161:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 162:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 163:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 164:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 165:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 166:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 167:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 168:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 169:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 170:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 171:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 172:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 173:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 174:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 175:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 176:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 177:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 178:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 179:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 180:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 181:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 182:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 183:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 184:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 185:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 186:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 187:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 188:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 189:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 190:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 191:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 192:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 193:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 194:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 195:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 196:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 197:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20195 , 20221 , 20247,\
 198:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 199:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 200:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 201:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 202:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 203:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 204:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 205:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 206:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
ARM GAS  /tmp/ccZYtsq1.s 			page 79


 207:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 208:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 209:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 210:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 211:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 212:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 213:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 214:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 215:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 216:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 217:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 218:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 219:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 220:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 221:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 222:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 223:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 224:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 225:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 226:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 227:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 228:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 229:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 230:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 231:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 232:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 233:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 234:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 235:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 236:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 237:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 238:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 239:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 240:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 241:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 242:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 243:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 244:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 245:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 246:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 247:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 248:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 249:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 250:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 251:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 252:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 253:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 254:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 255:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 256:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 257:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 258:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 259:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 260:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 261:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 262:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 263:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
ARM GAS  /tmp/ccZYtsq1.s 			page 80


 264:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 265:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 266:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 267:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 268:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 269:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 270:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 271:Inc/mc_math.h ****      31989 , 32006 , 32022 , 32038 , 32055 , 32071 , 32087 , 32104,\
 272:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 273:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 274:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 275:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 276:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 277:Inc/mc_math.h ****      32767 }
 278:Inc/mc_math.h **** 
 279:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 280:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 281:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 282:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 283:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 284:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 285:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 286:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 287:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 288:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 289:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 290:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 291:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 292:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 293:Inc/mc_math.h **** 
 294:Inc/mc_math.h **** /**
 295:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm
 296:Inc/mc_math.h ****   * @param  alpha component
 297:Inc/mc_math.h ****   *         beta component
 298:Inc/mc_math.h ****   * @retval int16_t Modulus
 299:Inc/mc_math.h ****   */
 300:Inc/mc_math.h **** static inline int16_t MCM_Modulus( int16_t alpha, int16_t beta )
 2717              		.loc 2 300 23 is_stmt 1 view .LVU673
 2718              	.LBB33:
 301:Inc/mc_math.h **** {
 302:Inc/mc_math.h ****   int16_t Val;
 2719              		.loc 2 302 3 view .LVU674
 303:Inc/mc_math.h ****    __disable_irq();
 2720              		.loc 2 303 4 view .LVU675
 2721              	.LBB34:
 2722              	.LBI34:
 2723              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /tmp/ccZYtsq1.s 			page 81


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
ARM GAS  /tmp/ccZYtsq1.s 			page 82


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZYtsq1.s 			page 83


 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
ARM GAS  /tmp/ccZYtsq1.s 			page 84


 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2724              		.loc 3 207 27 view .LVU676
 2725              	.LBB35:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2726              		.loc 3 209 3 view .LVU677
 2727              		.syntax unified
 2728              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2729 000c 72B6     		cpsid i
 2730              	@ 0 "" 2
 2731              		.thumb
 2732              		.syntax unified
 2733              	.LBE35:
 2734              	.LBE34:
 304:Inc/mc_math.h ****    /* Configure and call to CORDIC- */
 305:Inc/mc_math.h ****    WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 2735              		.loc 2 305 4 view .LVU678
 2736 000e 084A     		ldr	r2, .L173
 2737 0010 0849     		ldr	r1, .L173+4
 2738 0012 1160     		str	r1, [r2]
 306:Inc/mc_math.h ****    LL_CORDIC_WriteData(CORDIC, (int32_t) (beta)<<16 | alpha);
 2739              		.loc 2 306 4 view .LVU679
 2740              		.loc 2 306 53 is_stmt 0 view .LVU680
 2741 0014 43EA0043 		orr	r3, r3, r0, lsl #16
 2742              	.LVL227:
 2743              	.LBB36:
 2744              	.LBI36:
 2745              		.file 4 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
ARM GAS  /tmp/ccZYtsq1.s 			page 85


   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 86


  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccZYtsq1.s 			page 87


 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
ARM GAS  /tmp/ccZYtsq1.s 			page 88


 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccZYtsq1.s 			page 89


 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Configure\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Configure\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Configure\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Configure\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Configure\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Configure\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Configure
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
ARM GAS  /tmp/ccZYtsq1.s 			page 90


 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
ARM GAS  /tmp/ccZYtsq1.s 			page 91


 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(CORDIC_TypeDef *CORDICx)
ARM GAS  /tmp/ccZYtsq1.s 			page 92


 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccZYtsq1.s 			page 93


 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
ARM GAS  /tmp/ccZYtsq1.s 			page 94


 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(CORDIC_TypeDef *CORDICx)
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccZYtsq1.s 			page 95


 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccZYtsq1.s 			page 96


 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(CORDIC_TypeDef *CORDICx)
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(CORDIC_TypeDef *CORDICx, uint32_t Direction)
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
ARM GAS  /tmp/ccZYtsq1.s 			page 97


 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 2746              		.loc 4 732 22 is_stmt 1 view .LVU681
 2747              	.LBB37:
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 2748              		.loc 4 734 3 view .LVU682
 2749 0018 5360     		str	r3, [r2, #4]
 2750              	.LVL228:
 2751              	.L171:
 2752              		.loc 4 734 3 is_stmt 0 view .LVU683
 2753              	.LBE37:
 2754              	.LBE36:
 307:Inc/mc_math.h ****    /* Wait for result */
 308:Inc/mc_math.h ****    while(!LL_CORDIC_IsActiveFlag_RRDY( CORDIC ))
ARM GAS  /tmp/ccZYtsq1.s 			page 98


 309:Inc/mc_math.h ****    {
 310:Inc/mc_math.h ****    }
 2755              		.loc 2 310 4 is_stmt 1 view .LVU684
 308:Inc/mc_math.h ****    {
 2756              		.loc 2 308 9 view .LVU685
 2757              	.LBB38:
 2758              	.LBI38:
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 2759              		.loc 4 712 26 view .LVU686
 2760              	.LBB39:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2761              		.loc 4 714 3 view .LVU687
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2762              		.loc 4 714 12 is_stmt 0 view .LVU688
 2763 001a 054B     		ldr	r3, .L173
 2764 001c 1B68     		ldr	r3, [r3]
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2765              		.loc 4 714 79 view .LVU689
 2766 001e 002B     		cmp	r3, #0
 2767 0020 FBDA     		bge	.L171
 2768              	.LVL229:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2769              		.loc 4 714 79 view .LVU690
 2770              	.LBE39:
 2771              	.LBE38:
 311:Inc/mc_math.h ****   /* Read computed modulus */
 312:Inc/mc_math.h ****   Val = (int16_t)(LL_CORDIC_ReadData(CORDIC)&0xFFFF);
 2772              		.loc 2 312 3 is_stmt 1 view .LVU691
 2773              	.LBB40:
 2774              	.LBI40:
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
 2775              		.loc 4 743 26 view .LVU692
 2776              	.LBB41:
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 2777              		.loc 4 745 3 view .LVU693
 2778              		.loc 4 745 10 is_stmt 0 view .LVU694
 2779 0022 034B     		ldr	r3, .L173
 2780 0024 9868     		ldr	r0, [r3, #8]
 2781              	.LVL230:
 2782              		.loc 4 745 10 view .LVU695
 2783              	.LBE41:
 2784              	.LBE40:
 2785              		.loc 2 312 7 view .LVU696
 2786 0026 00B2     		sxth	r0, r0
 2787              	.LVL231:
 313:Inc/mc_math.h ****   __enable_irq();
 2788              		.loc 2 313 3 is_stmt 1 view .LVU697
 2789              	.LBB42:
ARM GAS  /tmp/ccZYtsq1.s 			page 99


 2790              	.LBI42:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2791              		.loc 3 196 27 view .LVU698
 2792              	.LBB43:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2793              		.loc 3 198 3 view .LVU699
 2794              		.syntax unified
 2795              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2796 0028 62B6     		cpsie i
 2797              	@ 0 "" 2
 2798              		.thumb
 2799              		.syntax unified
 2800              	.LBE43:
 2801              	.LBE42:
 314:Inc/mc_math.h ****   return Val;
 2802              		.loc 2 314 3 view .LVU700
 2803              	.LVL232:
 2804              		.loc 2 314 3 is_stmt 0 view .LVU701
 2805              	.LBE33:
 2806              	.LBE32:
1439:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1440:Src/mc_interface.c ****   }
1441:Src/mc_interface.c **** #endif
1442:Src/mc_interface.c **** 
1443:Src/mc_interface.c ****   return (wAux);
 2807              		.loc 1 1443 3 is_stmt 1 view .LVU702
1444:Src/mc_interface.c **** }
 2808              		.loc 1 1444 1 is_stmt 0 view .LVU703
 2809 002a 02B0     		add	sp, sp, #8
 2810              		.cfi_def_cfa_offset 0
 2811              		@ sp needed
 2812 002c 7047     		bx	lr
 2813              	.L174:
 2814 002e 00BF     		.align	2
 2815              	.L173:
 2816 0030 000C0240 		.word	1073875968
 2817 0034 63006000 		.word	6291555
 2818              		.cfi_endproc
 2819              	.LFE1490:
 2821              		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2822              		.align	1
 2823              		.weak	MCI_GetPhaseVoltageAmplitude
 2824              		.syntax unified
 2825              		.thumb
 2826              		.thumb_func
 2827              		.fpu fpv4-sp-d16
 2829              	MCI_GetPhaseVoltageAmplitude:
 2830              	.LVL233:
 2831              	.LFB1491:
1445:Src/mc_interface.c **** 
1446:Src/mc_interface.c **** /**
1447:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1448:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1449:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1450:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1451:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1452:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccZYtsq1.s 			page 100


1453:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle)
1454:Src/mc_interface.c **** {
 2832              		.loc 1 1454 1 is_stmt 1 view -0
 2833              		.cfi_startproc
 2834              		@ args = 0, pretend = 0, frame = 8
 2835              		@ frame_needed = 0, uses_anonymous_args = 0
 2836              		.loc 1 1454 1 is_stmt 0 view .LVU705
 2837 0000 00B5     		push	{lr}
 2838              		.cfi_def_cfa_offset 4
 2839              		.cfi_offset 14, -4
 2840 0002 83B0     		sub	sp, sp, #12
 2841              		.cfi_def_cfa_offset 16
1455:Src/mc_interface.c ****   int16_t temp_wAux;
 2842              		.loc 1 1455 3 is_stmt 1 view .LVU706
1456:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1457:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1458:Src/mc_interface.c ****   {
1459:Src/mc_interface.c ****     temp_wAux = 0;
1460:Src/mc_interface.c ****   }
1461:Src/mc_interface.c ****   else
1462:Src/mc_interface.c ****   {
1463:Src/mc_interface.c **** #endif
1464:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2843              		.loc 1 1464 5 view .LVU707
1465:Src/mc_interface.c ****     int32_t wAux1;
 2844              		.loc 1 1465 5 view .LVU708
1466:Src/mc_interface.c ****     int32_t wAux2;
 2845              		.loc 1 1466 5 view .LVU709
1467:Src/mc_interface.c **** 
1468:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2846              		.loc 1 1468 5 view .LVU710
 2847              		.loc 1 1468 28 is_stmt 0 view .LVU711
 2848 0004 4368     		ldr	r3, [r0, #4]
 2849              		.loc 1 1468 19 view .LVU712
 2850 0006 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2851              	.LVL234:
 2852              		.loc 1 1468 19 view .LVU713
 2853 000a 0246     		mov	r2, r0	@ movhi
1469:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2854              		.loc 1 1469 5 is_stmt 1 view .LVU714
 2855              	.LVL235:
1470:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2856              		.loc 1 1470 5 view .LVU715
 2857              		.loc 1 1470 11 is_stmt 0 view .LVU716
 2858 000c 10FB30F0 		smultt	r0, r0, r0
 2859              	.LVL236:
1471:Src/mc_interface.c **** 
1472:Src/mc_interface.c ****     wAux1 += wAux2;
 2860              		.loc 1 1472 5 is_stmt 1 view .LVU717
1473:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
 2861              		.loc 1 1473 5 view .LVU718
 2862              		.loc 1 1473 13 is_stmt 0 view .LVU719
 2863 0010 12FB0200 		smlabb	r0, r2, r2, r0
 2864              	.LVL237:
 2865              		.loc 1 1473 13 view .LVU720
 2866 0014 FFF7FEFF 		bl	MCM_Sqrt
 2867              	.LVL238:
ARM GAS  /tmp/ccZYtsq1.s 			page 101


1474:Src/mc_interface.c **** 
1475:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2868              		.loc 1 1475 5 is_stmt 1 view .LVU721
 2869              		.loc 1 1475 8 is_stmt 0 view .LVU722
 2870 0018 B0F5004F 		cmp	r0, #32768
 2871 001c 01DB     		blt	.L176
1476:Src/mc_interface.c ****     {
1477:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
 2872              		.loc 1 1477 13 view .LVU723
 2873 001e 47F6FF70 		movw	r0, #32767
 2874              	.LVL239:
 2875              	.L176:
1478:Src/mc_interface.c ****     }
1479:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2876              		.loc 1 1479 5 is_stmt 1 view .LVU724
1480:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1481:Src/mc_interface.c ****   }
1482:Src/mc_interface.c **** #endif
1483:Src/mc_interface.c ****   return (temp_wAux);
 2877              		.loc 1 1483 3 view .LVU725
1484:Src/mc_interface.c **** }
 2878              		.loc 1 1484 1 is_stmt 0 view .LVU726
 2879 0022 00B2     		sxth	r0, r0
 2880              	.LVL240:
 2881              		.loc 1 1484 1 view .LVU727
 2882 0024 03B0     		add	sp, sp, #12
 2883              		.cfi_def_cfa_offset 4
 2884              		@ sp needed
 2885 0026 5DF804FB 		ldr	pc, [sp], #4
 2886              		.cfi_endproc
 2887              	.LFE1491:
 2889              		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2890              		.align	1
 2891              		.weak	MCI_Clear_Iqdref
 2892              		.syntax unified
 2893              		.thumb
 2894              		.thumb_func
 2895              		.fpu fpv4-sp-d16
 2897              	MCI_Clear_Iqdref:
 2898              	.LVL241:
 2899              	.LFB1492:
1485:Src/mc_interface.c **** 
1486:Src/mc_interface.c **** /**
1487:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1488:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1489:Src/mc_interface.c ****   * @retval none
1490:Src/mc_interface.c ****   */
1491:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1492:Src/mc_interface.c **** {
 2900              		.loc 1 1492 1 is_stmt 1 view -0
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 0
 2903              		@ frame_needed = 0, uses_anonymous_args = 0
 2904              		.loc 1 1492 1 is_stmt 0 view .LVU729
 2905 0000 10B5     		push	{r4, lr}
 2906              		.cfi_def_cfa_offset 8
 2907              		.cfi_offset 4, -8
ARM GAS  /tmp/ccZYtsq1.s 			page 102


 2908              		.cfi_offset 14, -4
1493:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1494:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1495:Src/mc_interface.c ****   {
1496:Src/mc_interface.c ****     /* Nothing to do */
1497:Src/mc_interface.c ****   }
1498:Src/mc_interface.c ****   else
1499:Src/mc_interface.c ****   {
1500:Src/mc_interface.c **** #endif
1501:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2909              		.loc 1 1501 5 is_stmt 1 view .LVU730
 2910              		.loc 1 1501 12 is_stmt 0 view .LVU731
 2911 0002 4468     		ldr	r4, [r0, #4]
 2912              		.loc 1 1501 33 view .LVU732
 2913 0004 0068     		ldr	r0, [r0]
 2914              	.LVL242:
 2915              		.loc 1 1501 33 view .LVU733
 2916 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2917              	.LVL243:
 2918 000a 2082     		strh	r0, [r4, #16]	@ movhi
 2919 000c C0F30F40 		ubfx	r0, r0, #16, #16
 2920 0010 6082     		strh	r0, [r4, #18]	@ movhi
1502:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1503:Src/mc_interface.c ****   }
1504:Src/mc_interface.c **** #endif
1505:Src/mc_interface.c **** }
 2921              		.loc 1 1505 1 view .LVU734
 2922 0012 10BD     		pop	{r4, pc}
 2923              		.cfi_endproc
 2924              	.LFE1492:
 2926              		.text
 2927              	.Letext0:
 2928              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2929              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 2930              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2931              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2932              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2933              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2934              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2935              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2936              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2937              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2938              		.file 15 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 2939              		.file 16 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2940              		.file 17 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2941              		.file 18 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2942              		.file 19 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
 2943              		.file 20 "Inc/mc_interface.h"
 2944              		.file 21 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2945              		.file 22 "Inc/regular_conversion_manager.h"
 2946              		.file 23 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2947              		.file 24 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 2948              		.file 25 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 2949              		.file 26 "Inc/mc_configuration_registers.h"
 2950              		.file 27 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2951              		.file 28 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2952              		.file 29 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/feed_forward_ctrl.h"
ARM GAS  /tmp/ccZYtsq1.s 			page 103


 2953              		.file 30 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2954              		.file 31 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 2955              		.file 32 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/encoder_speed_pos_fdbk.h"
 2956              		.file 33 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/enc_align_ctrl.h"
 2957              		.file 34 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2958              		.file 35 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2959              		.file 36 "MCSDK_v6.1.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 2960              		.file 37 "Inc/mc_config.h"
 2961              		.file 38 "Inc/debug_scope.h"
ARM GAS  /tmp/ccZYtsq1.s 			page 104


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_interface.c
     /tmp/ccZYtsq1.s:18     .text.MCI_Init:0000000000000000 $t
     /tmp/ccZYtsq1.s:26     .text.MCI_Init:0000000000000000 MCI_Init
     /tmp/ccZYtsq1.s:92     .text.MCI_ExecSpeedRamp:0000000000000000 $t
     /tmp/ccZYtsq1.s:99     .text.MCI_ExecSpeedRamp:0000000000000000 MCI_ExecSpeedRamp
     /tmp/ccZYtsq1.s:130    .text.MCI_ExecSpeedSin:0000000000000000 $t
     /tmp/ccZYtsq1.s:137    .text.MCI_ExecSpeedSin:0000000000000000 MCI_ExecSpeedSin
     /tmp/ccZYtsq1.s:181    .text.MCI_ExecTorqueSin:0000000000000000 $t
     /tmp/ccZYtsq1.s:188    .text.MCI_ExecTorqueSin:0000000000000000 MCI_ExecTorqueSin
     /tmp/ccZYtsq1.s:232    .text.MCI_ExecSpeedRamp_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:239    .text.MCI_ExecSpeedRamp_F:0000000000000000 MCI_ExecSpeedRamp_F
     /tmp/ccZYtsq1.s:275    .text.MCI_ExecSpeedRamp_F:0000000000000024 $d
     /tmp/ccZYtsq1.s:280    .text.MCI_ExecTorqueRamp:0000000000000000 $t
     /tmp/ccZYtsq1.s:287    .text.MCI_ExecTorqueRamp:0000000000000000 MCI_ExecTorqueRamp
     /tmp/ccZYtsq1.s:319    .text.MCI_ExecTorqueRamp_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:326    .text.MCI_ExecTorqueRamp_F:0000000000000000 MCI_ExecTorqueRamp_F
     /tmp/ccZYtsq1.s:359    .text.MCI_ExecTorqueRamp_F:000000000000001c $d
     /tmp/ccZYtsq1.s:364    .text.MCI_SetCurrentReferences:0000000000000000 $t
     /tmp/ccZYtsq1.s:371    .text.MCI_SetCurrentReferences:0000000000000000 MCI_SetCurrentReferences
     /tmp/ccZYtsq1.s:411    .text.MCI_SetCurrentReferences_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:418    .text.MCI_SetCurrentReferences_F:0000000000000000 MCI_SetCurrentReferences_F
     /tmp/ccZYtsq1.s:461    .text.MCI_SetCurrentReferences_F:0000000000000034 $d
     /tmp/ccZYtsq1.s:466    .text.MCI_SetSpeedMode:0000000000000000 $t
     /tmp/ccZYtsq1.s:473    .text.MCI_SetSpeedMode:0000000000000000 MCI_SetSpeedMode
     /tmp/ccZYtsq1.s:510    .text.MCI_SetOpenLoopCurrent:0000000000000000 $t
     /tmp/ccZYtsq1.s:517    .text.MCI_SetOpenLoopCurrent:0000000000000000 MCI_SetOpenLoopCurrent
     /tmp/ccZYtsq1.s:554    .text.MCI_SetOpenLoopVoltage:0000000000000000 $t
     /tmp/ccZYtsq1.s:561    .text.MCI_SetOpenLoopVoltage:0000000000000000 MCI_SetOpenLoopVoltage
     /tmp/ccZYtsq1.s:599    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccZYtsq1.s:606    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 MCI_GetCalibratedOffsetsMotor
     /tmp/ccZYtsq1.s:645    .text.MCI_FaultProcessing:0000000000000000 $t
     /tmp/ccZYtsq1.s:652    .text.MCI_FaultProcessing:0000000000000000 MCI_FaultProcessing
     /tmp/ccZYtsq1.s:682    .text.MCI_ExecBufferedCommands:0000000000000000 $t
     /tmp/ccZYtsq1.s:689    .text.MCI_ExecBufferedCommands:0000000000000000 MCI_ExecBufferedCommands
     /tmp/ccZYtsq1.s:721    .text.MCI_ExecBufferedCommands:000000000000001a $d
     /tmp/ccZYtsq1.s:888    .text.MCI_IsCommandAcknowledged:0000000000000000 $t
     /tmp/ccZYtsq1.s:895    .text.MCI_IsCommandAcknowledged:0000000000000000 MCI_IsCommandAcknowledged
     /tmp/ccZYtsq1.s:932    .text.MCI_GetSTMState:0000000000000000 $t
     /tmp/ccZYtsq1.s:939    .text.MCI_GetSTMState:0000000000000000 MCI_GetSTMState
     /tmp/ccZYtsq1.s:957    .text.MCI_GetOccurredFaults:0000000000000000 $t
     /tmp/ccZYtsq1.s:964    .text.MCI_GetOccurredFaults:0000000000000000 MCI_GetOccurredFaults
     /tmp/ccZYtsq1.s:982    .text.MCI_GetCurrentFaults:0000000000000000 $t
     /tmp/ccZYtsq1.s:989    .text.MCI_GetCurrentFaults:0000000000000000 MCI_GetCurrentFaults
     /tmp/ccZYtsq1.s:1007   .text.MCI_StartMotor:0000000000000000 $t
     /tmp/ccZYtsq1.s:1014   .text.MCI_StartMotor:0000000000000000 MCI_StartMotor
     /tmp/ccZYtsq1.s:1079   .text.MCI_StartWithMeasurementOffset:0000000000000000 $t
     /tmp/ccZYtsq1.s:1086   .text.MCI_StartWithMeasurementOffset:0000000000000000 MCI_StartWithMeasurementOffset
     /tmp/ccZYtsq1.s:1157   .text.MCI_StartOffsetMeasurments:0000000000000000 $t
     /tmp/ccZYtsq1.s:1164   .text.MCI_StartOffsetMeasurments:0000000000000000 MCI_StartOffsetMeasurments
     /tmp/ccZYtsq1.s:1233   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccZYtsq1.s:1240   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 MCI_SetCalibratedOffsetsMotor
     /tmp/ccZYtsq1.s:1304   .text.MCI_StopMotor:0000000000000000 $t
     /tmp/ccZYtsq1.s:1311   .text.MCI_StopMotor:0000000000000000 MCI_StopMotor
     /tmp/ccZYtsq1.s:1397   .text.MCI_FaultAcknowledged:0000000000000000 $t
     /tmp/ccZYtsq1.s:1404   .text.MCI_FaultAcknowledged:0000000000000000 MCI_FaultAcknowledged
     /tmp/ccZYtsq1.s:1462   .text.MCI_GetFaultState:0000000000000000 $t
ARM GAS  /tmp/ccZYtsq1.s 			page 105


     /tmp/ccZYtsq1.s:1469   .text.MCI_GetFaultState:0000000000000000 MCI_GetFaultState
     /tmp/ccZYtsq1.s:1496   .text.MCI_GetControlMode:0000000000000000 $t
     /tmp/ccZYtsq1.s:1503   .text.MCI_GetControlMode:0000000000000000 MCI_GetControlMode
     /tmp/ccZYtsq1.s:1521   .text.MCI_GetImposedMotorDirection:0000000000000000 $t
     /tmp/ccZYtsq1.s:1528   .text.MCI_GetImposedMotorDirection:0000000000000000 MCI_GetImposedMotorDirection
     /tmp/ccZYtsq1.s:1545   .text.MCI_GetImposedMotorDirection:000000000000000c $d
     /tmp/ccZYtsq1.s:1549   .text.MCI_GetImposedMotorDirection:0000000000000010 $t
     /tmp/ccZYtsq1.s:1621   .text.MCI_GetLastRampFinalSpeed:0000000000000000 $t
     /tmp/ccZYtsq1.s:1628   .text.MCI_GetLastRampFinalSpeed:0000000000000000 MCI_GetLastRampFinalSpeed
     /tmp/ccZYtsq1.s:1646   .text.MCI_GetLastRampFinalTorque:0000000000000000 $t
     /tmp/ccZYtsq1.s:1653   .text.MCI_GetLastRampFinalTorque:0000000000000000 MCI_GetLastRampFinalTorque
     /tmp/ccZYtsq1.s:1671   .text.MCI_GetLastRampFinalDuration:0000000000000000 $t
     /tmp/ccZYtsq1.s:1678   .text.MCI_GetLastRampFinalDuration:0000000000000000 MCI_GetLastRampFinalDuration
     /tmp/ccZYtsq1.s:1696   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:1703   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 MCI_GetLastRampFinalSpeed_F
     /tmp/ccZYtsq1.s:1737   .text.MCI_GetLastRampFinalSpeed_F:000000000000001c $d
     /tmp/ccZYtsq1.s:1742   .text.MCI_RampCompleted:0000000000000000 $t
     /tmp/ccZYtsq1.s:1749   .text.MCI_RampCompleted:0000000000000000 MCI_RampCompleted
     /tmp/ccZYtsq1.s:1792   .text.MCI_StopSpeedRamp:0000000000000000 $t
     /tmp/ccZYtsq1.s:1799   .text.MCI_StopSpeedRamp:0000000000000000 MCI_StopSpeedRamp
     /tmp/ccZYtsq1.s:1824   .text.MCI_StopRamp:0000000000000000 $t
     /tmp/ccZYtsq1.s:1831   .text.MCI_StopRamp:0000000000000000 MCI_StopRamp
     /tmp/ccZYtsq1.s:1855   .text.MCI_GetSpdSensorReliability:0000000000000000 $t
     /tmp/ccZYtsq1.s:1862   .text.MCI_GetSpdSensorReliability:0000000000000000 MCI_GetSpdSensorReliability
     /tmp/ccZYtsq1.s:1893   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 $t
     /tmp/ccZYtsq1.s:1900   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 MCI_GetAvrgMecSpeedUnit
     /tmp/ccZYtsq1.s:1931   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:1938   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 MCI_GetAvrgMecSpeed_F
     /tmp/ccZYtsq1.s:1972   .text.MCI_GetMecSpeedRefUnit:0000000000000000 $t
     /tmp/ccZYtsq1.s:1979   .text.MCI_GetMecSpeedRefUnit:0000000000000000 MCI_GetMecSpeedRefUnit
     /tmp/ccZYtsq1.s:2004   .text.MCI_GetMecSpeedRef_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:2011   .text.MCI_GetMecSpeedRef_F:0000000000000000 MCI_GetMecSpeedRef_F
     /tmp/ccZYtsq1.s:2041   .text.MCI_GetIab:0000000000000000 $t
     /tmp/ccZYtsq1.s:2048   .text.MCI_GetIab:0000000000000000 MCI_GetIab
     /tmp/ccZYtsq1.s:2084   .text.MCI_GetIab_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:2091   .text.MCI_GetIab_F:0000000000000000 MCI_GetIab_F
     /tmp/ccZYtsq1.s:2163   .text.MCI_GetIab_F:0000000000000068 $d
     /tmp/ccZYtsq1.s:2169   .text.MCI_GetIalphabeta:0000000000000000 $t
     /tmp/ccZYtsq1.s:2176   .text.MCI_GetIalphabeta:0000000000000000 MCI_GetIalphabeta
     /tmp/ccZYtsq1.s:2209   .text.MCI_GetIqd:0000000000000000 $t
     /tmp/ccZYtsq1.s:2216   .text.MCI_GetIqd:0000000000000000 MCI_GetIqd
     /tmp/ccZYtsq1.s:2249   .text.MCI_GetIqd_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:2256   .text.MCI_GetIqd_F:0000000000000000 MCI_GetIqd_F
     /tmp/ccZYtsq1.s:2328   .text.MCI_GetIqd_F:0000000000000068 $d
     /tmp/ccZYtsq1.s:2334   .text.MCI_GetIqdHF:0000000000000000 $t
     /tmp/ccZYtsq1.s:2341   .text.MCI_GetIqdHF:0000000000000000 MCI_GetIqdHF
     /tmp/ccZYtsq1.s:2374   .text.MCI_GetIqdref:0000000000000000 $t
     /tmp/ccZYtsq1.s:2381   .text.MCI_GetIqdref:0000000000000000 MCI_GetIqdref
     /tmp/ccZYtsq1.s:2414   .text.MCI_GetIqdref_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:2421   .text.MCI_GetIqdref_F:0000000000000000 MCI_GetIqdref_F
     /tmp/ccZYtsq1.s:2493   .text.MCI_GetIqdref_F:0000000000000068 $d
     /tmp/ccZYtsq1.s:2499   .text.MCI_GetVqd:0000000000000000 $t
     /tmp/ccZYtsq1.s:2506   .text.MCI_GetVqd:0000000000000000 MCI_GetVqd
     /tmp/ccZYtsq1.s:2539   .text.MCI_GetValphabeta:0000000000000000 $t
     /tmp/ccZYtsq1.s:2546   .text.MCI_GetValphabeta:0000000000000000 MCI_GetValphabeta
     /tmp/ccZYtsq1.s:2579   .text.MCI_GetElAngledpp:0000000000000000 $t
     /tmp/ccZYtsq1.s:2586   .text.MCI_GetElAngledpp:0000000000000000 MCI_GetElAngledpp
ARM GAS  /tmp/ccZYtsq1.s 			page 106


     /tmp/ccZYtsq1.s:2606   .text.MCI_GetTeref:0000000000000000 $t
     /tmp/ccZYtsq1.s:2613   .text.MCI_GetTeref:0000000000000000 MCI_GetTeref
     /tmp/ccZYtsq1.s:2634   .text.MCI_GetTeref_F:0000000000000000 $t
     /tmp/ccZYtsq1.s:2641   .text.MCI_GetTeref_F:0000000000000000 MCI_GetTeref_F
     /tmp/ccZYtsq1.s:2675   .text.MCI_GetTeref_F:0000000000000020 $d
     /tmp/ccZYtsq1.s:2681   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 $t
     /tmp/ccZYtsq1.s:2688   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 MCI_GetPhaseCurrentAmplitude
     /tmp/ccZYtsq1.s:2816   .text.MCI_GetPhaseCurrentAmplitude:0000000000000030 $d
     /tmp/ccZYtsq1.s:2822   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 $t
     /tmp/ccZYtsq1.s:2829   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 MCI_GetPhaseVoltageAmplitude
     /tmp/ccZYtsq1.s:2890   .text.MCI_Clear_Iqdref:0000000000000000 $t
     /tmp/ccZYtsq1.s:2897   .text.MCI_Clear_Iqdref:0000000000000000 MCI_Clear_Iqdref
     /tmp/ccZYtsq1.s:726    .text.MCI_ExecBufferedCommands:000000000000001f $d
     /tmp/ccZYtsq1.s:726    .text.MCI_ExecBufferedCommands:0000000000000020 $t

UNDEFINED SYMBOLS
STC_SetControlMode
PWMC_GetOffsetCalib
STC_ExecRamp
STC_ExecSin
PWMC_SetOffsetCalib
STC_RampCompleted
STC_StopSpeedRamp
STC_StopRamp
STC_GetSpeedSensor
SPD_Check
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
__aeabi_i2d
MCM_Sqrt
STC_GetDefaultIqdref
