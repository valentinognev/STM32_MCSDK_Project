ARM GAS  /tmp/ccRhyv0W.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_interface.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MCI_Init,"ax",%progbits
  18              		.align	1
  19              		.weak	MCI_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	MCI_Init:
  27              	.LVL0:
  28              	.LFB1437:
  29              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
  29:Src/mc_interface.c **** #include "debug_scope.h"
ARM GAS  /tmp/ccRhyv0W.s 			page 2


  30:Src/mc_interface.c **** 
  31:Src/mc_interface.c **** #define ROUNDING_OFF
  32:Src/mc_interface.c **** 
  33:Src/mc_interface.c **** /** @addtogroup MCSDK
  34:Src/mc_interface.c ****   * @{
  35:Src/mc_interface.c ****   */
  36:Src/mc_interface.c **** 
  37:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  38:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  39:Src/mc_interface.c ****   *
  40:Src/mc_interface.c ****   * @todo Document the MC Interface "module".
  41:Src/mc_interface.c ****   *
  42:Src/mc_interface.c ****   * @{
  43:Src/mc_interface.c ****   */
  44:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  45:Src/mc_interface.c **** 
  46:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  47:Src/mc_interface.c **** extern DebugScope_Handle_t debugScopeM1;
  48:Src/mc_interface.c **** 
  49:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  50:Src/mc_interface.c **** 
  51:Src/mc_interface.c **** /**
  52:Src/mc_interface.c ****   * @brief  Initializes all the object variables, usually it has to be called
  53:Src/mc_interface.c ****   *         once right after object creation. It is also used to assign the
  54:Src/mc_interface.c ****   *         state machine object, the speed and torque controller, and the FOC
  55:Src/mc_interface.c ****   *         drive object to be used by MC Interface.
  56:Src/mc_interface.c ****   * @param  pHandle pointer on the component instance to initialize.
  57:Src/mc_interface.c ****   * @param  pSTM the state machine object used by the MCI.
  58:Src/mc_interface.c ****   * @param  pSTC the speed and torque controller used by the MCI.
  59:Src/mc_interface.c ****   * @param  pFOCVars pointer to FOC vars to be used by MCI.
  60:Src/mc_interface.c ****   * @retval none.
  61:Src/mc_interface.c ****   */
  62:Src/mc_interface.c **** __weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWM
  63:Src/mc_interface.c **** {
  30              		.loc 1 63 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  64:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  65:Src/mc_interface.c ****   if (MC_NULL == pHandle)
  66:Src/mc_interface.c ****   {
  67:Src/mc_interface.c ****     /* Nothing to do */
  68:Src/mc_interface.c ****   }
  69:Src/mc_interface.c ****   else
  70:Src/mc_interface.c ****   {
  71:Src/mc_interface.c **** #endif
  72:Src/mc_interface.c ****     pHandle->pSTC = pSTC;
  35              		.loc 1 72 5 view .LVU1
  36              		.loc 1 72 19 is_stmt 0 view .LVU2
  37 0000 0160     		str	r1, [r0]
  73:Src/mc_interface.c ****     pHandle->pFOCVars = pFOCVars;
  38              		.loc 1 73 5 is_stmt 1 view .LVU3
  39              		.loc 1 73 23 is_stmt 0 view .LVU4
  40 0002 4260     		str	r2, [r0, #4]
  74:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  41              		.loc 1 74 5 is_stmt 1 view .LVU5
ARM GAS  /tmp/ccRhyv0W.s 			page 3


  42              		.loc 1 74 19 is_stmt 0 view .LVU6
  43 0004 8360     		str	r3, [r0, #8]
  75:Src/mc_interface.c **** 
  76:Src/mc_interface.c ****     /* Buffer related initialization */
  77:Src/mc_interface.c ****     pHandle->lastCommand = MCI_NOCOMMANDSYET;
  44              		.loc 1 77 5 is_stmt 1 view .LVU7
  45              		.loc 1 77 26 is_stmt 0 view .LVU8
  46 0006 0023     		movs	r3, #0
  47              	.LVL1:
  48              		.loc 1 77 26 view .LVU9
  49 0008 0373     		strb	r3, [r0, #12]
  78:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  50              		.loc 1 78 5 is_stmt 1 view .LVU10
  51              		.loc 1 78 26 is_stmt 0 view .LVU11
  52 000a C381     		strh	r3, [r0, #14]	@ movhi
  79:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  53              		.loc 1 79 5 is_stmt 1 view .LVU12
  54              		.loc 1 79 27 is_stmt 0 view .LVU13
  55 000c 8382     		strh	r3, [r0, #20]	@ movhi
  80:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  56              		.loc 1 80 5 is_stmt 1 view .LVU14
  57              		.loc 1 80 26 is_stmt 0 view .LVU15
  58 000e 4383     		strh	r3, [r0, #26]	@ movhi
  81:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  59              		.loc 1 81 5 is_stmt 1 view .LVU16
  60              		.loc 1 81 27 is_stmt 0 view .LVU17
  61 0010 80F82230 		strb	r3, [r0, #34]
  82:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  62              		.loc 1 82 5 is_stmt 1 view .LVU18
  63              		.loc 1 82 28 is_stmt 0 view .LVU19
  64 0014 0377     		strb	r3, [r0, #28]
  83:Src/mc_interface.c ****     pHandle->State = IDLE;
  65              		.loc 1 83 5 is_stmt 1 view .LVU20
  66              		.loc 1 83 20 is_stmt 0 view .LVU21
  67 0016 4377     		strb	r3, [r0, #29]
  84:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  68              		.loc 1 84 5 is_stmt 1 view .LVU22
  69              		.loc 1 84 28 is_stmt 0 view .LVU23
  70 0018 C383     		strh	r3, [r0, #30]	@ movhi
  85:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  71              		.loc 1 85 5 is_stmt 1 view .LVU24
  72              		.loc 1 85 25 is_stmt 0 view .LVU25
  73 001a 0384     		strh	r3, [r0, #32]	@ movhi
  86:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  87:Src/mc_interface.c ****   }
  88:Src/mc_interface.c **** #endif
  89:Src/mc_interface.c **** }
  74              		.loc 1 89 1 view .LVU26
  75 001c 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1437:
  79              		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  80              		.align	1
  81              		.weak	MCI_ExecSpeedRamp
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
ARM GAS  /tmp/ccRhyv0W.s 			page 4


  85              		.fpu fpv4-sp-d16
  87              	MCI_ExecSpeedRamp:
  88              	.LVL2:
  89              	.LFB1438:
  90:Src/mc_interface.c **** 
  91:Src/mc_interface.c **** /**
  92:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
  93:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
  94:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
  95:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
  96:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
  97:Src/mc_interface.c ****   * @param  hFinalSpeed is the value of mechanical rotor speed reference at the
  98:Src/mc_interface.c ****   *         end of the ramp expressed in tenths of HZ.
  99:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 100:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 101:Src/mc_interface.c ****   *         value.
 102:Src/mc_interface.c ****   * @retval none.
 103:Src/mc_interface.c ****   */
 104:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
 105:Src/mc_interface.c **** {
  90              		.loc 1 105 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 106:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 107:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 108:Src/mc_interface.c ****   {
 109:Src/mc_interface.c ****     /* Nothing to do */
 110:Src/mc_interface.c ****   }
 111:Src/mc_interface.c ****   else
 112:Src/mc_interface.c ****   {
 113:Src/mc_interface.c **** #endif
 114:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
  95              		.loc 1 114 5 view .LVU28
  96              		.loc 1 114 26 is_stmt 0 view .LVU29
  97 0000 0123     		movs	r3, #1
  98 0002 0373     		strb	r3, [r0, #12]
 115:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  99              		.loc 1 115 5 is_stmt 1 view .LVU30
 100              		.loc 1 115 26 is_stmt 0 view .LVU31
 101 0004 C181     		strh	r1, [r0, #14]	@ movhi
 116:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 102              		.loc 1 116 5 is_stmt 1 view .LVU32
 103              		.loc 1 116 26 is_stmt 0 view .LVU33
 104 0006 4283     		strh	r2, [r0, #26]	@ movhi
 117:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 105              		.loc 1 117 5 is_stmt 1 view .LVU34
 106              		.loc 1 117 27 is_stmt 0 view .LVU35
 107 0008 80F82230 		strb	r3, [r0, #34]
 118:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 108              		.loc 1 118 5 is_stmt 1 view .LVU36
 109              		.loc 1 118 36 is_stmt 0 view .LVU37
 110 000c 0323     		movs	r3, #3
 111 000e 80F82330 		strb	r3, [r0, #35]
 119:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 120:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccRhyv0W.s 			page 5


 121:Src/mc_interface.c **** #endif
 122:Src/mc_interface.c **** }
 112              		.loc 1 122 1 view .LVU38
 113 0012 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE1438:
 117              		.section	.text.MCI_ExecSpeedSin,"ax",%progbits
 118              		.align	1
 119              		.weak	MCI_ExecSpeedSin
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	MCI_ExecSpeedSin:
 126              	.LVL3:
 127              	.LFB1439:
 123:Src/mc_interface.c **** 
 124:Src/mc_interface.c **** __weak void MCI_ExecSpeedSin( MCI_Handle_t * pHandle,  const int16_t hFinalSpeedMean, const uint16_
 125:Src/mc_interface.c **** {
 128              		.loc 1 125 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              		.loc 1 125 1 is_stmt 0 view .LVU40
 134 0000 10B4     		push	{r4}
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 4, -4
 126:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 127:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 128:Src/mc_interface.c ****   {
 129:Src/mc_interface.c ****     /* Nothing to do */
 130:Src/mc_interface.c ****   }
 131:Src/mc_interface.c ****   else
 132:Src/mc_interface.c ****   {
 133:Src/mc_interface.c **** #endif
 134:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDSIN;
 137              		.loc 1 134 5 is_stmt 1 view .LVU41
 138              		.loc 1 134 26 is_stmt 0 view .LVU42
 139 0002 0424     		movs	r4, #4
 140 0004 0473     		strb	r4, [r0, #12]
 135:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeedMean;
 141              		.loc 1 135 5 is_stmt 1 view .LVU43
 142              		.loc 1 135 26 is_stmt 0 view .LVU44
 143 0006 C181     		strh	r1, [r0, #14]	@ movhi
 136:Src/mc_interface.c ****     pHandle->hSpeedAmp = hFinalSpeedAmp;
 144              		.loc 1 136 5 is_stmt 1 view .LVU45
 145              		.loc 1 136 24 is_stmt 0 view .LVU46
 146 0008 4282     		strh	r2, [r0, #18]	@ movhi
 137:Src/mc_interface.c ****     pHandle->hSpeedPhase = hPhase;
 147              		.loc 1 137 5 is_stmt 1 view .LVU47
 148              		.loc 1 137 26 is_stmt 0 view .LVU48
 149 000a 0382     		strh	r3, [r0, #16]	@ movhi
 138:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 150              		.loc 1 138 5 is_stmt 1 view .LVU49
 151              		.loc 1 138 27 is_stmt 0 view .LVU50
 152 000c 0123     		movs	r3, #1
ARM GAS  /tmp/ccRhyv0W.s 			page 6


 153              	.LVL4:
 154              		.loc 1 138 27 view .LVU51
 155 000e 80F82230 		strb	r3, [r0, #34]
 139:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 156              		.loc 1 139 5 is_stmt 1 view .LVU52
 157              		.loc 1 139 36 is_stmt 0 view .LVU53
 158 0012 0323     		movs	r3, #3
 159 0014 80F82330 		strb	r3, [r0, #35]
 140:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 141:Src/mc_interface.c ****   }
 142:Src/mc_interface.c **** #endif
 143:Src/mc_interface.c **** }
 160              		.loc 1 143 1 view .LVU54
 161 0018 5DF8044B 		ldr	r4, [sp], #4
 162              		.cfi_restore 4
 163              		.cfi_def_cfa_offset 0
 164 001c 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE1439:
 168              		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
 169              		.align	1
 170              		.weak	MCI_ExecSpeedRamp_F
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu fpv4-sp-d16
 176              	MCI_ExecSpeedRamp_F:
 177              	.LVL5:
 178              	.LFB1440:
 144:Src/mc_interface.c **** 
 145:Src/mc_interface.c **** /**
 146:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
 147:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 148:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 149:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 150:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 151:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
 152:Src/mc_interface.c ****   *         end of the ramp expressed in rpm.
 153:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 154:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 155:Src/mc_interface.c ****   *         value.
 156:Src/mc_interface.c ****   * @retval none.
 157:Src/mc_interface.c ****   */
 158:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F( MCI_Handle_t * pHandle, const float FinalSpeed, uint16_t hDuration
 159:Src/mc_interface.c **** {
 179              		.loc 1 159 1 is_stmt 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		.loc 1 159 1 is_stmt 0 view .LVU56
 184 0000 08B5     		push	{r3, lr}
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
 188 0002 0A46     		mov	r2, r1
 160:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 161:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccRhyv0W.s 			page 7


 162:Src/mc_interface.c ****   {
 163:Src/mc_interface.c ****     /* Nothing to do */
 164:Src/mc_interface.c ****   }
 165:Src/mc_interface.c ****   else
 166:Src/mc_interface.c ****   {
 167:Src/mc_interface.c **** #endif
 168:Src/mc_interface.c ****     int16_t hFinalSpeed = (int16_t) ((FinalSpeed * SPEED_UNIT) / U_RPM);
 189              		.loc 1 168 5 is_stmt 1 view .LVU57
 190              		.loc 1 168 50 is_stmt 0 view .LVU58
 191 0004 F2EE047A 		vmov.f32	s15, #1.0e+1
 192 0008 20EE270A 		vmul.f32	s0, s0, s15
 193              	.LVL6:
 194              		.loc 1 168 64 view .LVU59
 195 000c 9FED057A 		vldr.32	s14, .L7
 196 0010 C0EE077A 		vdiv.f32	s15, s0, s14
 197              		.loc 1 168 13 view .LVU60
 198 0014 FDEEE77A 		vcvt.s32.f32	s15, s15
 199              	.LVL7:
 169:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 200              		.loc 1 169 5 is_stmt 1 view .LVU61
 201 0018 17EE903A 		vmov	r3, s15	@ int
 202 001c 19B2     		sxth	r1, r3
 203              	.LVL8:
 204              		.loc 1 169 5 is_stmt 0 view .LVU62
 205 001e FFF7FEFF 		bl	MCI_ExecSpeedRamp
 206              	.LVL9:
 170:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 171:Src/mc_interface.c ****   }
 172:Src/mc_interface.c **** #endif
 173:Src/mc_interface.c **** }
 207              		.loc 1 173 1 view .LVU63
 208 0022 08BD     		pop	{r3, pc}
 209              	.L8:
 210              		.align	2
 211              	.L7:
 212 0024 00007042 		.word	1114636288
 213              		.cfi_endproc
 214              	.LFE1440:
 216              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 217              		.align	1
 218              		.weak	MCI_ExecTorqueRamp
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	MCI_ExecTorqueRamp:
 225              	.LVL10:
 226              	.LFB1441:
 174:Src/mc_interface.c **** 
 175:Src/mc_interface.c **** /**
 176:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
 177:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 178:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 179:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 180:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 181:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 182:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
ARM GAS  /tmp/ccRhyv0W.s 			page 8


 183:Src/mc_interface.c ****   *         digit.
 184:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 185:Src/mc_interface.c ****   *         is possible to use the formula:
 186:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 187:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 188:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 189:Src/mc_interface.c ****   *         value.
 190:Src/mc_interface.c ****   * @retval none.
 191:Src/mc_interface.c ****   */
 192:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
 193:Src/mc_interface.c **** {
 227              		.loc 1 193 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 194:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 195:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 196:Src/mc_interface.c ****   {
 197:Src/mc_interface.c ****     /* Nothing to do */
 198:Src/mc_interface.c ****   }
 199:Src/mc_interface.c ****   else
 200:Src/mc_interface.c ****   {
 201:Src/mc_interface.c **** #endif
 202:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 232              		.loc 1 202 5 view .LVU65
 233              		.loc 1 202 26 is_stmt 0 view .LVU66
 234 0000 0223     		movs	r3, #2
 235 0002 0373     		strb	r3, [r0, #12]
 203:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 236              		.loc 1 203 5 is_stmt 1 view .LVU67
 237              		.loc 1 203 27 is_stmt 0 view .LVU68
 238 0004 8182     		strh	r1, [r0, #20]	@ movhi
 204:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 239              		.loc 1 204 5 is_stmt 1 view .LVU69
 240              		.loc 1 204 26 is_stmt 0 view .LVU70
 241 0006 4283     		strh	r2, [r0, #26]	@ movhi
 205:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 242              		.loc 1 205 5 is_stmt 1 view .LVU71
 243              		.loc 1 205 27 is_stmt 0 view .LVU72
 244 0008 0123     		movs	r3, #1
 245 000a 80F82230 		strb	r3, [r0, #34]
 206:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 246              		.loc 1 206 5 is_stmt 1 view .LVU73
 247              		.loc 1 206 36 is_stmt 0 view .LVU74
 248 000e 0423     		movs	r3, #4
 249 0010 80F82330 		strb	r3, [r0, #35]
 207:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 208:Src/mc_interface.c ****   }
 209:Src/mc_interface.c **** #endif
 210:Src/mc_interface.c **** }
 250              		.loc 1 210 1 view .LVU75
 251 0014 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE1441:
 255              		.global	__aeabi_f2d
 256              		.global	__aeabi_dmul
ARM GAS  /tmp/ccRhyv0W.s 			page 9


 257              		.global	__aeabi_d2iz
 258              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 259              		.align	1
 260              		.weak	MCI_ExecTorqueRamp_F
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 264              		.fpu fpv4-sp-d16
 266              	MCI_ExecTorqueRamp_F:
 267              	.LVL11:
 268              	.LFB1442:
 211:Src/mc_interface.c **** 
 212:Src/mc_interface.c **** /**
 213:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
 214:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 215:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 216:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 217:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 218:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 219:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
 220:Src/mc_interface.c ****   *         Ampere.
 221:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 222:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 223:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 224:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 225:Src/mc_interface.c ****   *         value.
 226:Src/mc_interface.c ****   * @retval none.
 227:Src/mc_interface.c ****   */
 228:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F( MCI_Handle_t * pHandle,  float FinalTorque, uint16_t hDurationms 
 229:Src/mc_interface.c **** {
 269              		.loc 1 229 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		.loc 1 229 1 is_stmt 0 view .LVU77
 274 0000 38B5     		push	{r3, r4, r5, lr}
 275              		.cfi_def_cfa_offset 16
 276              		.cfi_offset 3, -16
 277              		.cfi_offset 4, -12
 278              		.cfi_offset 5, -8
 279              		.cfi_offset 14, -4
 280 0002 0446     		mov	r4, r0
 281 0004 10EE100A 		vmov	r0, s0
 282              	.LVL12:
 283              		.loc 1 229 1 view .LVU78
 284 0008 0D46     		mov	r5, r1
 230:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 231:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 232:Src/mc_interface.c ****   {
 233:Src/mc_interface.c ****     /* Nothing to do */
 234:Src/mc_interface.c ****   }
 235:Src/mc_interface.c ****   else
 236:Src/mc_interface.c ****   {
 237:Src/mc_interface.c **** #endif
 238:Src/mc_interface.c ****     int16_t hFinalTorque = (int16_t) (FinalTorque * CURRENT_CONV_FACTOR);
 285              		.loc 1 238 5 is_stmt 1 view .LVU79
 286              		.loc 1 238 51 is_stmt 0 view .LVU80
ARM GAS  /tmp/ccRhyv0W.s 			page 10


 287 000a FFF7FEFF 		bl	__aeabi_f2d
 288              	.LVL13:
 289              		.loc 1 238 51 view .LVU81
 290 000e 06A3     		adr	r3, .L12
 291 0010 D3E90023 		ldrd	r2, [r3]
 292 0014 FFF7FEFF 		bl	__aeabi_dmul
 293              	.LVL14:
 294              		.loc 1 238 13 view .LVU82
 295 0018 FFF7FEFF 		bl	__aeabi_d2iz
 296              	.LVL15:
 239:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 297              		.loc 1 239 5 is_stmt 1 view .LVU83
 298 001c 2A46     		mov	r2, r5
 299 001e 01B2     		sxth	r1, r0
 300 0020 2046     		mov	r0, r4
 301              	.LVL16:
 302              		.loc 1 239 5 is_stmt 0 view .LVU84
 303 0022 FFF7FEFF 		bl	MCI_ExecTorqueRamp
 304              	.LVL17:
 240:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 241:Src/mc_interface.c ****   }
 242:Src/mc_interface.c **** #endif
 243:Src/mc_interface.c **** }
 305              		.loc 1 243 1 view .LVU85
 306 0026 38BD     		pop	{r3, r4, r5, pc}
 307              	.LVL18:
 308              	.L13:
 309              		.loc 1 243 1 view .LVU86
 310              		.align	3
 311              	.L12:
 312 0028 B358B64D 		.word	1303795891
 313 002c 5B048140 		.word	1082197083
 314              		.cfi_endproc
 315              	.LFE1442:
 317              		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 318              		.align	1
 319              		.weak	MCI_SetCurrentReferences
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	MCI_SetCurrentReferences:
 326              	.LVL19:
 327              	.LFB1443:
 244:Src/mc_interface.c **** 
 245:Src/mc_interface.c **** /**
 246:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 247:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 248:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 249:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 250:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 251:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 252:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 253:Src/mc_interface.c ****   *         format.
 254:Src/mc_interface.c ****   * @retval none.
 255:Src/mc_interface.c ****   */
 256:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
ARM GAS  /tmp/ccRhyv0W.s 			page 11


 257:Src/mc_interface.c **** {
 328              		.loc 1 257 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333              		.loc 1 257 1 is_stmt 0 view .LVU88
 334 0000 82B0     		sub	sp, sp, #8
 335              		.cfi_def_cfa_offset 8
 258:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 259:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 260:Src/mc_interface.c ****   {
 261:Src/mc_interface.c ****     /* Nothing to do */
 262:Src/mc_interface.c ****   }
 263:Src/mc_interface.c ****   else
 264:Src/mc_interface.c ****   {
 265:Src/mc_interface.c **** #endif
 266:Src/mc_interface.c **** 
 267:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 336              		.loc 1 267 5 is_stmt 1 view .LVU89
 337              		.loc 1 267 26 is_stmt 0 view .LVU90
 338 0002 0322     		movs	r2, #3
 339 0004 0273     		strb	r2, [r0, #12]
 268:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 340              		.loc 1 268 5 is_stmt 1 view .LVU91
 341              		.loc 1 268 23 is_stmt 0 view .LVU92
 342 0006 C182     		strh	r1, [r0, #22]	@ movhi
 269:Src/mc_interface.c ****     pHandle->Iqdref.d = Iqdref.d;
 343              		.loc 1 269 5 is_stmt 1 view .LVU93
 344              		.loc 1 269 31 is_stmt 0 view .LVU94
 345 0008 0914     		asrs	r1, r1, #16
 346              		.loc 1 269 23 view .LVU95
 347 000a 0183     		strh	r1, [r0, #24]	@ movhi
 270:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 348              		.loc 1 270 5 is_stmt 1 view .LVU96
 349              		.loc 1 270 27 is_stmt 0 view .LVU97
 350 000c 0123     		movs	r3, #1
 351 000e 80F82230 		strb	r3, [r0, #34]
 271:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 352              		.loc 1 271 5 is_stmt 1 view .LVU98
 353              		.loc 1 271 36 is_stmt 0 view .LVU99
 354 0012 0423     		movs	r3, #4
 355 0014 80F82330 		strb	r3, [r0, #35]
 272:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 273:Src/mc_interface.c ****   }
 274:Src/mc_interface.c **** #endif
 275:Src/mc_interface.c **** }
 356              		.loc 1 275 1 view .LVU100
 357 0018 02B0     		add	sp, sp, #8
 358              		.cfi_def_cfa_offset 0
 359              		@ sp needed
 360 001a 7047     		bx	lr
 361              		.cfi_endproc
 362              	.LFE1443:
 364              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 365              		.align	1
 366              		.weak	MCI_SetCurrentReferences_F
ARM GAS  /tmp/ccRhyv0W.s 			page 12


 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	MCI_SetCurrentReferences_F:
 373              	.LVL20:
 374              	.LFB1444:
 276:Src/mc_interface.c **** 
 277:Src/mc_interface.c **** /**
 278:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 279:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 280:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 281:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 282:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 283:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 284:Src/mc_interface.c ****   * @param  Iqdref current (A) references on qd reference frame in qd_f_t format.
 285:Src/mc_interface.c ****   *
 286:Src/mc_interface.c ****   * @retval none.
 287:Src/mc_interface.c ****   */
 288:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F( MCI_Handle_t * pHandle, qd_f_t IqdRef )
 289:Src/mc_interface.c **** {
 375              		.loc 1 289 1 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		.loc 1 289 1 is_stmt 0 view .LVU102
 380 0000 30B5     		push	{r4, r5, lr}
 381              		.cfi_def_cfa_offset 12
 382              		.cfi_offset 4, -12
 383              		.cfi_offset 5, -8
 384              		.cfi_offset 14, -4
 385 0002 85B0     		sub	sp, sp, #20
 386              		.cfi_def_cfa_offset 32
 387 0004 0446     		mov	r4, r0
 388 0006 10EE105A 		vmov	r5, s0
 389 000a 10EE900A 		vmov	r0, s1
 390              	.LVL21:
 290:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 291:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 292:Src/mc_interface.c ****   {
 293:Src/mc_interface.c ****     /* Nothing to do */
 294:Src/mc_interface.c ****   }
 295:Src/mc_interface.c ****   else
 296:Src/mc_interface.c ****   {
 297:Src/mc_interface.c **** #endif
 298:Src/mc_interface.c ****     qd_t Iqdref;
 391              		.loc 1 298 5 is_stmt 1 view .LVU103
 299:Src/mc_interface.c ****     Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 392              		.loc 1 299 5 view .LVU104
 393              		.loc 1 299 33 is_stmt 0 view .LVU105
 394 000e FFF7FEFF 		bl	__aeabi_f2d
 395              	.LVL22:
 396              		.loc 1 299 36 view .LVU106
 397 0012 0DA3     		adr	r3, .L18
 398 0014 D3E90023 		ldrd	r2, [r3]
 399 0018 FFF7FEFF 		bl	__aeabi_dmul
 400              	.LVL23:
ARM GAS  /tmp/ccRhyv0W.s 			page 13


 401              		.loc 1 299 16 view .LVU107
 402 001c FFF7FEFF 		bl	__aeabi_d2iz
 403              	.LVL24:
 404              		.loc 1 299 14 view .LVU108
 405 0020 ADF80E00 		strh	r0, [sp, #14]	@ movhi
 300:Src/mc_interface.c ****     Iqdref.q = (int16_t) (IqdRef.q * CURRENT_CONV_FACTOR);
 406              		.loc 1 300 5 is_stmt 1 view .LVU109
 407              		.loc 1 300 33 is_stmt 0 view .LVU110
 408 0024 2846     		mov	r0, r5	@ float
 409 0026 FFF7FEFF 		bl	__aeabi_f2d
 410              	.LVL25:
 411              		.loc 1 300 36 view .LVU111
 412 002a 07A3     		adr	r3, .L18
 413 002c D3E90023 		ldrd	r2, [r3]
 414 0030 FFF7FEFF 		bl	__aeabi_dmul
 415              	.LVL26:
 416              		.loc 1 300 16 view .LVU112
 417 0034 FFF7FEFF 		bl	__aeabi_d2iz
 418              	.LVL27:
 419              		.loc 1 300 14 view .LVU113
 420 0038 ADF80C00 		strh	r0, [sp, #12]	@ movhi
 301:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, Iqdref);
 421              		.loc 1 301 5 is_stmt 1 view .LVU114
 422 003c 0399     		ldr	r1, [sp, #12]
 423 003e 2046     		mov	r0, r4
 424 0040 FFF7FEFF 		bl	MCI_SetCurrentReferences
 425              	.LVL28:
 302:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 303:Src/mc_interface.c ****   }
 304:Src/mc_interface.c **** #endif
 305:Src/mc_interface.c **** }
 426              		.loc 1 305 1 is_stmt 0 view .LVU115
 427 0044 05B0     		add	sp, sp, #20
 428              		.cfi_def_cfa_offset 12
 429              		@ sp needed
 430 0046 30BD     		pop	{r4, r5, pc}
 431              	.LVL29:
 432              	.L19:
 433              		.loc 1 305 1 view .LVU116
 434              		.align	3
 435              	.L18:
 436 0048 B358B64D 		.word	1303795891
 437 004c 5B048140 		.word	1082197083
 438              		.cfi_endproc
 439              	.LFE1444:
 441              		.section	.text.MCI_SetSpeedMode,"ax",%progbits
 442              		.align	1
 443              		.weak	MCI_SetSpeedMode
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv4-sp-d16
 449              	MCI_SetSpeedMode:
 450              	.LVL30:
 451              	.LFB1445:
 306:Src/mc_interface.c **** 
 307:Src/mc_interface.c **** /**
ARM GAS  /tmp/ccRhyv0W.s 			page 14


 308:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 309:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 310:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 311:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 312:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 313:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 314:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 315:Src/mc_interface.c ****   *         format.
 316:Src/mc_interface.c ****   * @retval none.
 317:Src/mc_interface.c ****   */
 318:Src/mc_interface.c **** __weak void MCI_SetSpeedMode( MCI_Handle_t * pHandle )
 319:Src/mc_interface.c **** {
 452              		.loc 1 319 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		.loc 1 319 1 is_stmt 0 view .LVU118
 457 0000 10B5     		push	{r4, lr}
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 4, -8
 460              		.cfi_offset 14, -4
 461 0002 0446     		mov	r4, r0
 320:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = INTERNAL;
 462              		.loc 1 320 3 is_stmt 1 view .LVU119
 463              		.loc 1 320 10 is_stmt 0 view .LVU120
 464 0004 4368     		ldr	r3, [r0, #4]
 465              		.loc 1 320 34 view .LVU121
 466 0006 0022     		movs	r2, #0
 467 0008 83F82420 		strb	r2, [r3, #36]
 321:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_SPEED_MODE );
 468              		.loc 1 321 3 is_stmt 1 view .LVU122
 469 000c 0321     		movs	r1, #3
 470 000e 0068     		ldr	r0, [r0]
 471              	.LVL31:
 472              		.loc 1 321 3 is_stmt 0 view .LVU123
 473 0010 FFF7FEFF 		bl	STC_SetControlMode
 474              	.LVL32:
 322:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 475              		.loc 1 322 3 is_stmt 1 view .LVU124
 476              		.loc 1 322 34 is_stmt 0 view .LVU125
 477 0014 0323     		movs	r3, #3
 478 0016 84F82330 		strb	r3, [r4, #35]
 323:Src/mc_interface.c **** }
 479              		.loc 1 323 1 view .LVU126
 480 001a 10BD     		pop	{r4, pc}
 481              		.loc 1 323 1 view .LVU127
 482              		.cfi_endproc
 483              	.LFE1445:
 485              		.section	.text.MCI_SetOpenLoopCurrent,"ax",%progbits
 486              		.align	1
 487              		.weak	MCI_SetOpenLoopCurrent
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu fpv4-sp-d16
 493              	MCI_SetOpenLoopCurrent:
 494              	.LVL33:
ARM GAS  /tmp/ccRhyv0W.s 			page 15


 495              	.LFB1446:
 324:Src/mc_interface.c **** 
 325:Src/mc_interface.c **** /**
 326:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 327:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 328:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 329:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 330:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 331:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 332:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 333:Src/mc_interface.c ****   *         format.
 334:Src/mc_interface.c ****   * @retval none.
 335:Src/mc_interface.c ****   */
 336:Src/mc_interface.c **** __weak void MCI_SetOpenLoopCurrent( MCI_Handle_t * pHandle )
 337:Src/mc_interface.c **** {
 496              		.loc 1 337 1 is_stmt 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		.loc 1 337 1 is_stmt 0 view .LVU129
 501 0000 10B5     		push	{r4, lr}
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 505 0002 0446     		mov	r4, r0
 338:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 506              		.loc 1 338 3 is_stmt 1 view .LVU130
 507              		.loc 1 338 10 is_stmt 0 view .LVU131
 508 0004 4368     		ldr	r3, [r0, #4]
 509              		.loc 1 338 34 view .LVU132
 510 0006 0122     		movs	r2, #1
 511 0008 83F82420 		strb	r2, [r3, #36]
 339:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE );
 512              		.loc 1 339 3 is_stmt 1 view .LVU133
 513 000c 0221     		movs	r1, #2
 514 000e 0068     		ldr	r0, [r0]
 515              	.LVL34:
 516              		.loc 1 339 3 is_stmt 0 view .LVU134
 517 0010 FFF7FEFF 		bl	STC_SetControlMode
 518              	.LVL35:
 340:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 519              		.loc 1 340 3 is_stmt 1 view .LVU135
 520              		.loc 1 340 34 is_stmt 0 view .LVU136
 521 0014 0223     		movs	r3, #2
 522 0016 84F82330 		strb	r3, [r4, #35]
 341:Src/mc_interface.c **** }
 523              		.loc 1 341 1 view .LVU137
 524 001a 10BD     		pop	{r4, pc}
 525              		.loc 1 341 1 view .LVU138
 526              		.cfi_endproc
 527              	.LFE1446:
 529              		.section	.text.MCI_SetOpenLoopVoltage,"ax",%progbits
 530              		.align	1
 531              		.weak	MCI_SetOpenLoopVoltage
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
ARM GAS  /tmp/ccRhyv0W.s 			page 16


 535              		.fpu fpv4-sp-d16
 537              	MCI_SetOpenLoopVoltage:
 538              	.LVL36:
 539              	.LFB1447:
 342:Src/mc_interface.c **** 
 343:Src/mc_interface.c **** /**
 344:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 345:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 346:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 347:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 348:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 349:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 350:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 351:Src/mc_interface.c ****   *         format.
 352:Src/mc_interface.c ****   * @retval none.
 353:Src/mc_interface.c ****   */
 354:Src/mc_interface.c **** __weak void MCI_SetOpenLoopVoltage( MCI_Handle_t * pHandle )
 355:Src/mc_interface.c **** {
 540              		.loc 1 355 1 is_stmt 1 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		.loc 1 355 1 is_stmt 0 view .LVU140
 545 0000 38B5     		push	{r3, r4, r5, lr}
 546              		.cfi_def_cfa_offset 16
 547              		.cfi_offset 3, -16
 548              		.cfi_offset 4, -12
 549              		.cfi_offset 5, -8
 550              		.cfi_offset 14, -4
 551 0002 0446     		mov	r4, r0
 356:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 552              		.loc 1 356 3 is_stmt 1 view .LVU141
 553              		.loc 1 356 10 is_stmt 0 view .LVU142
 554 0004 4368     		ldr	r3, [r0, #4]
 555              		.loc 1 356 34 view .LVU143
 556 0006 0125     		movs	r5, #1
 557 0008 83F82450 		strb	r5, [r3, #36]
 357:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 558              		.loc 1 357 3 is_stmt 1 view .LVU144
 559 000c 2946     		mov	r1, r5
 560 000e 0068     		ldr	r0, [r0]
 561              	.LVL37:
 562              		.loc 1 357 3 is_stmt 0 view .LVU145
 563 0010 FFF7FEFF 		bl	STC_SetControlMode
 564              	.LVL38:
 358:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 565              		.loc 1 358 3 is_stmt 1 view .LVU146
 566              		.loc 1 358 34 is_stmt 0 view .LVU147
 567 0014 84F82350 		strb	r5, [r4, #35]
 359:Src/mc_interface.c **** }
 568              		.loc 1 359 1 view .LVU148
 569 0018 38BD     		pop	{r3, r4, r5, pc}
 570              		.loc 1 359 1 view .LVU149
 571              		.cfi_endproc
 572              	.LFE1447:
 574              		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 575              		.align	1
ARM GAS  /tmp/ccRhyv0W.s 			page 17


 576              		.weak	MCI_GetCalibratedOffsetsMotor
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	MCI_GetCalibratedOffsetsMotor:
 583              	.LVL39:
 584              	.LFB1451:
 360:Src/mc_interface.c **** 
 361:Src/mc_interface.c **** /**
 362:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure.
 363:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 364:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 365:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 366:Src/mc_interface.c ****   *         Before calling MCI_StartMotor it is mandatory to execute one of
 367:Src/mc_interface.c ****   *         these commands:\n
 368:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 369:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 370:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 371:Src/mc_interface.c ****   *         Otherwise the behavior in run state will be unpredictable.\n
 372:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartMotor command is used just to begin the
 373:Src/mc_interface.c ****   *         start-up procedure moving the state machine from IDLE state to
 374:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartMotor is not blocking the execution
 375:Src/mc_interface.c ****   *         of project until the motor is really running; to do this, the user
 376:Src/mc_interface.c ****   *         have to check the state machine and verify that the RUN state (or
 377:Src/mc_interface.c ****   *         any other state) has been reached.
 378:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 379:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 380:Src/mc_interface.c ****   *         otherwise it return false.
 381:Src/mc_interface.c ****   */
 382:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 383:Src/mc_interface.c **** {
 384:Src/mc_interface.c ****   bool RetVal;
 385:Src/mc_interface.c **** 
 386:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 387:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 388:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 389:Src/mc_interface.c ****   {
 390:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 391:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 392:Src/mc_interface.c ****     RetVal = true;
 393:Src/mc_interface.c ****   }
 394:Src/mc_interface.c ****   else
 395:Src/mc_interface.c ****   {
 396:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 397:Src/mc_interface.c ****     RetVal = false;
 398:Src/mc_interface.c ****   }
 399:Src/mc_interface.c **** 
 400:Src/mc_interface.c ****   return (RetVal);
 401:Src/mc_interface.c **** }
 402:Src/mc_interface.c **** 
 403:Src/mc_interface.c **** /**
 404:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure with an
 405:Src/mc_interface.c ****   *          offset calibration even if it has been already done previously.
 406:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 407:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 408:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
ARM GAS  /tmp/ccRhyv0W.s 			page 18


 409:Src/mc_interface.c ****   *         Before calling MCI_StartWithMeasurementOffset it is mandatory to execute
 410:Src/mc_interface.c ****   *         one of these commands:\n
 411:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 412:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 413:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 414:Src/mc_interface.c ****   *         Otherwise the behaviour in run state will be unpredictable.\n
 415:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartWithMeasurementOffset command is used just to
 416:Src/mc_interface.c ****   *         begin the start-up procedure moving the state machine from IDLE state to
 417:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartWithMeasurementOffset is not blocking
 418:Src/mc_interface.c ****   *         the execution of project until the motor is really running; to do this,
 419:Src/mc_interface.c ****   *         the user have to check the state machine and verify that the RUN state (or
 420:Src/mc_interface.c ****   *         any other state) has been reached.
 421:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 422:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 423:Src/mc_interface.c ****   *         otherwise it return false.
 424:Src/mc_interface.c ****   */
 425:Src/mc_interface.c **** __weak bool MCI_StartWithMeasurementOffset(MCI_Handle_t* pHandle)
 426:Src/mc_interface.c **** {
 427:Src/mc_interface.c ****   bool RetVal;
 428:Src/mc_interface.c **** 
 429:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 430:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 431:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 432:Src/mc_interface.c ****   {
 433:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 434:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 435:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 436:Src/mc_interface.c ****     RetVal = true;
 437:Src/mc_interface.c ****   }
 438:Src/mc_interface.c ****   else
 439:Src/mc_interface.c ****   {
 440:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 441:Src/mc_interface.c ****     RetVal = false;
 442:Src/mc_interface.c ****   }
 443:Src/mc_interface.c **** 
 444:Src/mc_interface.c ****   return (RetVal);
 445:Src/mc_interface.c **** }
 446:Src/mc_interface.c **** 
 447:Src/mc_interface.c **** /**
 448:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 449:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 450:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 451:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 452:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 453:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 454:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 455:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 456:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 457:Src/mc_interface.c ****   *         any other state) has been reached.
 458:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 459:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 460:Src/mc_interface.c ****   *         otherwise it return false.
 461:Src/mc_interface.c ****   */
 462:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 463:Src/mc_interface.c **** {
 464:Src/mc_interface.c ****   bool RetVal;
 465:Src/mc_interface.c **** 
ARM GAS  /tmp/ccRhyv0W.s 			page 19


 466:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 467:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 468:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 469:Src/mc_interface.c ****   {
 470:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 471:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 472:Src/mc_interface.c ****     RetVal = true;
 473:Src/mc_interface.c ****   }
 474:Src/mc_interface.c ****   else
 475:Src/mc_interface.c ****   {
 476:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 477:Src/mc_interface.c ****     RetVal = false;
 478:Src/mc_interface.c ****   }
 479:Src/mc_interface.c **** 
 480:Src/mc_interface.c ****   return (RetVal);
 481:Src/mc_interface.c **** }
 482:Src/mc_interface.c **** 
 483:Src/mc_interface.c **** /**
 484:Src/mc_interface.c ****   * @brief  This is a user command used to get the phase offset values.
 485:Src/mc_interface.c ****   *         User must take  care of this possibility by checking the return value.\n
 486:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_GetCalibratedOffsetsMotor command is used to get the phase
 487:Src/mc_interface.c ****   *          offset values .
 488:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 489:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that conatains phase A, and C values.
 490:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 491:Src/mc_interface.c ****   *         otherwise it return false.
 492:Src/mc_interface.c ****   */
 493:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizati
 494:Src/mc_interface.c **** {
 585              		.loc 1 494 1 is_stmt 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		.loc 1 494 1 is_stmt 0 view .LVU151
 590 0000 10B5     		push	{r4, lr}
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 4, -8
 593              		.cfi_offset 14, -4
 495:Src/mc_interface.c ****   bool RetVal;
 594              		.loc 1 495 3 is_stmt 1 view .LVU152
 496:Src/mc_interface.c **** 
 497:Src/mc_interface.c ****   if ( pHandle->pPWM->offsetCalibStatus == true )
 595              		.loc 1 497 3 view .LVU153
 596              		.loc 1 497 15 is_stmt 0 view .LVU154
 597 0002 8068     		ldr	r0, [r0, #8]
 598              	.LVL40:
 599              		.loc 1 497 21 view .LVU155
 600 0004 90F86E40 		ldrb	r4, [r0, #110]	@ zero_extendqisi2
 601              		.loc 1 497 6 view .LVU156
 602 0008 0CB9     		cbnz	r4, .L29
 603              	.LVL41:
 604              	.L27:
 498:Src/mc_interface.c ****   {
 499:Src/mc_interface.c ****     PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 500:Src/mc_interface.c ****     RetVal = true;
 501:Src/mc_interface.c ****   }
 502:Src/mc_interface.c ****   else
ARM GAS  /tmp/ccRhyv0W.s 			page 20


 503:Src/mc_interface.c ****   {
 504:Src/mc_interface.c ****     RetVal = false;
 505:Src/mc_interface.c ****   }
 506:Src/mc_interface.c **** 
 507:Src/mc_interface.c ****   return(RetVal);
 605              		.loc 1 507 3 is_stmt 1 view .LVU157
 508:Src/mc_interface.c **** }
 606              		.loc 1 508 1 is_stmt 0 view .LVU158
 607 000a 2046     		mov	r0, r4
 608 000c 10BD     		pop	{r4, pc}
 609              	.LVL42:
 610              	.L29:
 499:Src/mc_interface.c ****     RetVal = true;
 611              		.loc 1 499 5 is_stmt 1 view .LVU159
 612 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 613              	.LVL43:
 500:Src/mc_interface.c ****   }
 614              		.loc 1 500 5 view .LVU160
 500:Src/mc_interface.c ****   }
 615              		.loc 1 500 5 is_stmt 0 view .LVU161
 616 0012 FAE7     		b	.L27
 617              		.cfi_endproc
 618              	.LFE1451:
 620              		.section	.text.MCI_FaultProcessing,"ax",%progbits
 621              		.align	1
 622              		.weak	MCI_FaultProcessing
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	MCI_FaultProcessing:
 629              	.LVL44:
 630              	.LFB1455:
 509:Src/mc_interface.c **** 
 510:Src/mc_interface.c **** /**
 511:Src/mc_interface.c ****   * @brief  This is a user command used to set the phase offset values.
 512:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 513:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 514:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 515:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 516:Src/mc_interface.c ****   *          offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 517:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 518:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 519:Src/mc_interface.c ****   *         any other state) has been reached.
 520:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 521:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that contains phase A, and C values.
 522:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 523:Src/mc_interface.c ****   *         otherwise it return false.
 524:Src/mc_interface.c ****   */
 525:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor( MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizat
 526:Src/mc_interface.c **** {
 527:Src/mc_interface.c ****   bool RetVal;
 528:Src/mc_interface.c **** 
 529:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 530:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 531:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 532:Src/mc_interface.c ****   {
ARM GAS  /tmp/ccRhyv0W.s 			page 21


 533:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 534:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 535:Src/mc_interface.c ****       RetVal = true;
 536:Src/mc_interface.c ****   }
 537:Src/mc_interface.c **** 
 538:Src/mc_interface.c ****     return(RetVal);
 539:Src/mc_interface.c **** }
 540:Src/mc_interface.c **** 
 541:Src/mc_interface.c **** /**
 542:Src/mc_interface.c ****   * @brief  This is a user command used to begin the stop motor procedure.
 543:Src/mc_interface.c ****   *         If the state machine is in RUN or START states the command is
 544:Src/mc_interface.c ****   *         executed instantaneously otherwise the command is discarded. User
 545:Src/mc_interface.c ****   *         must take care of this possibility by checking the return value.\n
 546:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StopMotor command is used just to begin the
 547:Src/mc_interface.c ****   *         stop motor procedure moving the state machine to ANY_STOP.
 548:Src/mc_interface.c ****   *         The command MCI_StopMotor is not blocking the execution of project
 549:Src/mc_interface.c ****   *         until the motor is really stopped; to do this, the user have to
 550:Src/mc_interface.c ****   *         check the state machine and verify that the IDLE state has been
 551:Src/mc_interface.c ****   *         reached again.
 552:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 553:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 554:Src/mc_interface.c ****   *         otherwise it return false.
 555:Src/mc_interface.c ****   */
 556:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t * pHandle)
 557:Src/mc_interface.c **** {
 558:Src/mc_interface.c ****   bool RetVal;
 559:Src/mc_interface.c ****   bool status;
 560:Src/mc_interface.c ****   MCI_State_t State;
 561:Src/mc_interface.c **** 
 562:Src/mc_interface.c ****   State = MCI_GetSTMState(pHandle);
 563:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 564:Src/mc_interface.c ****   {
 565:Src/mc_interface.c ****     status = false;
 566:Src/mc_interface.c ****   }
 567:Src/mc_interface.c ****   else
 568:Src/mc_interface.c ****   {
 569:Src/mc_interface.c ****     status = true;
 570:Src/mc_interface.c ****   }
 571:Src/mc_interface.c **** 
 572:Src/mc_interface.c ****   if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 573:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 574:Src/mc_interface.c ****        status == true )
 575:Src/mc_interface.c ****   {
 576:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_STOP;
 577:Src/mc_interface.c ****     RetVal = true;
 578:Src/mc_interface.c ****   }
 579:Src/mc_interface.c ****   else
 580:Src/mc_interface.c ****   {
 581:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 582:Src/mc_interface.c ****     RetVal = false;
 583:Src/mc_interface.c ****   }
 584:Src/mc_interface.c **** 
 585:Src/mc_interface.c ****   return (RetVal);
 586:Src/mc_interface.c **** }
 587:Src/mc_interface.c **** 
 588:Src/mc_interface.c **** /**
 589:Src/mc_interface.c ****   * @brief  This is a user command used to indicate that the user has seen the
ARM GAS  /tmp/ccRhyv0W.s 			page 22


 590:Src/mc_interface.c ****   *         error condition. If is possible, the command is executed
 591:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 592:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 593:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 594:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 595:Src/mc_interface.c ****   *         otherwise it return false.
 596:Src/mc_interface.c ****   */
 597:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 598:Src/mc_interface.c **** {
 599:Src/mc_interface.c ****   bool RetVal;
 600:Src/mc_interface.c **** 
 601:Src/mc_interface.c ****   if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 602:Src/mc_interface.c ****   {
 603:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
 604:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 605:Src/mc_interface.c ****     RetVal = true;
 606:Src/mc_interface.c ****   }
 607:Src/mc_interface.c ****   else
 608:Src/mc_interface.c ****   {
 609:Src/mc_interface.c ****     /* reject the command as the conditions are not met */
 610:Src/mc_interface.c ****     RetVal = false;
 611:Src/mc_interface.c ****   }
 612:Src/mc_interface.c ****   return (RetVal);
 613:Src/mc_interface.c **** }
 614:Src/mc_interface.c **** 
 615:Src/mc_interface.c **** /**
 616:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 617:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 618:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 619:Src/mc_interface.c ****  * @param pHanlde pointer of type  STM_Handle_t
 620:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 621:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 622:Src/mc_interface.c ****  * @retval State_t New state machine state after fault processing
 623:Src/mc_interface.c ****  */
 624:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 625:Src/mc_interface.c **** {
 631              		.loc 1 625 1 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 626:Src/mc_interface.c ****   /* Set current errors */
 627:Src/mc_interface.c ****   pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 636              		.loc 1 627 3 view .LVU163
 637              		.loc 1 627 36 is_stmt 0 view .LVU164
 638 0000 C38B     		ldrh	r3, [r0, #30]
 639              		.loc 1 627 67 view .LVU165
 640 0002 0B43     		orrs	r3, r3, r1
 641 0004 23EA0203 		bic	r3, r3, r2
 642              		.loc 1 627 26 view .LVU166
 643 0008 C383     		strh	r3, [r0, #30]	@ movhi
 628:Src/mc_interface.c ****   pHandle->PastFaults |= hSetErrors;
 644              		.loc 1 628 3 is_stmt 1 view .LVU167
 645              		.loc 1 628 23 is_stmt 0 view .LVU168
 646 000a 038C     		ldrh	r3, [r0, #32]
 647 000c 1943     		orrs	r1, r1, r3
 648              	.LVL45:
ARM GAS  /tmp/ccRhyv0W.s 			page 23


 649              		.loc 1 628 23 view .LVU169
 650 000e 0184     		strh	r1, [r0, #32]	@ movhi
 629:Src/mc_interface.c **** 
 630:Src/mc_interface.c ****   return;
 651              		.loc 1 630 3 is_stmt 1 view .LVU170
 631:Src/mc_interface.c **** }
 652              		.loc 1 631 1 is_stmt 0 view .LVU171
 653 0010 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE1455:
 657              		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 658              		.align	1
 659              		.weak	MCI_ExecBufferedCommands
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu fpv4-sp-d16
 665              	MCI_ExecBufferedCommands:
 666              	.LVL46:
 667              	.LFB1456:
 632:Src/mc_interface.c **** 
 633:Src/mc_interface.c **** /**
 634:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 635:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 636:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 637:Src/mc_interface.c ****   *         occurs.
 638:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 639:Src/mc_interface.c ****   * @retval none.
 640:Src/mc_interface.c ****   */
 641:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 642:Src/mc_interface.c **** {
 668              		.loc 1 642 1 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 643:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 644:Src/mc_interface.c ****   if (NULL == pHandle)
 645:Src/mc_interface.c ****   {
 646:Src/mc_interface.c ****     /* Nothing to do */
 647:Src/mc_interface.c ****   }
 648:Src/mc_interface.c ****   else
 649:Src/mc_interface.c ****   {
 650:Src/mc_interface.c **** #endif
 651:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 672              		.loc 1 651 5 view .LVU173
 673              		.loc 1 651 17 is_stmt 0 view .LVU174
 674 0000 90F82230 		ldrb	r3, [r0, #34]	@ zero_extendqisi2
 675              		.loc 1 651 8 view .LVU175
 676 0004 012B     		cmp	r3, #1
 677 0006 00D0     		beq	.L45
 678 0008 7047     		bx	lr
 679              	.L45:
 642:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 680              		.loc 1 642 1 view .LVU176
 681 000a 10B5     		push	{r4, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 4, -8
ARM GAS  /tmp/ccRhyv0W.s 			page 24


 684              		.cfi_offset 14, -4
 685 000c 0446     		mov	r4, r0
 686              	.LBB28:
 652:Src/mc_interface.c ****     {
 653:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 687              		.loc 1 653 7 is_stmt 1 view .LVU177
 688              	.LVL47:
 654:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 689              		.loc 1 654 7 view .LVU178
 690              		.loc 1 654 22 is_stmt 0 view .LVU179
 691 000e 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 692 0010 013B     		subs	r3, r3, #1
 693 0012 032B     		cmp	r3, #3
 694 0014 40D8     		bhi	.L33
 695 0016 DFE803F0 		tbb	[pc, r3]
 696              	.L35:
 697 001a 02       		.byte	(.L38-.L35)/2
 698 001b 27       		.byte	(.L37-.L35)/2
 699 001c 36       		.byte	(.L36-.L35)/2
 700 001d 15       		.byte	(.L34-.L35)/2
 701              		.p2align 1
 702              	.L38:
 655:Src/mc_interface.c ****       {
 656:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 657:Src/mc_interface.c ****         {
 658:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 703              		.loc 1 658 11 is_stmt 1 view .LVU180
 704              		.loc 1 658 18 is_stmt 0 view .LVU181
 705 001e 4368     		ldr	r3, [r0, #4]
 706              		.loc 1 658 42 view .LVU182
 707 0020 0022     		movs	r2, #0
 708 0022 83F82420 		strb	r2, [r3, #36]
 659:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 709              		.loc 1 659 11 is_stmt 1 view .LVU183
 710 0026 0321     		movs	r1, #3
 711 0028 0068     		ldr	r0, [r0]
 712              	.LVL48:
 713              		.loc 1 659 11 is_stmt 0 view .LVU184
 714 002a FFF7FEFF 		bl	STC_SetControlMode
 715              	.LVL49:
 660:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 716              		.loc 1 660 11 is_stmt 1 view .LVU185
 717              		.loc 1 660 36 is_stmt 0 view .LVU186
 718 002e 628B     		ldrh	r2, [r4, #26]
 719 0030 B4F90E10 		ldrsh	r1, [r4, #14]
 720 0034 2068     		ldr	r0, [r4]
 721 0036 FFF7FEFF 		bl	STC_ExecRamp
 722              	.LVL50:
 661:Src/mc_interface.c ****           break;
 723              		.loc 1 661 11 is_stmt 1 view .LVU187
 724              	.L39:
 662:Src/mc_interface.c ****         } 
 663:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDSIN:
 664:Src/mc_interface.c ****         {
 665:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 666:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 667:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
ARM GAS  /tmp/ccRhyv0W.s 			page 25


 668:Src/mc_interface.c ****           break;
 669:Src/mc_interface.c ****         }
 670:Src/mc_interface.c **** 
 671:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 672:Src/mc_interface.c ****         {
 673:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 674:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 675:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 676:Src/mc_interface.c ****           break;
 677:Src/mc_interface.c ****         }
 678:Src/mc_interface.c **** 
 679:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 680:Src/mc_interface.c ****         {
 681:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 682:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 683:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 684:Src/mc_interface.c ****           break;
 685:Src/mc_interface.c ****         }
 686:Src/mc_interface.c ****         default:
 687:Src/mc_interface.c ****           break;
 688:Src/mc_interface.c ****       }
 689:Src/mc_interface.c **** 
 690:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 725              		.loc 1 690 7 view .LVU188
 726              		.loc 1 690 10 is_stmt 0 view .LVU189
 727 003a 68B3     		cbz	r0, .L33
 728              	.LVL51:
 729              	.L40:
 691:Src/mc_interface.c ****       {
 692:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 730              		.loc 1 692 9 is_stmt 1 view .LVU190
 731              		.loc 1 692 31 is_stmt 0 view .LVU191
 732 003c 0223     		movs	r3, #2
 733 003e 84F82230 		strb	r3, [r4, #34]
 734              	.L31:
 735              		.loc 1 692 31 view .LVU192
 736              	.LBE28:
 693:Src/mc_interface.c ****       }
 694:Src/mc_interface.c ****       else
 695:Src/mc_interface.c ****       {
 696:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 697:Src/mc_interface.c ****       }
 698:Src/mc_interface.c ****     }
 699:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 700:Src/mc_interface.c ****   }
 701:Src/mc_interface.c **** #endif
 702:Src/mc_interface.c **** }
 737              		.loc 1 702 1 view .LVU193
 738 0042 10BD     		pop	{r4, pc}
 739              	.LVL52:
 740              	.L34:
 741              	.LBB29:
 665:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 742              		.loc 1 665 11 is_stmt 1 view .LVU194
 665:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 743              		.loc 1 665 18 is_stmt 0 view .LVU195
 744 0044 4368     		ldr	r3, [r0, #4]
ARM GAS  /tmp/ccRhyv0W.s 			page 26


 665:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 745              		.loc 1 665 42 view .LVU196
 746 0046 0022     		movs	r2, #0
 747 0048 83F82420 		strb	r2, [r3, #36]
 666:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
 748              		.loc 1 666 11 is_stmt 1 view .LVU197
 749 004c 0321     		movs	r1, #3
 750 004e 0068     		ldr	r0, [r0]
 751              	.LVL53:
 666:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecSin(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hSpeed
 752              		.loc 1 666 11 is_stmt 0 view .LVU198
 753 0050 FFF7FEFF 		bl	STC_SetControlMode
 754              	.LVL54:
 667:Src/mc_interface.c ****           break;
 755              		.loc 1 667 11 is_stmt 1 view .LVU199
 667:Src/mc_interface.c ****           break;
 756              		.loc 1 667 36 is_stmt 0 view .LVU200
 757 0054 B4F91030 		ldrsh	r3, [r4, #16]
 758 0058 B4F91220 		ldrsh	r2, [r4, #18]
 759 005c B4F90E10 		ldrsh	r1, [r4, #14]
 760 0060 2068     		ldr	r0, [r4]
 761 0062 FFF7FEFF 		bl	STC_ExecSin
 762              	.LVL55:
 668:Src/mc_interface.c ****         }
 763              		.loc 1 668 11 is_stmt 1 view .LVU201
 764 0066 E8E7     		b	.L39
 765              	.LVL56:
 766              	.L37:
 673:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 767              		.loc 1 673 11 view .LVU202
 673:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 768              		.loc 1 673 18 is_stmt 0 view .LVU203
 769 0068 4368     		ldr	r3, [r0, #4]
 673:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 770              		.loc 1 673 42 view .LVU204
 771 006a 0022     		movs	r2, #0
 772 006c 83F82420 		strb	r2, [r3, #36]
 674:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 773              		.loc 1 674 11 is_stmt 1 view .LVU205
 774 0070 0421     		movs	r1, #4
 775 0072 0068     		ldr	r0, [r0]
 776              	.LVL57:
 674:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 777              		.loc 1 674 11 is_stmt 0 view .LVU206
 778 0074 FFF7FEFF 		bl	STC_SetControlMode
 779              	.LVL58:
 675:Src/mc_interface.c ****           break;
 780              		.loc 1 675 11 is_stmt 1 view .LVU207
 675:Src/mc_interface.c ****           break;
 781              		.loc 1 675 36 is_stmt 0 view .LVU208
 782 0078 628B     		ldrh	r2, [r4, #26]
 783 007a B4F91410 		ldrsh	r1, [r4, #20]
 784 007e 2068     		ldr	r0, [r4]
 785 0080 FFF7FEFF 		bl	STC_ExecRamp
 786              	.LVL59:
 676:Src/mc_interface.c ****         }
 787              		.loc 1 676 11 is_stmt 1 view .LVU209
ARM GAS  /tmp/ccRhyv0W.s 			page 27


 788 0084 D9E7     		b	.L39
 789              	.LVL60:
 790              	.L36:
 681:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 791              		.loc 1 681 11 view .LVU210
 681:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 792              		.loc 1 681 18 is_stmt 0 view .LVU211
 793 0086 4368     		ldr	r3, [r0, #4]
 681:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 794              		.loc 1 681 42 view .LVU212
 795 0088 0122     		movs	r2, #1
 796 008a 83F82420 		strb	r2, [r3, #36]
 682:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 797              		.loc 1 682 11 is_stmt 1 view .LVU213
 682:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 798              		.loc 1 682 18 is_stmt 0 view .LVU214
 799 008e 4368     		ldr	r3, [r0, #4]
 682:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 800              		.loc 1 682 37 view .LVU215
 801 0090 D0F81620 		ldr	r2, [r0, #22]	@ unaligned
 802 0094 1A61     		str	r2, [r3, #16]	@ unaligned
 683:Src/mc_interface.c ****           break;
 803              		.loc 1 683 11 is_stmt 1 view .LVU216
 804              	.LVL61:
 684:Src/mc_interface.c ****         }
 805              		.loc 1 684 11 view .LVU217
 690:Src/mc_interface.c ****       {
 806              		.loc 1 690 7 view .LVU218
 807 0096 D1E7     		b	.L40
 808              	.LVL62:
 809              	.L33:
 696:Src/mc_interface.c ****       }
 810              		.loc 1 696 9 view .LVU219
 696:Src/mc_interface.c ****       }
 811              		.loc 1 696 31 is_stmt 0 view .LVU220
 812 0098 0323     		movs	r3, #3
 813 009a 84F82230 		strb	r3, [r4, #34]
 814              	.LBE29:
 815              		.loc 1 702 1 view .LVU221
 816 009e D0E7     		b	.L31
 817              		.cfi_endproc
 818              	.LFE1456:
 820              		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 821              		.align	1
 822              		.weak	MCI_IsCommandAcknowledged
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 826              		.fpu fpv4-sp-d16
 828              	MCI_IsCommandAcknowledged:
 829              	.LVL63:
 830              	.LFB1457:
 703:Src/mc_interface.c **** 
 704:Src/mc_interface.c **** /**
 705:Src/mc_interface.c ****   * @brief  It returns information about the state of the last buffered command.
 706:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 707:Src/mc_interface.c ****   * @retval CommandState_t  It can be one of the following codes:
ARM GAS  /tmp/ccRhyv0W.s 			page 28


 708:Src/mc_interface.c ****   *         - MCI_BUFFER_EMPTY if no buffered command has been called.
 709:Src/mc_interface.c ****   *         - MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 710:Src/mc_interface.c ****   *         condition hasn't already occurred.
 711:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_SUCCESFULLY if the buffered command has
 712:Src/mc_interface.c ****   *         been executed successfully. In this case calling this function reset
 713:Src/mc_interface.c ****   *         the command state to BC_BUFFER_EMPTY.
 714:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_UNSUCCESFULLY if the buffered command has
 715:Src/mc_interface.c ****   *         been executed unsuccessfully. In this case calling this function
 716:Src/mc_interface.c ****   *         reset the command state to BC_BUFFER_EMPTY.
 717:Src/mc_interface.c ****   */
 718:Src/mc_interface.c **** __weak MCI_CommandState_t  MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 719:Src/mc_interface.c **** {
 831              		.loc 1 719 1 is_stmt 1 view -0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836              		.loc 1 719 1 is_stmt 0 view .LVU223
 837 0000 0346     		mov	r3, r0
 720:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 838              		.loc 1 720 3 is_stmt 1 view .LVU224
 721:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 722:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 723:Src/mc_interface.c ****   {
 724:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 725:Src/mc_interface.c ****   }
 726:Src/mc_interface.c ****   else
 727:Src/mc_interface.c ****   {
 728:Src/mc_interface.c **** #endif
 729:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 839              		.loc 1 729 5 view .LVU225
 840              		.loc 1 729 12 is_stmt 0 view .LVU226
 841 0002 90F82200 		ldrb	r0, [r0, #34]	@ zero_extendqisi2
 842              	.LVL64:
 730:Src/mc_interface.c **** 
 731:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESFULLY == retV
 843              		.loc 1 731 5 is_stmt 1 view .LVU227
 844              		.loc 1 731 54 is_stmt 0 view .LVU228
 845 0006 821E     		subs	r2, r0, #2
 846 0008 D2B2     		uxtb	r2, r2
 847              		.loc 1 731 8 view .LVU229
 848 000a 012A     		cmp	r2, #1
 849 000c 00D9     		bls	.L48
 850              	.L47:
 732:Src/mc_interface.c ****     {
 733:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 734:Src/mc_interface.c ****     }
 735:Src/mc_interface.c ****     else
 736:Src/mc_interface.c ****     {
 737:Src/mc_interface.c ****       /* Nothing to do */
 738:Src/mc_interface.c ****     }
 851              		.loc 1 738 5 is_stmt 1 view .LVU230
 739:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 740:Src/mc_interface.c ****   }
 741:Src/mc_interface.c **** #endif
 742:Src/mc_interface.c ****   return (retVal);
 852              		.loc 1 742 3 view .LVU231
ARM GAS  /tmp/ccRhyv0W.s 			page 29


 743:Src/mc_interface.c **** }
 853              		.loc 1 743 1 is_stmt 0 view .LVU232
 854 000e 7047     		bx	lr
 855              	.L48:
 733:Src/mc_interface.c ****     }
 856              		.loc 1 733 7 is_stmt 1 view .LVU233
 733:Src/mc_interface.c ****     }
 857              		.loc 1 733 29 is_stmt 0 view .LVU234
 858 0010 0022     		movs	r2, #0
 859 0012 83F82220 		strb	r2, [r3, #34]
 860 0016 FAE7     		b	.L47
 861              		.cfi_endproc
 862              	.LFE1457:
 864              		.section	.text.MCI_GetLastCommand,"ax",%progbits
 865              		.align	1
 866              		.weak	MCI_GetLastCommand
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu fpv4-sp-d16
 872              	MCI_GetLastCommand:
 873              	.LVL65:
 874              	.LFB1458:
 744:Src/mc_interface.c **** /**
 745:Src/mc_interface.c ****   * @brief  It returns information about the state of the last buffered command.
 746:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 747:Src/mc_interface.c ****   * @retval CommandState_t  It can be one of the following codes:
 748:Src/mc_interface.c ****   *         - MCI_NOCOMMANDSYET 
 749:Src/mc_interface.c ****   *         - MCI_CMD_EXECSPEEDRAMP 
 750:Src/mc_interface.c ****   *         - MCI_CMD_EXECTORQUERAMP 
 751:Src/mc_interface.c ****   *         - MCI_CMD_SETCURRENTREFERENCES 
 752:Src/mc_interface.c ****   *         - MCI_CMD_EXECSPEEDSIN
 753:Src/mc_interface.c ****   */
 754:Src/mc_interface.c **** __weak MCI_UserCommands_t  MCI_GetLastCommand(MCI_Handle_t *pHandle)
 755:Src/mc_interface.c **** {
 875              		.loc 1 755 1 is_stmt 1 view -0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 756:Src/mc_interface.c ****   MCI_UserCommands_t retVal;
 880              		.loc 1 756 3 view .LVU236
 757:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 758:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 759:Src/mc_interface.c ****   {
 760:Src/mc_interface.c ****     retVal = MCI_NOCOMMANDSYET;
 761:Src/mc_interface.c ****   }
 762:Src/mc_interface.c **** #endif
 763:Src/mc_interface.c ****     retVal = pHandle->lastCommand;
 881              		.loc 1 763 5 view .LVU237
 764:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 765:Src/mc_interface.c ****   }
 766:Src/mc_interface.c **** #endif
 767:Src/mc_interface.c ****   return (retVal);
 882              		.loc 1 767 3 view .LVU238
 768:Src/mc_interface.c **** }
 883              		.loc 1 768 1 is_stmt 0 view .LVU239
ARM GAS  /tmp/ccRhyv0W.s 			page 30


 884 0000 007B     		ldrb	r0, [r0, #12]	@ zero_extendqisi2
 885              	.LVL66:
 886              		.loc 1 768 1 view .LVU240
 887 0002 7047     		bx	lr
 888              		.cfi_endproc
 889              	.LFE1458:
 891              		.section	.text.MCI_GetSTMState,"ax",%progbits
 892              		.align	1
 893              		.weak	MCI_GetSTMState
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu fpv4-sp-d16
 899              	MCI_GetSTMState:
 900              	.LVL67:
 901              	.LFB1459:
 769:Src/mc_interface.c **** 
 770:Src/mc_interface.c **** /**
 771:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 772:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 773:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 774:Src/mc_interface.c ****   */
 775:Src/mc_interface.c **** __weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
 776:Src/mc_interface.c **** {
 902              		.loc 1 776 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 777:Src/mc_interface.c ****   return (pHandle->State);
 907              		.loc 1 777 3 view .LVU242
 778:Src/mc_interface.c **** }
 908              		.loc 1 778 1 is_stmt 0 view .LVU243
 909 0000 407F     		ldrb	r0, [r0, #29]	@ zero_extendqisi2
 910              	.LVL68:
 911              		.loc 1 778 1 view .LVU244
 912 0002 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE1459:
 916              		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 917              		.align	1
 918              		.weak	MCI_GetOccurredFaults
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	MCI_GetOccurredFaults:
 925              	.LVL69:
 926              	.LFB1460:
 779:Src/mc_interface.c **** 
 780:Src/mc_interface.c **** /**
 781:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
 782:Src/mc_interface.c ****   *        historically occurred since the state machine has been moved into
 783:Src/mc_interface.c ****   *        FAULT_NOW state.
 784:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 785:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 786:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
ARM GAS  /tmp/ccRhyv0W.s 			page 31


 787:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 788:Src/mc_interface.c ****   *         FAULT_NOW state.
 789:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 790:Src/mc_interface.c ****   */
 791:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
 792:Src/mc_interface.c **** {
 927              		.loc 1 792 1 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 793:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 932              		.loc 1 793 3 view .LVU246
 794:Src/mc_interface.c **** }
 933              		.loc 1 794 1 is_stmt 0 view .LVU247
 934 0000 008C     		ldrh	r0, [r0, #32]
 935              	.LVL70:
 936              		.loc 1 794 1 view .LVU248
 937 0002 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE1460:
 941              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
 942              		.align	1
 943              		.weak	MCI_GetCurrentFaults
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	MCI_GetCurrentFaults:
 950              	.LVL71:
 951              	.LFB1461:
 795:Src/mc_interface.c **** 
 796:Src/mc_interface.c **** /**
 797:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
 798:Src/mc_interface.c ****   *        currently present.
 799:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 800:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 801:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about about currently
 802:Src/mc_interface.c ****   *         present faults.
 803:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 804:Src/mc_interface.c ****   */
 805:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
 806:Src/mc_interface.c **** {
 952              		.loc 1 806 1 is_stmt 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 807:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 957              		.loc 1 807 3 view .LVU250
 808:Src/mc_interface.c **** }
 958              		.loc 1 808 1 is_stmt 0 view .LVU251
 959 0000 C08B     		ldrh	r0, [r0, #30]
 960              	.LVL72:
 961              		.loc 1 808 1 view .LVU252
 962 0002 7047     		bx	lr
 963              		.cfi_endproc
ARM GAS  /tmp/ccRhyv0W.s 			page 32


 964              	.LFE1461:
 966              		.section	.text.MCI_StartMotor,"ax",%progbits
 967              		.align	1
 968              		.weak	MCI_StartMotor
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu fpv4-sp-d16
 974              	MCI_StartMotor:
 975              	.LVL73:
 976              	.LFB1448:
 383:Src/mc_interface.c ****   bool RetVal;
 977              		.loc 1 383 1 is_stmt 1 view -0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 383:Src/mc_interface.c ****   bool RetVal;
 981              		.loc 1 383 1 is_stmt 0 view .LVU254
 982 0000 10B5     		push	{r4, lr}
 983              		.cfi_def_cfa_offset 8
 984              		.cfi_offset 4, -8
 985              		.cfi_offset 14, -4
 986 0002 0446     		mov	r4, r0
 384:Src/mc_interface.c **** 
 987              		.loc 1 384 3 is_stmt 1 view .LVU255
 386:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 988              		.loc 1 386 3 view .LVU256
 386:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 989              		.loc 1 386 16 is_stmt 0 view .LVU257
 990 0004 FFF7FEFF 		bl	MCI_GetSTMState
 991              	.LVL74:
 386:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 992              		.loc 1 386 6 view .LVU258
 993 0008 08B1     		cbz	r0, .L59
 397:Src/mc_interface.c ****   }
 994              		.loc 1 397 12 view .LVU259
 995 000a 0020     		movs	r0, #0
 996              	.L54:
 997              	.LVL75:
 400:Src/mc_interface.c **** }
 998              		.loc 1 400 3 is_stmt 1 view .LVU260
 401:Src/mc_interface.c **** 
 999              		.loc 1 401 1 is_stmt 0 view .LVU261
 1000 000c 10BD     		pop	{r4, pc}
 1001              	.LVL76:
 1002              	.L59:
 387:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1003              		.loc 1 387 24 discriminator 1 view .LVU262
 1004 000e 2046     		mov	r0, r4
 1005 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1006              	.LVL77:
 386:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1007              		.loc 1 386 42 discriminator 1 view .LVU263
 1008 0014 08B1     		cbz	r0, .L60
 397:Src/mc_interface.c ****   }
 1009              		.loc 1 397 12 view .LVU264
 1010 0016 0020     		movs	r0, #0
ARM GAS  /tmp/ccRhyv0W.s 			page 33


 1011 0018 F8E7     		b	.L54
 1012              	.L60:
 388:Src/mc_interface.c ****   {
 1013              		.loc 1 388 24 view .LVU265
 1014 001a 2046     		mov	r0, r4
 1015 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1016              	.LVL78:
 387:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1017              		.loc 1 387 56 view .LVU266
 1018 0020 20B9     		cbnz	r0, .L57
 390:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1019              		.loc 1 390 5 is_stmt 1 view .LVU267
 390:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1020              		.loc 1 390 28 is_stmt 0 view .LVU268
 1021 0022 0120     		movs	r0, #1
 1022 0024 2077     		strb	r0, [r4, #28]
 391:Src/mc_interface.c ****     RetVal = true;
 1023              		.loc 1 391 5 is_stmt 1 view .LVU269
 391:Src/mc_interface.c ****     RetVal = true;
 1024              		.loc 1 391 27 is_stmt 0 view .LVU270
 1025 0026 84F82200 		strb	r0, [r4, #34]
 392:Src/mc_interface.c ****   }
 1026              		.loc 1 392 5 is_stmt 1 view .LVU271
 1027              	.LVL79:
 392:Src/mc_interface.c ****   }
 1028              		.loc 1 392 12 is_stmt 0 view .LVU272
 1029 002a EFE7     		b	.L54
 1030              	.LVL80:
 1031              	.L57:
 397:Src/mc_interface.c ****   }
 1032              		.loc 1 397 12 view .LVU273
 1033 002c 0020     		movs	r0, #0
 1034 002e EDE7     		b	.L54
 1035              		.cfi_endproc
 1036              	.LFE1448:
 1038              		.section	.text.MCI_StartWithMeasurementOffset,"ax",%progbits
 1039              		.align	1
 1040              		.weak	MCI_StartWithMeasurementOffset
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	MCI_StartWithMeasurementOffset:
 1047              	.LVL81:
 1048              	.LFB1449:
 426:Src/mc_interface.c ****   bool RetVal;
 1049              		.loc 1 426 1 is_stmt 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Src/mc_interface.c ****   bool RetVal;
 1053              		.loc 1 426 1 is_stmt 0 view .LVU275
 1054 0000 10B5     		push	{r4, lr}
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 4, -8
 1057              		.cfi_offset 14, -4
 1058 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccRhyv0W.s 			page 34


 427:Src/mc_interface.c **** 
 1059              		.loc 1 427 3 is_stmt 1 view .LVU276
 429:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1060              		.loc 1 429 3 view .LVU277
 429:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1061              		.loc 1 429 16 is_stmt 0 view .LVU278
 1062 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1063              	.LVL82:
 429:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1064              		.loc 1 429 6 view .LVU279
 1065 0008 08B1     		cbz	r0, .L67
 441:Src/mc_interface.c ****   }
 1066              		.loc 1 441 12 view .LVU280
 1067 000a 0020     		movs	r0, #0
 1068              	.L62:
 1069              	.LVL83:
 444:Src/mc_interface.c **** }
 1070              		.loc 1 444 3 is_stmt 1 view .LVU281
 445:Src/mc_interface.c **** 
 1071              		.loc 1 445 1 is_stmt 0 view .LVU282
 1072 000c 10BD     		pop	{r4, pc}
 1073              	.LVL84:
 1074              	.L67:
 430:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1075              		.loc 1 430 24 discriminator 1 view .LVU283
 1076 000e 2046     		mov	r0, r4
 1077 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1078              	.LVL85:
 429:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1079              		.loc 1 429 42 discriminator 1 view .LVU284
 1080 0014 08B1     		cbz	r0, .L68
 441:Src/mc_interface.c ****   }
 1081              		.loc 1 441 12 view .LVU285
 1082 0016 0020     		movs	r0, #0
 1083 0018 F8E7     		b	.L62
 1084              	.L68:
 431:Src/mc_interface.c ****   {
 1085              		.loc 1 431 24 view .LVU286
 1086 001a 2046     		mov	r0, r4
 1087 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1088              	.LVL86:
 430:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1089              		.loc 1 430 56 view .LVU287
 1090 0020 40B9     		cbnz	r0, .L65
 433:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1091              		.loc 1 433 5 is_stmt 1 view .LVU288
 433:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1092              		.loc 1 433 28 is_stmt 0 view .LVU289
 1093 0022 0120     		movs	r0, #1
 1094 0024 2077     		strb	r0, [r4, #28]
 434:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1095              		.loc 1 434 5 is_stmt 1 view .LVU290
 434:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1096              		.loc 1 434 27 is_stmt 0 view .LVU291
 1097 0026 84F82200 		strb	r0, [r4, #34]
 435:Src/mc_interface.c ****     RetVal = true;
 1098              		.loc 1 435 5 is_stmt 1 view .LVU292
ARM GAS  /tmp/ccRhyv0W.s 			page 35


 435:Src/mc_interface.c ****     RetVal = true;
 1099              		.loc 1 435 12 is_stmt 0 view .LVU293
 1100 002a A368     		ldr	r3, [r4, #8]
 435:Src/mc_interface.c ****     RetVal = true;
 1101              		.loc 1 435 38 view .LVU294
 1102 002c 0022     		movs	r2, #0
 1103 002e 83F86E20 		strb	r2, [r3, #110]
 436:Src/mc_interface.c ****   }
 1104              		.loc 1 436 5 is_stmt 1 view .LVU295
 1105              	.LVL87:
 436:Src/mc_interface.c ****   }
 1106              		.loc 1 436 12 is_stmt 0 view .LVU296
 1107 0032 EBE7     		b	.L62
 1108              	.LVL88:
 1109              	.L65:
 441:Src/mc_interface.c ****   }
 1110              		.loc 1 441 12 view .LVU297
 1111 0034 0020     		movs	r0, #0
 1112 0036 E9E7     		b	.L62
 1113              		.cfi_endproc
 1114              	.LFE1449:
 1116              		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 1117              		.align	1
 1118              		.weak	MCI_StartOffsetMeasurments
 1119              		.syntax unified
 1120              		.thumb
 1121              		.thumb_func
 1122              		.fpu fpv4-sp-d16
 1124              	MCI_StartOffsetMeasurments:
 1125              	.LVL89:
 1126              	.LFB1450:
 463:Src/mc_interface.c ****   bool RetVal;
 1127              		.loc 1 463 1 is_stmt 1 view -0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 0
 1130              		@ frame_needed = 0, uses_anonymous_args = 0
 463:Src/mc_interface.c ****   bool RetVal;
 1131              		.loc 1 463 1 is_stmt 0 view .LVU299
 1132 0000 10B5     		push	{r4, lr}
 1133              		.cfi_def_cfa_offset 8
 1134              		.cfi_offset 4, -8
 1135              		.cfi_offset 14, -4
 1136 0002 0446     		mov	r4, r0
 464:Src/mc_interface.c **** 
 1137              		.loc 1 464 3 is_stmt 1 view .LVU300
 466:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1138              		.loc 1 466 3 view .LVU301
 466:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1139              		.loc 1 466 16 is_stmt 0 view .LVU302
 1140 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1141              	.LVL90:
 466:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1142              		.loc 1 466 6 view .LVU303
 1143 0008 08B1     		cbz	r0, .L75
 477:Src/mc_interface.c ****   }
 1144              		.loc 1 477 12 view .LVU304
 1145 000a 0020     		movs	r0, #0
ARM GAS  /tmp/ccRhyv0W.s 			page 36


 1146              	.L70:
 1147              	.LVL91:
 480:Src/mc_interface.c **** }
 1148              		.loc 1 480 3 is_stmt 1 view .LVU305
 481:Src/mc_interface.c **** 
 1149              		.loc 1 481 1 is_stmt 0 view .LVU306
 1150 000c 10BD     		pop	{r4, pc}
 1151              	.LVL92:
 1152              	.L75:
 467:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1153              		.loc 1 467 24 discriminator 1 view .LVU307
 1154 000e 2046     		mov	r0, r4
 1155 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1156              	.LVL93:
 466:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1157              		.loc 1 466 42 discriminator 1 view .LVU308
 1158 0014 08B1     		cbz	r0, .L76
 477:Src/mc_interface.c ****   }
 1159              		.loc 1 477 12 view .LVU309
 1160 0016 0020     		movs	r0, #0
 1161 0018 F8E7     		b	.L70
 1162              	.L76:
 468:Src/mc_interface.c ****   {
 1163              		.loc 1 468 24 view .LVU310
 1164 001a 2046     		mov	r0, r4
 1165 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1166              	.LVL94:
 467:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1167              		.loc 1 467 56 view .LVU311
 1168 0020 38B9     		cbnz	r0, .L73
 470:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1169              		.loc 1 470 5 is_stmt 1 view .LVU312
 470:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1170              		.loc 1 470 28 is_stmt 0 view .LVU313
 1171 0022 0323     		movs	r3, #3
 1172 0024 2377     		strb	r3, [r4, #28]
 471:Src/mc_interface.c ****     RetVal = true;
 1173              		.loc 1 471 5 is_stmt 1 view .LVU314
 471:Src/mc_interface.c ****     RetVal = true;
 1174              		.loc 1 471 12 is_stmt 0 view .LVU315
 1175 0026 A368     		ldr	r3, [r4, #8]
 471:Src/mc_interface.c ****     RetVal = true;
 1176              		.loc 1 471 38 view .LVU316
 1177 0028 0022     		movs	r2, #0
 1178 002a 83F86E20 		strb	r2, [r3, #110]
 472:Src/mc_interface.c ****   }
 1179              		.loc 1 472 5 is_stmt 1 view .LVU317
 1180              	.LVL95:
 472:Src/mc_interface.c ****   }
 1181              		.loc 1 472 12 is_stmt 0 view .LVU318
 1182 002e 0120     		movs	r0, #1
 1183 0030 ECE7     		b	.L70
 1184              	.LVL96:
 1185              	.L73:
 477:Src/mc_interface.c ****   }
 1186              		.loc 1 477 12 view .LVU319
 1187 0032 0020     		movs	r0, #0
ARM GAS  /tmp/ccRhyv0W.s 			page 37


 1188 0034 EAE7     		b	.L70
 1189              		.cfi_endproc
 1190              	.LFE1450:
 1192              		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 1193              		.align	1
 1194              		.weak	MCI_SetCalibratedOffsetsMotor
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu fpv4-sp-d16
 1200              	MCI_SetCalibratedOffsetsMotor:
 1201              	.LVL97:
 1202              	.LFB1452:
 526:Src/mc_interface.c ****   bool RetVal;
 1203              		.loc 1 526 1 is_stmt 1 view -0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 526:Src/mc_interface.c ****   bool RetVal;
 1207              		.loc 1 526 1 is_stmt 0 view .LVU321
 1208 0000 38B5     		push	{r3, r4, r5, lr}
 1209              		.cfi_def_cfa_offset 16
 1210              		.cfi_offset 3, -16
 1211              		.cfi_offset 4, -12
 1212              		.cfi_offset 5, -8
 1213              		.cfi_offset 14, -4
 1214 0002 0446     		mov	r4, r0
 1215 0004 0D46     		mov	r5, r1
 527:Src/mc_interface.c **** 
 1216              		.loc 1 527 3 is_stmt 1 view .LVU322
 529:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1217              		.loc 1 529 3 view .LVU323
 529:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1218              		.loc 1 529 16 is_stmt 0 view .LVU324
 1219 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1220              	.LVL98:
 529:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1221              		.loc 1 529 6 view .LVU325
 1222 000a 08B1     		cbz	r0, .L80
 1223              	.L78:
 1224              	.LVL99:
 538:Src/mc_interface.c **** }
 1225              		.loc 1 538 5 is_stmt 1 view .LVU326
 539:Src/mc_interface.c **** 
 1226              		.loc 1 539 1 is_stmt 0 view .LVU327
 1227 000c 0120     		movs	r0, #1
 1228 000e 38BD     		pop	{r3, r4, r5, pc}
 1229              	.LVL100:
 1230              	.L80:
 530:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1231              		.loc 1 530 24 discriminator 1 view .LVU328
 1232 0010 2046     		mov	r0, r4
 1233 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1234              	.LVL101:
 529:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1235              		.loc 1 529 42 discriminator 1 view .LVU329
 1236 0016 0028     		cmp	r0, #0
ARM GAS  /tmp/ccRhyv0W.s 			page 38


 1237 0018 F8D1     		bne	.L78
 531:Src/mc_interface.c ****   {
 1238              		.loc 1 531 24 view .LVU330
 1239 001a 2046     		mov	r0, r4
 1240 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1241              	.LVL102:
 530:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1242              		.loc 1 530 56 view .LVU331
 1243 0020 0028     		cmp	r0, #0
 1244 0022 F3D1     		bne	.L78
 533:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 1245              		.loc 1 533 7 is_stmt 1 view .LVU332
 1246 0024 2946     		mov	r1, r5
 1247 0026 A068     		ldr	r0, [r4, #8]
 1248 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 1249              	.LVL103:
 534:Src/mc_interface.c ****       RetVal = true;
 1250              		.loc 1 534 7 view .LVU333
 534:Src/mc_interface.c ****       RetVal = true;
 1251              		.loc 1 534 14 is_stmt 0 view .LVU334
 1252 002c A368     		ldr	r3, [r4, #8]
 534:Src/mc_interface.c ****       RetVal = true;
 1253              		.loc 1 534 40 view .LVU335
 1254 002e 0122     		movs	r2, #1
 1255 0030 83F86E20 		strb	r2, [r3, #110]
 535:Src/mc_interface.c ****   }
 1256              		.loc 1 535 7 is_stmt 1 view .LVU336
 1257              	.LVL104:
 535:Src/mc_interface.c ****   }
 1258              		.loc 1 535 7 is_stmt 0 view .LVU337
 1259 0034 EAE7     		b	.L78
 1260              		.cfi_endproc
 1261              	.LFE1452:
 1263              		.section	.text.MCI_StopMotor,"ax",%progbits
 1264              		.align	1
 1265              		.weak	MCI_StopMotor
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv4-sp-d16
 1271              	MCI_StopMotor:
 1272              	.LVL105:
 1273              	.LFB1453:
 557:Src/mc_interface.c ****   bool RetVal;
 1274              		.loc 1 557 1 is_stmt 1 view -0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 557:Src/mc_interface.c ****   bool RetVal;
 1278              		.loc 1 557 1 is_stmt 0 view .LVU339
 1279 0000 38B5     		push	{r3, r4, r5, lr}
 1280              		.cfi_def_cfa_offset 16
 1281              		.cfi_offset 3, -16
 1282              		.cfi_offset 4, -12
 1283              		.cfi_offset 5, -8
 1284              		.cfi_offset 14, -4
 1285 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccRhyv0W.s 			page 39


 558:Src/mc_interface.c ****   bool status;
 1286              		.loc 1 558 3 is_stmt 1 view .LVU340
 559:Src/mc_interface.c ****   MCI_State_t State;
 1287              		.loc 1 559 3 view .LVU341
 560:Src/mc_interface.c **** 
 1288              		.loc 1 560 3 view .LVU342
 562:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1289              		.loc 1 562 3 view .LVU343
 562:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1290              		.loc 1 562 11 is_stmt 0 view .LVU344
 1291 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1292              	.LVL106:
 563:Src/mc_interface.c ****   {
 1293              		.loc 1 563 3 is_stmt 1 view .LVU345
 563:Src/mc_interface.c ****   {
 1294              		.loc 1 563 6 is_stmt 0 view .LVU346
 1295 0008 28B1     		cbz	r0, .L84
 563:Src/mc_interface.c ****   {
 1296              		.loc 1 563 22 discriminator 1 view .LVU347
 1297 000a 0C28     		cmp	r0, #12
 1298 000c 01D0     		beq	.L89
 569:Src/mc_interface.c ****   }
 1299              		.loc 1 569 12 view .LVU348
 1300 000e 0125     		movs	r5, #1
 1301 0010 02E0     		b	.L82
 1302              	.L89:
 565:Src/mc_interface.c ****   }
 1303              		.loc 1 565 12 view .LVU349
 1304 0012 0025     		movs	r5, #0
 1305 0014 00E0     		b	.L82
 1306              	.L84:
 1307 0016 0025     		movs	r5, #0
 1308              	.L82:
 1309              	.LVL107:
 572:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1310              		.loc 1 572 3 is_stmt 1 view .LVU350
 572:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1311              		.loc 1 572 24 is_stmt 0 view .LVU351
 1312 0018 2046     		mov	r0, r4
 1313              	.LVL108:
 572:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1314              		.loc 1 572 24 view .LVU352
 1315 001a FFF7FEFF 		bl	MCI_GetOccurredFaults
 1316              	.LVL109:
 572:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1317              		.loc 1 572 6 view .LVU353
 1318 001e 10B1     		cbz	r0, .L90
 582:Src/mc_interface.c ****   }
 1319              		.loc 1 582 12 view .LVU354
 1320 0020 0025     		movs	r5, #0
 1321              	.LVL110:
 1322              	.L83:
 585:Src/mc_interface.c **** }
 1323              		.loc 1 585 3 is_stmt 1 view .LVU355
 586:Src/mc_interface.c **** 
 1324              		.loc 1 586 1 is_stmt 0 view .LVU356
 1325 0022 2846     		mov	r0, r5
ARM GAS  /tmp/ccRhyv0W.s 			page 40


 1326 0024 38BD     		pop	{r3, r4, r5, pc}
 1327              	.LVL111:
 1328              	.L90:
 573:Src/mc_interface.c ****        status == true )
 1329              		.loc 1 573 24 discriminator 1 view .LVU357
 1330 0026 2046     		mov	r0, r4
 1331 0028 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1332              	.LVL112:
 572:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1333              		.loc 1 572 56 discriminator 1 view .LVU358
 1334 002c 20B9     		cbnz	r0, .L87
 573:Src/mc_interface.c ****        status == true )
 1335              		.loc 1 573 55 view .LVU359
 1336 002e 002D     		cmp	r5, #0
 1337 0030 F7D0     		beq	.L83
 576:Src/mc_interface.c ****     RetVal = true;
 1338              		.loc 1 576 5 is_stmt 1 view .LVU360
 576:Src/mc_interface.c ****     RetVal = true;
 1339              		.loc 1 576 28 is_stmt 0 view .LVU361
 1340 0032 0523     		movs	r3, #5
 1341 0034 2377     		strb	r3, [r4, #28]
 577:Src/mc_interface.c ****   }
 1342              		.loc 1 577 5 is_stmt 1 view .LVU362
 1343              	.LVL113:
 577:Src/mc_interface.c ****   }
 1344              		.loc 1 577 12 is_stmt 0 view .LVU363
 1345 0036 F4E7     		b	.L83
 1346              	.LVL114:
 1347              	.L87:
 582:Src/mc_interface.c ****   }
 1348              		.loc 1 582 12 view .LVU364
 1349 0038 0025     		movs	r5, #0
 1350              	.LVL115:
 582:Src/mc_interface.c ****   }
 1351              		.loc 1 582 12 view .LVU365
 1352 003a F2E7     		b	.L83
 1353              		.cfi_endproc
 1354              	.LFE1453:
 1356              		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
 1357              		.align	1
 1358              		.weak	MCI_FaultAcknowledged
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu fpv4-sp-d16
 1364              	MCI_FaultAcknowledged:
 1365              	.LVL116:
 1366              	.LFB1454:
 598:Src/mc_interface.c ****   bool RetVal;
 1367              		.loc 1 598 1 is_stmt 1 view -0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 598:Src/mc_interface.c ****   bool RetVal;
 1371              		.loc 1 598 1 is_stmt 0 view .LVU367
 1372 0000 10B5     		push	{r4, lr}
 1373              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccRhyv0W.s 			page 41


 1374              		.cfi_offset 4, -8
 1375              		.cfi_offset 14, -4
 1376 0002 0446     		mov	r4, r0
 599:Src/mc_interface.c **** 
 1377              		.loc 1 599 3 is_stmt 1 view .LVU368
 601:Src/mc_interface.c ****   {
 1378              		.loc 1 601 3 view .LVU369
 601:Src/mc_interface.c ****   {
 1379              		.loc 1 601 22 is_stmt 0 view .LVU370
 1380 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1381              	.LVL117:
 601:Src/mc_interface.c ****   {
 1382              		.loc 1 601 6 view .LVU371
 1383 0008 0B28     		cmp	r0, #11
 1384 000a 01D0     		beq	.L96
 610:Src/mc_interface.c ****   }
 1385              		.loc 1 610 12 view .LVU372
 1386 000c 0020     		movs	r0, #0
 1387              	.L92:
 1388              	.LVL118:
 612:Src/mc_interface.c **** }
 1389              		.loc 1 612 3 is_stmt 1 view .LVU373
 613:Src/mc_interface.c **** 
 1390              		.loc 1 613 1 is_stmt 0 view .LVU374
 1391 000e 10BD     		pop	{r4, pc}
 1392              	.LVL119:
 1393              	.L96:
 601:Src/mc_interface.c ****   {
 1394              		.loc 1 601 68 discriminator 1 view .LVU375
 1395 0010 2046     		mov	r0, r4
 1396 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1397              	.LVL120:
 601:Src/mc_interface.c ****   {
 1398              		.loc 1 601 48 discriminator 1 view .LVU376
 1399 0016 28B9     		cbnz	r0, .L94
 603:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1400              		.loc 1 603 5 is_stmt 1 view .LVU377
 603:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1401              		.loc 1 603 25 is_stmt 0 view .LVU378
 1402 0018 0023     		movs	r3, #0
 1403 001a 2384     		strh	r3, [r4, #32]	@ movhi
 604:Src/mc_interface.c ****     RetVal = true;
 1404              		.loc 1 604 5 is_stmt 1 view .LVU379
 604:Src/mc_interface.c ****     RetVal = true;
 1405              		.loc 1 604 28 is_stmt 0 view .LVU380
 1406 001c 0223     		movs	r3, #2
 1407 001e 2377     		strb	r3, [r4, #28]
 605:Src/mc_interface.c ****   }
 1408              		.loc 1 605 5 is_stmt 1 view .LVU381
 1409              	.LVL121:
 605:Src/mc_interface.c ****   }
 1410              		.loc 1 605 12 is_stmt 0 view .LVU382
 1411 0020 0120     		movs	r0, #1
 1412 0022 F4E7     		b	.L92
 1413              	.LVL122:
 1414              	.L94:
 610:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccRhyv0W.s 			page 42


 1415              		.loc 1 610 12 view .LVU383
 1416 0024 0020     		movs	r0, #0
 1417 0026 F2E7     		b	.L92
 1418              		.cfi_endproc
 1419              	.LFE1454:
 1421              		.section	.text.MCI_GetFaultState,"ax",%progbits
 1422              		.align	1
 1423              		.weak	MCI_GetFaultState
 1424              		.syntax unified
 1425              		.thumb
 1426              		.thumb_func
 1427              		.fpu fpv4-sp-d16
 1429              	MCI_GetFaultState:
 1430              	.LVL123:
 1431              	.LFB1462:
 809:Src/mc_interface.c **** 
 810:Src/mc_interface.c **** /**
 811:Src/mc_interface.c ****   * @brief It returns two 16 bit fields containing information about both faults
 812:Src/mc_interface.c ****   *        currently present and faults historically occurred since the state
 813:Src/mc_interface.c ****   *        machine has been moved into state
 814:Src/mc_interface.c ****   * @param pHanlde pointer of type  STM_Handle_t.
 815:Src/mc_interface.c ****   * @retval uint32_t  Two 16 bit fields: in the most significant half are stored
 816:Src/mc_interface.c ****   *         the information about currently present faults. In the least
 817:Src/mc_interface.c ****   *         significant half are stored the information about the faults
 818:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 819:Src/mc_interface.c ****   *         FAULT_NOW state
 820:Src/mc_interface.c ****   */
 821:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
 822:Src/mc_interface.c **** {
 1432              		.loc 1 822 1 is_stmt 1 view -0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 823:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1437              		.loc 1 823 3 view .LVU385
 824:Src/mc_interface.c **** 
 825:Src/mc_interface.c ****   LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1438              		.loc 1 825 3 view .LVU386
 1439              		.loc 1 825 39 is_stmt 0 view .LVU387
 1440 0000 038C     		ldrh	r3, [r0, #32]
 1441              	.LVL124:
 826:Src/mc_interface.c ****   LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1442              		.loc 1 826 3 is_stmt 1 view .LVU388
 1443              		.loc 1 826 40 is_stmt 0 view .LVU389
 1444 0002 C08B     		ldrh	r0, [r0, #30]
 1445              	.LVL125:
 827:Src/mc_interface.c **** 
 828:Src/mc_interface.c ****   return (LocalFaultState);
 1446              		.loc 1 828 3 is_stmt 1 view .LVU390
 829:Src/mc_interface.c **** }
 1447              		.loc 1 829 1 is_stmt 0 view .LVU391
 1448 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1449              	.LVL126:
 1450              		.loc 1 829 1 view .LVU392
 1451 0008 7047     		bx	lr
 1452              		.cfi_endproc
ARM GAS  /tmp/ccRhyv0W.s 			page 43


 1453              	.LFE1462:
 1455              		.section	.text.MCI_GetControlMode,"ax",%progbits
 1456              		.align	1
 1457              		.weak	MCI_GetControlMode
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	MCI_GetControlMode:
 1464              	.LVL127:
 1465              	.LFB1463:
 830:Src/mc_interface.c **** 
 831:Src/mc_interface.c **** /**
 832:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
 833:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 834:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
 835:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 836:Src/mc_interface.c ****   */
 837:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
 838:Src/mc_interface.c **** {
 1466              		.loc 1 838 1 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 839:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 840:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
 841:Src/mc_interface.c **** #else
 842:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1471              		.loc 1 842 3 view .LVU394
 843:Src/mc_interface.c **** #endif
 844:Src/mc_interface.c **** }
 1472              		.loc 1 844 1 is_stmt 0 view .LVU395
 1473 0000 90F82300 		ldrb	r0, [r0, #35]	@ zero_extendqisi2
 1474              	.LVL128:
 1475              		.loc 1 844 1 view .LVU396
 1476 0004 7047     		bx	lr
 1477              		.cfi_endproc
 1478              	.LFE1463:
 1480              		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1481              		.align	1
 1482              		.weak	MCI_GetImposedMotorDirection
 1483              		.syntax unified
 1484              		.thumb
 1485              		.thumb_func
 1486              		.fpu fpv4-sp-d16
 1488              	MCI_GetImposedMotorDirection:
 1489              	.LVL129:
 1490              	.LFB1464:
 845:Src/mc_interface.c **** 
 846:Src/mc_interface.c **** /**
 847:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
 848:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
 849:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 850:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
 851:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
 852:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccRhyv0W.s 			page 44


 853:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle)
 854:Src/mc_interface.c **** {
 1491              		.loc 1 854 1 is_stmt 1 view -0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 0
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 1495              		@ link register save eliminated.
 855:Src/mc_interface.c ****   int16_t retVal = 1;
 1496              		.loc 1 855 3 view .LVU398
 856:Src/mc_interface.c **** 
 857:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 858:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 859:Src/mc_interface.c ****   {
 860:Src/mc_interface.c ****     /* Nothing to do */
 861:Src/mc_interface.c ****   }
 862:Src/mc_interface.c ****   else
 863:Src/mc_interface.c ****   {
 864:Src/mc_interface.c **** #endif
 865:Src/mc_interface.c ****     switch (pHandle->lastCommand)
 1497              		.loc 1 865 5 view .LVU399
 1498              		.loc 1 865 20 is_stmt 0 view .LVU400
 1499 0000 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 1500 0002 013B     		subs	r3, r3, #1
 1501 0004 032B     		cmp	r3, #3
 1502 0006 15D8     		bhi	.L105
 1503 0008 DFE803F0 		tbb	[pc, r3]
 1504              	.L102:
 1505 000c 02       		.byte	(.L101-.L102)/2
 1506 000d 08       		.byte	(.L104-.L102)/2
 1507 000e 0E       		.byte	(.L103-.L102)/2
 1508 000f 02       		.byte	(.L101-.L102)/2
 1509              		.p2align 1
 1510              	.L101:
 866:Src/mc_interface.c ****     {
 867:Src/mc_interface.c ****        case MCI_CMD_EXECSPEEDSIN:
 868:Src/mc_interface.c ****        case MCI_CMD_EXECSPEEDRAMP:
 869:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
 1511              		.loc 1 869 9 is_stmt 1 view .LVU401
 1512              		.loc 1 869 20 is_stmt 0 view .LVU402
 1513 0010 B0F90E30 		ldrsh	r3, [r0, #14]
 1514              		.loc 1 869 12 view .LVU403
 1515 0014 002B     		cmp	r3, #0
 1516 0016 0FDB     		blt	.L106
 855:Src/mc_interface.c **** 
 1517              		.loc 1 855 11 view .LVU404
 1518 0018 0120     		movs	r0, #1
 1519              	.LVL130:
 855:Src/mc_interface.c **** 
 1520              		.loc 1 855 11 view .LVU405
 1521 001a 7047     		bx	lr
 1522              	.LVL131:
 1523              	.L104:
 870:Src/mc_interface.c ****         {
 871:Src/mc_interface.c **** 
 872:Src/mc_interface.c ****           retVal = -1;
 873:Src/mc_interface.c ****         }
 874:Src/mc_interface.c ****         break;
ARM GAS  /tmp/ccRhyv0W.s 			page 45


 875:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
 876:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
 1524              		.loc 1 876 9 is_stmt 1 view .LVU406
 1525              		.loc 1 876 20 is_stmt 0 view .LVU407
 1526 001c B0F91430 		ldrsh	r3, [r0, #20]
 1527              		.loc 1 876 12 view .LVU408
 1528 0020 002B     		cmp	r3, #0
 1529 0022 0CDB     		blt	.L107
 855:Src/mc_interface.c **** 
 1530              		.loc 1 855 11 view .LVU409
 1531 0024 0120     		movs	r0, #1
 1532              	.LVL132:
 855:Src/mc_interface.c **** 
 1533              		.loc 1 855 11 view .LVU410
 1534 0026 7047     		bx	lr
 1535              	.LVL133:
 1536              	.L103:
 877:Src/mc_interface.c ****         {
 878:Src/mc_interface.c ****           retVal = -1;
 879:Src/mc_interface.c ****         }
 880:Src/mc_interface.c ****         break;
 881:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
 882:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
 1537              		.loc 1 882 9 is_stmt 1 view .LVU411
 1538              		.loc 1 882 28 is_stmt 0 view .LVU412
 1539 0028 B0F91630 		ldrsh	r3, [r0, #22]
 1540              		.loc 1 882 12 view .LVU413
 1541 002c 002B     		cmp	r3, #0
 1542 002e 09DB     		blt	.L108
 855:Src/mc_interface.c **** 
 1543              		.loc 1 855 11 view .LVU414
 1544 0030 0120     		movs	r0, #1
 1545              	.LVL134:
 855:Src/mc_interface.c **** 
 1546              		.loc 1 855 11 view .LVU415
 1547 0032 7047     		bx	lr
 1548              	.LVL135:
 1549              	.L105:
 865:Src/mc_interface.c ****     {
 1550              		.loc 1 865 20 view .LVU416
 1551 0034 0120     		movs	r0, #1
 1552              	.LVL136:
 865:Src/mc_interface.c ****     {
 1553              		.loc 1 865 20 view .LVU417
 1554 0036 7047     		bx	lr
 1555              	.LVL137:
 1556              	.L106:
 872:Src/mc_interface.c ****         }
 1557              		.loc 1 872 18 view .LVU418
 1558 0038 4FF0FF30 		mov	r0, #-1
 1559              	.LVL138:
 872:Src/mc_interface.c ****         }
 1560              		.loc 1 872 18 view .LVU419
 1561 003c 7047     		bx	lr
 1562              	.LVL139:
 1563              	.L107:
 878:Src/mc_interface.c ****         }
ARM GAS  /tmp/ccRhyv0W.s 			page 46


 1564              		.loc 1 878 18 view .LVU420
 1565 003e 4FF0FF30 		mov	r0, #-1
 1566              	.LVL140:
 878:Src/mc_interface.c ****         }
 1567              		.loc 1 878 18 view .LVU421
 1568 0042 7047     		bx	lr
 1569              	.LVL141:
 1570              	.L108:
 883:Src/mc_interface.c ****         {
 884:Src/mc_interface.c ****           retVal = -1;
 1571              		.loc 1 884 18 view .LVU422
 1572 0044 4FF0FF30 		mov	r0, #-1
 1573              	.LVL142:
 885:Src/mc_interface.c ****         }
 886:Src/mc_interface.c ****         break;
 887:Src/mc_interface.c ****       default:
 888:Src/mc_interface.c ****         break;
 889:Src/mc_interface.c ****     }
 890:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 891:Src/mc_interface.c ****   }
 892:Src/mc_interface.c **** #endif
 893:Src/mc_interface.c ****   return (retVal);
 1574              		.loc 1 893 3 is_stmt 1 view .LVU423
 894:Src/mc_interface.c **** }
 1575              		.loc 1 894 1 is_stmt 0 view .LVU424
 1576 0048 7047     		bx	lr
 1577              		.cfi_endproc
 1578              	.LFE1464:
 1580              		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1581              		.align	1
 1582              		.weak	MCI_GetLastRampFinalSpeed
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu fpv4-sp-d16
 1588              	MCI_GetLastRampFinalSpeed:
 1589              	.LVL143:
 1590              	.LFB1465:
 895:Src/mc_interface.c **** 
 896:Src/mc_interface.c **** /**
 897:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
 898:Src/mc_interface.c ****   *         user expressed in tenths of HZ.
 899:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 900:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in tenths
 901:Src/mc_interface.c ****   *         of HZ.
 902:Src/mc_interface.c ****   */
 903:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle)
 904:Src/mc_interface.c **** {
 1591              		.loc 1 904 1 is_stmt 1 view -0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
 905:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 906:Src/mc_interface.c ****   int16_t retVal = 0;
 907:Src/mc_interface.c **** 
 908:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccRhyv0W.s 			page 47


 909:Src/mc_interface.c ****   {
 910:Src/mc_interface.c ****     /* Nothing to do */
 911:Src/mc_interface.c ****   }
 912:Src/mc_interface.c ****   else
 913:Src/mc_interface.c ****   {
 914:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
 915:Src/mc_interface.c ****   }
 916:Src/mc_interface.c ****   return (retVal);
 917:Src/mc_interface.c **** #else
 918:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1596              		.loc 1 918 3 view .LVU426
 919:Src/mc_interface.c **** #endif
 920:Src/mc_interface.c **** }
 1597              		.loc 1 920 1 is_stmt 0 view .LVU427
 1598 0000 B0F90E00 		ldrsh	r0, [r0, #14]
 1599              	.LVL144:
 1600              		.loc 1 920 1 view .LVU428
 1601 0004 7047     		bx	lr
 1602              		.cfi_endproc
 1603              	.LFE1465:
 1605              		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1606              		.align	1
 1607              		.weak	MCI_GetLastRampFinalTorque
 1608              		.syntax unified
 1609              		.thumb
 1610              		.thumb_func
 1611              		.fpu fpv4-sp-d16
 1613              	MCI_GetLastRampFinalTorque:
 1614              	.LVL145:
 1615              	.LFB1466:
 921:Src/mc_interface.c **** 
 922:Src/mc_interface.c **** /**
 923:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
 924:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
 925:Src/mc_interface.c ****   *         digit.
 926:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 927:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
 928:Src/mc_interface.c ****   */
 929:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle)
 930:Src/mc_interface.c **** {
 1616              		.loc 1 930 1 is_stmt 1 view -0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 0
 1619              		@ frame_needed = 0, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
 931:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 932:Src/mc_interface.c ****   int16_t retVal = 0;
 933:Src/mc_interface.c **** 
 934:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 935:Src/mc_interface.c ****   {
 936:Src/mc_interface.c ****     /* Nothing to do */
 937:Src/mc_interface.c ****   }
 938:Src/mc_interface.c ****   else
 939:Src/mc_interface.c ****   {
 940:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
 941:Src/mc_interface.c ****   }
 942:Src/mc_interface.c ****   return (retVal);
ARM GAS  /tmp/ccRhyv0W.s 			page 48


 943:Src/mc_interface.c **** #else
 944:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1621              		.loc 1 944 3 view .LVU430
 945:Src/mc_interface.c **** #endif
 946:Src/mc_interface.c **** }
 1622              		.loc 1 946 1 is_stmt 0 view .LVU431
 1623 0000 B0F91400 		ldrsh	r0, [r0, #20]
 1624              	.LVL146:
 1625              		.loc 1 946 1 view .LVU432
 1626 0004 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE1466:
 1630              		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1631              		.align	1
 1632              		.weak	MCI_GetLastRampFinalDuration
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1636              		.fpu fpv4-sp-d16
 1638              	MCI_GetLastRampFinalDuration:
 1639              	.LVL147:
 1640              	.LFB1467:
 947:Src/mc_interface.c **** 
 948:Src/mc_interface.c **** /**
 949:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
 950:Src/mc_interface.c ****   *         user .
 951:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 952:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
 953:Src/mc_interface.c ****   */
 954:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle)
 955:Src/mc_interface.c **** {
 1641              		.loc 1 955 1 is_stmt 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645              		@ link register save eliminated.
 956:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 957:Src/mc_interface.c ****   uint16_t retVal = 0;
 958:Src/mc_interface.c **** 
 959:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 960:Src/mc_interface.c ****   {
 961:Src/mc_interface.c ****     /* Nothing to do */
 962:Src/mc_interface.c ****   }
 963:Src/mc_interface.c ****   else
 964:Src/mc_interface.c ****   {
 965:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
 966:Src/mc_interface.c ****   }
 967:Src/mc_interface.c ****   return (retVal);
 968:Src/mc_interface.c **** #else
 969:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1646              		.loc 1 969 3 view .LVU434
 970:Src/mc_interface.c **** #endif
 971:Src/mc_interface.c **** }
 1647              		.loc 1 971 1 is_stmt 0 view .LVU435
 1648 0000 408B     		ldrh	r0, [r0, #26]
 1649              	.LVL148:
 1650              		.loc 1 971 1 view .LVU436
ARM GAS  /tmp/ccRhyv0W.s 			page 49


 1651 0002 7047     		bx	lr
 1652              		.cfi_endproc
 1653              	.LFE1467:
 1655              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1656              		.align	1
 1657              		.weak	MCI_GetLastRampFinalSpeed_F
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu fpv4-sp-d16
 1663              	MCI_GetLastRampFinalSpeed_F:
 1664              	.LVL149:
 1665              	.LFB1468:
 972:Src/mc_interface.c **** 
 973:Src/mc_interface.c **** /**
 974:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
 975:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 976:Src/mc_interface.c ****   * @retval float last ramp final speed sent by the user expressed in rpm.
 977:Src/mc_interface.c ****   */
 978:Src/mc_interface.c **** __weak float MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle)
 979:Src/mc_interface.c **** {
 1666              		.loc 1 979 1 is_stmt 1 view -0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 980:Src/mc_interface.c ****   float RetVal = 0.0;
 1671              		.loc 1 980 3 view .LVU438
 981:Src/mc_interface.c **** 
 982:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1672              		.loc 1 982 3 view .LVU439
 1673              		.loc 1 982 6 is_stmt 0 view .LVU440
 1674 0000 48B1     		cbz	r0, .L114
 983:Src/mc_interface.c ****   {
 984:Src/mc_interface.c ****     /* Nothing to do */
 985:Src/mc_interface.c ****   }
 986:Src/mc_interface.c ****   else
 987:Src/mc_interface.c ****   {
 988:Src/mc_interface.c ****     RetVal = (float)((pHandle->hFinalSpeed * U_RPM) / SPEED_UNIT);
 1675              		.loc 1 988 5 is_stmt 1 view .LVU441
 1676              		.loc 1 988 30 is_stmt 0 view .LVU442
 1677 0002 B0F90E30 		ldrsh	r3, [r0, #14]
 1678              		.loc 1 988 53 view .LVU443
 1679 0006 03EB4303 		add	r3, r3, r3, lsl #1
 1680 000a 5B00     		lsls	r3, r3, #1
 1681              		.loc 1 988 12 view .LVU444
 1682 000c 07EE903A 		vmov	s15, r3	@ int
 1683 0010 B8EEE70A 		vcvt.f32.s32	s0, s15
 1684              	.LVL150:
 1685              		.loc 1 988 12 view .LVU445
 1686 0014 7047     		bx	lr
 1687              	.LVL151:
 1688              	.L114:
 980:Src/mc_interface.c **** 
 1689              		.loc 1 980 9 view .LVU446
 1690 0016 9FED010A 		vldr.32	s0, .L115
 989:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccRhyv0W.s 			page 50


 990:Src/mc_interface.c ****   return (RetVal);
 1691              		.loc 1 990 3 is_stmt 1 view .LVU447
 991:Src/mc_interface.c **** }
 1692              		.loc 1 991 1 is_stmt 0 view .LVU448
 1693 001a 7047     		bx	lr
 1694              	.L116:
 1695              		.align	2
 1696              	.L115:
 1697 001c 00000000 		.word	0
 1698              		.cfi_endproc
 1699              	.LFE1468:
 1701              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1702              		.align	1
 1703              		.weak	MCI_RampCompleted
 1704              		.syntax unified
 1705              		.thumb
 1706              		.thumb_func
 1707              		.fpu fpv4-sp-d16
 1709              	MCI_RampCompleted:
 1710              	.LVL152:
 1711              	.LFB1469:
 992:Src/mc_interface.c **** 
 993:Src/mc_interface.c **** /**
 994:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
 995:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 996:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
 997:Src/mc_interface.c ****   */
 998:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
 999:Src/mc_interface.c **** {
 1712              		.loc 1 999 1 is_stmt 1 view -0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              		.loc 1 999 1 is_stmt 0 view .LVU450
 1717 0000 10B5     		push	{r4, lr}
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 4, -8
 1720              		.cfi_offset 14, -4
 1721 0002 0446     		mov	r4, r0
1000:Src/mc_interface.c ****   bool retVal = false;
 1722              		.loc 1 1000 3 is_stmt 1 view .LVU451
 1723              	.LVL153:
1001:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1002:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1003:Src/mc_interface.c ****   {
1004:Src/mc_interface.c ****     /* Nothing to do */
1005:Src/mc_interface.c ****   }
1006:Src/mc_interface.c ****   else
1007:Src/mc_interface.c ****   {
1008:Src/mc_interface.c **** #endif
1009:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1724              		.loc 1 1009 5 view .LVU452
 1725              		.loc 1 1009 16 is_stmt 0 view .LVU453
 1726 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1727              	.LVL154:
 1728              		.loc 1 1009 8 view .LVU454
 1729 0008 0628     		cmp	r0, #6
ARM GAS  /tmp/ccRhyv0W.s 			page 51


 1730 000a 01D0     		beq	.L121
1000:Src/mc_interface.c ****   bool retVal = false;
 1731              		.loc 1 1000 8 view .LVU455
 1732 000c 0020     		movs	r0, #0
 1733              	.LVL155:
 1734              	.L118:
1010:Src/mc_interface.c ****     {
1011:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
1012:Src/mc_interface.c ****     }
1013:Src/mc_interface.c ****     else
1014:Src/mc_interface.c ****     {
1015:Src/mc_interface.c ****       /* Nothing to do */
1016:Src/mc_interface.c ****     }
 1735              		.loc 1 1016 5 is_stmt 1 view .LVU456
1017:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1018:Src/mc_interface.c ****   }
1019:Src/mc_interface.c **** #endif
1020:Src/mc_interface.c ****   return (retVal);
 1736              		.loc 1 1020 3 view .LVU457
1021:Src/mc_interface.c **** }
 1737              		.loc 1 1021 1 is_stmt 0 view .LVU458
 1738 000e 10BD     		pop	{r4, pc}
 1739              	.LVL156:
 1740              	.L121:
1011:Src/mc_interface.c ****     }
 1741              		.loc 1 1011 7 is_stmt 1 view .LVU459
1011:Src/mc_interface.c ****     }
 1742              		.loc 1 1011 16 is_stmt 0 view .LVU460
 1743 0010 2068     		ldr	r0, [r4]
 1744 0012 FFF7FEFF 		bl	STC_RampCompleted
 1745              	.LVL157:
1011:Src/mc_interface.c ****     }
 1746              		.loc 1 1011 16 view .LVU461
 1747 0016 FAE7     		b	.L118
 1748              		.cfi_endproc
 1749              	.LFE1469:
 1751              		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1752              		.align	1
 1753              		.weak	MCI_StopSpeedRamp
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu fpv4-sp-d16
 1759              	MCI_StopSpeedRamp:
 1760              	.LVL158:
 1761              	.LFB1470:
1022:Src/mc_interface.c **** 
1023:Src/mc_interface.c **** /**
1024:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
1025:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1026:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
1027:Src/mc_interface.c ****   *
1028:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
1029:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
1030:Src/mc_interface.c ****   */
1031:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
1032:Src/mc_interface.c **** {
ARM GAS  /tmp/ccRhyv0W.s 			page 52


 1762              		.loc 1 1032 1 is_stmt 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              		.loc 1 1032 1 is_stmt 0 view .LVU463
 1767 0000 08B5     		push	{r3, lr}
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 3, -8
 1770              		.cfi_offset 14, -4
1033:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1034:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
1035:Src/mc_interface.c **** #else
1036:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1771              		.loc 1 1036 3 is_stmt 1 view .LVU464
 1772              		.loc 1 1036 11 is_stmt 0 view .LVU465
 1773 0002 0068     		ldr	r0, [r0]
 1774              	.LVL159:
 1775              		.loc 1 1036 11 view .LVU466
 1776 0004 FFF7FEFF 		bl	STC_StopSpeedRamp
 1777              	.LVL160:
1037:Src/mc_interface.c **** #endif
1038:Src/mc_interface.c **** }
 1778              		.loc 1 1038 1 view .LVU467
 1779 0008 08BD     		pop	{r3, pc}
 1780              		.cfi_endproc
 1781              	.LFE1470:
 1783              		.section	.text.MCI_StopRamp,"ax",%progbits
 1784              		.align	1
 1785              		.weak	MCI_StopRamp
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu fpv4-sp-d16
 1791              	MCI_StopRamp:
 1792              	.LVL161:
 1793              	.LFB1471:
1039:Src/mc_interface.c **** 
1040:Src/mc_interface.c **** /**
1041:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
1042:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1043:Src/mc_interface.c ****   */
1044:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
1045:Src/mc_interface.c **** {
 1794              		.loc 1 1045 1 is_stmt 1 view -0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 0
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798              		.loc 1 1045 1 is_stmt 0 view .LVU469
 1799 0000 08B5     		push	{r3, lr}
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 3, -8
 1802              		.cfi_offset 14, -4
1046:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1047:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1048:Src/mc_interface.c ****   {
1049:Src/mc_interface.c ****     /* Nothing to do */
1050:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccRhyv0W.s 			page 53


1051:Src/mc_interface.c ****   else
1052:Src/mc_interface.c ****   {
1053:Src/mc_interface.c **** #endif
1054:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1803              		.loc 1 1054 5 is_stmt 1 view .LVU470
 1804 0002 0068     		ldr	r0, [r0]
 1805              	.LVL162:
 1806              		.loc 1 1054 5 is_stmt 0 view .LVU471
 1807 0004 FFF7FEFF 		bl	STC_StopRamp
 1808              	.LVL163:
1055:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1056:Src/mc_interface.c ****   }
1057:Src/mc_interface.c **** #endif
1058:Src/mc_interface.c **** }
 1809              		.loc 1 1058 1 view .LVU472
 1810 0008 08BD     		pop	{r3, pc}
 1811              		.cfi_endproc
 1812              	.LFE1471:
 1814              		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1815              		.align	1
 1816              		.weak	MCI_GetSpdSensorReliability
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	MCI_GetSpdSensorReliability:
 1823              	.LVL164:
 1824              	.LFB1472:
1059:Src/mc_interface.c **** 
1060:Src/mc_interface.c **** /**
1061:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1062:Src/mc_interface.c ****   *         actually used for reference frame transformation
1063:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1064:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1065:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1066:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1067:Src/mc_interface.c ****   */
1068:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1069:Src/mc_interface.c **** {
 1825              		.loc 1 1069 1 is_stmt 1 view -0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		.loc 1 1069 1 is_stmt 0 view .LVU474
 1830 0000 08B5     		push	{r3, lr}
 1831              		.cfi_def_cfa_offset 8
 1832              		.cfi_offset 3, -8
 1833              		.cfi_offset 14, -4
1070:Src/mc_interface.c ****   bool status;
 1834              		.loc 1 1070 3 is_stmt 1 view .LVU475
1071:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1072:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1073:Src/mc_interface.c ****   {
1074:Src/mc_interface.c ****     status = false;
1075:Src/mc_interface.c ****   }
1076:Src/mc_interface.c ****   else
1077:Src/mc_interface.c ****   {
ARM GAS  /tmp/ccRhyv0W.s 			page 54


1078:Src/mc_interface.c **** #endif
1079:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1835              		.loc 1 1079 5 view .LVU476
 1836              		.loc 1 1079 43 is_stmt 0 view .LVU477
 1837 0002 0068     		ldr	r0, [r0]
 1838              	.LVL165:
 1839              		.loc 1 1079 43 view .LVU478
 1840 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1841              	.LVL166:
1080:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1842              		.loc 1 1080 5 is_stmt 1 view .LVU479
 1843              		.loc 1 1080 14 is_stmt 0 view .LVU480
 1844 0008 FFF7FEFF 		bl	SPD_Check
 1845              	.LVL167:
1081:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1082:Src/mc_interface.c ****   }
1083:Src/mc_interface.c **** #endif
1084:Src/mc_interface.c **** 
1085:Src/mc_interface.c ****   return (status);
 1846              		.loc 1 1085 3 is_stmt 1 view .LVU481
1086:Src/mc_interface.c **** }
 1847              		.loc 1 1086 1 is_stmt 0 view .LVU482
 1848 000c 08BD     		pop	{r3, pc}
 1849              		.cfi_endproc
 1850              	.LFE1472:
 1852              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1853              		.align	1
 1854              		.weak	MCI_GetAvrgMecSpeedUnit
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	MCI_GetAvrgMecSpeedUnit:
 1861              	.LVL168:
 1862              	.LFB1473:
1087:Src/mc_interface.c **** 
1088:Src/mc_interface.c **** /**
1089:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1090:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
1091:Src/mc_interface.c ****   *         used by FOC algorithm
1092:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1093:Src/mc_interface.c ****   */
1094:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1095:Src/mc_interface.c **** {
 1863              		.loc 1 1095 1 is_stmt 1 view -0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              		.loc 1 1095 1 is_stmt 0 view .LVU484
 1868 0000 08B5     		push	{r3, lr}
 1869              		.cfi_def_cfa_offset 8
 1870              		.cfi_offset 3, -8
 1871              		.cfi_offset 14, -4
1096:Src/mc_interface.c ****   int16_t temp_speed;
 1872              		.loc 1 1096 3 is_stmt 1 view .LVU485
1097:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1098:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccRhyv0W.s 			page 55


1099:Src/mc_interface.c ****   {
1100:Src/mc_interface.c ****     temp_speed = 0;
1101:Src/mc_interface.c ****   }
1102:Src/mc_interface.c ****   else
1103:Src/mc_interface.c ****   {
1104:Src/mc_interface.c **** #endif
1105:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1873              		.loc 1 1105 5 view .LVU486
 1874              		.loc 1 1105 44 is_stmt 0 view .LVU487
 1875 0002 0068     		ldr	r0, [r0]
 1876              	.LVL169:
 1877              		.loc 1 1105 44 view .LVU488
 1878 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1879              	.LVL170:
1106:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1880              		.loc 1 1106 5 is_stmt 1 view .LVU489
 1881              		.loc 1 1106 18 is_stmt 0 view .LVU490
 1882 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1883              	.LVL171:
1107:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1108:Src/mc_interface.c ****   }
1109:Src/mc_interface.c **** #endif
1110:Src/mc_interface.c ****   return (temp_speed);
 1884              		.loc 1 1110 3 is_stmt 1 view .LVU491
1111:Src/mc_interface.c **** }
 1885              		.loc 1 1111 1 is_stmt 0 view .LVU492
 1886 000c 08BD     		pop	{r3, pc}
 1887              		.cfi_endproc
 1888              	.LFE1473:
 1890              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1891              		.align	1
 1892              		.weak	MCI_GetAvrgMecSpeed_F
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu fpv4-sp-d16
 1898              	MCI_GetAvrgMecSpeed_F:
 1899              	.LVL172:
 1900              	.LFB1474:
1112:Src/mc_interface.c **** 
1113:Src/mc_interface.c **** /**
1114:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
1115:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1116:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1117:Src/mc_interface.c ****   */
1118:Src/mc_interface.c **** __weak float MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1119:Src/mc_interface.c **** {
 1901              		.loc 1 1119 1 is_stmt 1 view -0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		.loc 1 1119 1 is_stmt 0 view .LVU494
 1906 0000 08B5     		push	{r3, lr}
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 3, -8
 1909              		.cfi_offset 14, -4
1120:Src/mc_interface.c ****   SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
ARM GAS  /tmp/ccRhyv0W.s 			page 56


 1910              		.loc 1 1120 3 is_stmt 1 view .LVU495
 1911              		.loc 1 1120 41 is_stmt 0 view .LVU496
 1912 0002 0068     		ldr	r0, [r0]
 1913              	.LVL173:
 1914              		.loc 1 1120 41 view .LVU497
 1915 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1916              	.LVL174:
1121:Src/mc_interface.c **** 
1122:Src/mc_interface.c ****   return ((float)((SPD_GetAvrgMecSpeedUnit(SpeedSensor) * U_RPM) / SPEED_UNIT));
 1917              		.loc 1 1122 3 is_stmt 1 view .LVU498
 1918              		.loc 1 1122 20 is_stmt 0 view .LVU499
 1919 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1920              	.LVL175:
 1921              		.loc 1 1122 66 view .LVU500
 1922 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1923 0010 4300     		lsls	r3, r0, #1
 1924 0012 00EE103A 		vmov	s0, r3	@ int
1123:Src/mc_interface.c **** }
 1925              		.loc 1 1123 1 view .LVU501
 1926 0016 B8EEC00A 		vcvt.f32.s32	s0, s0
 1927 001a 08BD     		pop	{r3, pc}
 1928              		.cfi_endproc
 1929              	.LFE1474:
 1931              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1932              		.align	1
 1933              		.weak	MCI_GetMecSpeedRefUnit
 1934              		.syntax unified
 1935              		.thumb
 1936              		.thumb_func
 1937              		.fpu fpv4-sp-d16
 1939              	MCI_GetMecSpeedRefUnit:
 1940              	.LVL176:
 1941              	.LFB1475:
1124:Src/mc_interface.c **** 
1125:Src/mc_interface.c **** /**
1126:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1127:Src/mc_interface.c ****   *
1128:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1129:Src/mc_interface.c ****   *
1130:Src/mc_interface.c ****   */
1131:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1132:Src/mc_interface.c **** {
 1942              		.loc 1 1132 1 is_stmt 1 view -0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              		.loc 1 1132 1 is_stmt 0 view .LVU503
 1947 0000 08B5     		push	{r3, lr}
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 3, -8
 1950              		.cfi_offset 14, -4
1133:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1134:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1135:Src/mc_interface.c **** #else
1136:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1951              		.loc 1 1136 3 is_stmt 1 view .LVU504
 1952              		.loc 1 1136 11 is_stmt 0 view .LVU505
ARM GAS  /tmp/ccRhyv0W.s 			page 57


 1953 0002 0068     		ldr	r0, [r0]
 1954              	.LVL177:
 1955              		.loc 1 1136 11 view .LVU506
 1956 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1957              	.LVL178:
1137:Src/mc_interface.c **** #endif
1138:Src/mc_interface.c **** }
 1958              		.loc 1 1138 1 view .LVU507
 1959 0008 08BD     		pop	{r3, pc}
 1960              		.cfi_endproc
 1961              	.LFE1475:
 1963              		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 1964              		.align	1
 1965              		.weak	MCI_GetMecSpeedRef_F
 1966              		.syntax unified
 1967              		.thumb
 1968              		.thumb_func
 1969              		.fpu fpv4-sp-d16
 1971              	MCI_GetMecSpeedRef_F:
 1972              	.LVL179:
 1973              	.LFB1476:
1139:Src/mc_interface.c **** 
1140:Src/mc_interface.c **** /**
1141:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1142:Src/mc_interface.c ****   *
1143:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1144:Src/mc_interface.c ****   *
1145:Src/mc_interface.c ****   */
1146:Src/mc_interface.c **** __weak float MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1147:Src/mc_interface.c **** {
 1974              		.loc 1 1147 1 is_stmt 1 view -0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		.loc 1 1147 1 is_stmt 0 view .LVU509
 1979 0000 08B5     		push	{r3, lr}
 1980              		.cfi_def_cfa_offset 8
 1981              		.cfi_offset 3, -8
 1982              		.cfi_offset 14, -4
1148:Src/mc_interface.c ****   return ((float)((STC_GetMecSpeedRefUnit( pHandle->pSTC ) * U_RPM) / SPEED_UNIT));
 1983              		.loc 1 1148 3 is_stmt 1 view .LVU510
 1984              		.loc 1 1148 20 is_stmt 0 view .LVU511
 1985 0002 0068     		ldr	r0, [r0]
 1986              	.LVL180:
 1987              		.loc 1 1148 20 view .LVU512
 1988 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1989              	.LVL181:
 1990              		.loc 1 1148 69 view .LVU513
 1991 0008 00EB4000 		add	r0, r0, r0, lsl #1
 1992 000c 4300     		lsls	r3, r0, #1
 1993 000e 00EE103A 		vmov	s0, r3	@ int
1149:Src/mc_interface.c **** }
 1994              		.loc 1 1149 1 view .LVU514
 1995 0012 B8EEC00A 		vcvt.f32.s32	s0, s0
 1996 0016 08BD     		pop	{r3, pc}
 1997              		.cfi_endproc
 1998              	.LFE1476:
ARM GAS  /tmp/ccRhyv0W.s 			page 58


 2000              		.section	.text.MCI_GetIab,"ax",%progbits
 2001              		.align	1
 2002              		.weak	MCI_GetIab
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2006              		.fpu fpv4-sp-d16
 2008              	MCI_GetIab:
 2009              	.LVL182:
 2010              	.LFB1477:
1150:Src/mc_interface.c **** 
1151:Src/mc_interface.c **** /**
1152:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1153:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1154:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1155:Src/mc_interface.c ****   */
1156:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
1157:Src/mc_interface.c **** {
 2011              		.loc 1 1157 1 is_stmt 1 view -0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 8
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
 2016              		.loc 1 1157 1 is_stmt 0 view .LVU516
 2017 0000 82B0     		sub	sp, sp, #8
 2018              		.cfi_def_cfa_offset 8
1158:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1159:Src/mc_interface.c ****   ab_t tempVal;
1160:Src/mc_interface.c **** 
1161:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1162:Src/mc_interface.c ****   {
1163:Src/mc_interface.c ****     tempVal.a = 0;
1164:Src/mc_interface.c ****     tempVal.b = 0;
1165:Src/mc_interface.c ****   }
1166:Src/mc_interface.c ****   else
1167:Src/mc_interface.c ****   {
1168:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1169:Src/mc_interface.c ****   }
1170:Src/mc_interface.c ****   return (tempVal);
1171:Src/mc_interface.c **** #else
1172:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 2019              		.loc 1 1172 3 is_stmt 1 view .LVU517
 2020              		.loc 1 1172 18 is_stmt 0 view .LVU518
 2021 0002 4368     		ldr	r3, [r0, #4]
 2022              		.loc 1 1172 28 view .LVU519
 2023 0004 1868     		ldr	r0, [r3]	@ unaligned
 2024              	.LVL183:
 2025              		.loc 1 1172 28 view .LVU520
 2026 0006 0023     		movs	r3, #0
 2027 0008 82B2     		uxth	r2, r0
 2028 000a 62F30F03 		bfi	r3, r2, #0, #16
 2029 000e 000C     		lsrs	r0, r0, #16
 2030 0010 60F31F43 		bfi	r3, r0, #16, #16
1173:Src/mc_interface.c **** #endif
1174:Src/mc_interface.c **** }
 2031              		.loc 1 1174 1 view .LVU521
 2032 0014 1846     		mov	r0, r3
ARM GAS  /tmp/ccRhyv0W.s 			page 59


 2033 0016 02B0     		add	sp, sp, #8
 2034              		.cfi_def_cfa_offset 0
 2035              		@ sp needed
 2036 0018 7047     		bx	lr
 2037              		.cfi_endproc
 2038              	.LFE1477:
 2040              		.global	__aeabi_d2f
 2041              		.section	.text.MCI_GetIab_F,"ax",%progbits
 2042              		.align	1
 2043              		.weak	MCI_GetIab_F
 2044              		.syntax unified
 2045              		.thumb
 2046              		.thumb_func
 2047              		.fpu fpv4-sp-d16
 2049              	MCI_GetIab_F:
 2050              	.LVL184:
 2051              	.LFB1478:
1175:Src/mc_interface.c **** 
1176:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle)
1177:Src/mc_interface.c **** {
 2052              		.loc 1 1177 1 is_stmt 1 view -0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 24
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              		.loc 1 1177 1 is_stmt 0 view .LVU523
 2057 0000 10B5     		push	{r4, lr}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 4, -8
 2060              		.cfi_offset 14, -4
 2061 0002 86B0     		sub	sp, sp, #24
 2062              		.cfi_def_cfa_offset 32
1178:Src/mc_interface.c ****   ab_f_t Iab;
 2063              		.loc 1 1178 3 is_stmt 1 view .LVU524
1179:Src/mc_interface.c **** 
1180:Src/mc_interface.c ****   Iab.a = (float)((float)pHandle->pFOCVars->Iab.a * CURRENT_CONV_FACTOR_INV);
 2064              		.loc 1 1180 3 view .LVU525
 2065              		.loc 1 1180 33 is_stmt 0 view .LVU526
 2066 0004 4468     		ldr	r4, [r0, #4]
 2067              		.loc 1 1180 48 view .LVU527
 2068 0006 B4F90000 		ldrsh	r0, [r4]
 2069              	.LVL185:
 2070              		.loc 1 1180 19 view .LVU528
 2071 000a 07EE900A 		vmov	s15, r0	@ int
 2072 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2073 0012 17EE900A 		vmov	r0, s15
 2074 0016 FFF7FEFF 		bl	__aeabi_f2d
 2075              	.LVL186:
 2076              		.loc 1 1180 51 view .LVU529
 2077 001a 13A3     		adr	r3, .L140
 2078 001c D3E90023 		ldrd	r2, [r3]
 2079 0020 FFF7FEFF 		bl	__aeabi_dmul
 2080              	.LVL187:
 2081              		.loc 1 1180 11 view .LVU530
 2082 0024 FFF7FEFF 		bl	__aeabi_d2f
 2083              	.LVL188:
 2084              		.loc 1 1180 9 view .LVU531
 2085 0028 0290     		str	r0, [sp, #8]	@ float
ARM GAS  /tmp/ccRhyv0W.s 			page 60


1181:Src/mc_interface.c ****   Iab.b = (float)((float)pHandle->pFOCVars->Iab.b * CURRENT_CONV_FACTOR_INV);
 2086              		.loc 1 1181 3 is_stmt 1 view .LVU532
 2087              		.loc 1 1181 48 is_stmt 0 view .LVU533
 2088 002a B4F90200 		ldrsh	r0, [r4, #2]
 2089              		.loc 1 1181 19 view .LVU534
 2090 002e 07EE900A 		vmov	s15, r0	@ int
 2091 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2092 0036 17EE900A 		vmov	r0, s15
 2093 003a FFF7FEFF 		bl	__aeabi_f2d
 2094              	.LVL189:
 2095              		.loc 1 1181 51 view .LVU535
 2096 003e 0AA3     		adr	r3, .L140
 2097 0040 D3E90023 		ldrd	r2, [r3]
 2098 0044 FFF7FEFF 		bl	__aeabi_dmul
 2099              	.LVL190:
 2100              		.loc 1 1181 11 view .LVU536
 2101 0048 FFF7FEFF 		bl	__aeabi_d2f
 2102              	.LVL191:
 2103              		.loc 1 1181 9 view .LVU537
 2104 004c 0390     		str	r0, [sp, #12]	@ float
1182:Src/mc_interface.c **** 
1183:Src/mc_interface.c ****   return (Iab);
 2105              		.loc 1 1183 3 is_stmt 1 view .LVU538
 2106              		.loc 1 1183 10 is_stmt 0 view .LVU539
 2107 004e 0399     		ldr	r1, [sp, #12]
 2108 0050 0298     		ldr	r0, [sp, #8]
 2109 0052 06AB     		add	r3, sp, #24
 2110 0054 03E90300 		stmdb	r3, {r0, r1}
1184:Src/mc_interface.c **** 
1185:Src/mc_interface.c **** }
 2111              		.loc 1 1185 1 view .LVU540
 2112 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2113 005c DDED050A 		vldr.32	s1, [sp, #20]
 2114 0060 06B0     		add	sp, sp, #24
 2115              		.cfi_def_cfa_offset 8
 2116              		@ sp needed
 2117 0062 10BD     		pop	{r4, pc}
 2118              	.L141:
 2119 0064 AFF30080 		.align	3
 2120              	.L140:
 2121 0068 A59F4B31 		.word	827039653
 2122 006c 68165E3F 		.word	1063130728
 2123              		.cfi_endproc
 2124              	.LFE1478:
 2126              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 2127              		.align	1
 2128              		.weak	MCI_GetIalphabeta
 2129              		.syntax unified
 2130              		.thumb
 2131              		.thumb_func
 2132              		.fpu fpv4-sp-d16
 2134              	MCI_GetIalphabeta:
 2135              	.LVL192:
 2136              	.LFB1479:
1186:Src/mc_interface.c **** 
1187:Src/mc_interface.c **** /**
1188:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
ARM GAS  /tmp/ccRhyv0W.s 			page 61


1189:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1190:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1191:Src/mc_interface.c ****   */
1192:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
1193:Src/mc_interface.c **** {
 2137              		.loc 1 1193 1 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 8
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 2141              		@ link register save eliminated.
 2142              		.loc 1 1193 1 is_stmt 0 view .LVU542
 2143 0000 82B0     		sub	sp, sp, #8
 2144              		.cfi_def_cfa_offset 8
1194:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1195:Src/mc_interface.c ****   alphabeta_t tempVal;
1196:Src/mc_interface.c **** 
1197:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1198:Src/mc_interface.c ****   {
1199:Src/mc_interface.c ****     tempVal.alpha = 0;
1200:Src/mc_interface.c ****     tempVal.beta = 0;
1201:Src/mc_interface.c ****   }
1202:Src/mc_interface.c ****   else
1203:Src/mc_interface.c ****   {
1204:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1205:Src/mc_interface.c ****   }
1206:Src/mc_interface.c ****   return (tempVal);
1207:Src/mc_interface.c **** #else
1208:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 2145              		.loc 1 1208 3 is_stmt 1 view .LVU543
 2146              		.loc 1 1208 18 is_stmt 0 view .LVU544
 2147 0002 4368     		ldr	r3, [r0, #4]
 2148              		.loc 1 1208 28 view .LVU545
 2149 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2150              	.LVL193:
 2151              		.loc 1 1208 28 view .LVU546
 2152 0006 0023     		movs	r3, #0
 2153 0008 82B2     		uxth	r2, r0
 2154 000a 62F30F03 		bfi	r3, r2, #0, #16
 2155 000e 000C     		lsrs	r0, r0, #16
 2156 0010 60F31F43 		bfi	r3, r0, #16, #16
1209:Src/mc_interface.c **** #endif
1210:Src/mc_interface.c **** }
 2157              		.loc 1 1210 1 view .LVU547
 2158 0014 1846     		mov	r0, r3
 2159 0016 02B0     		add	sp, sp, #8
 2160              		.cfi_def_cfa_offset 0
 2161              		@ sp needed
 2162 0018 7047     		bx	lr
 2163              		.cfi_endproc
 2164              	.LFE1479:
 2166              		.section	.text.MCI_GetIqd,"ax",%progbits
 2167              		.align	1
 2168              		.weak	MCI_GetIqd
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccRhyv0W.s 			page 62


 2174              	MCI_GetIqd:
 2175              	.LVL194:
 2176              	.LFB1480:
1211:Src/mc_interface.c **** 
1212:Src/mc_interface.c **** /**
1213:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1214:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1215:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1216:Src/mc_interface.c ****   */
1217:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
1218:Src/mc_interface.c **** {
 2177              		.loc 1 1218 1 is_stmt 1 view -0
 2178              		.cfi_startproc
 2179              		@ args = 0, pretend = 0, frame = 8
 2180              		@ frame_needed = 0, uses_anonymous_args = 0
 2181              		@ link register save eliminated.
 2182              		.loc 1 1218 1 is_stmt 0 view .LVU549
 2183 0000 82B0     		sub	sp, sp, #8
 2184              		.cfi_def_cfa_offset 8
1219:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1220:Src/mc_interface.c ****   qd_t tempVal;
1221:Src/mc_interface.c **** 
1222:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1223:Src/mc_interface.c ****   {
1224:Src/mc_interface.c ****     tempVal.q = 0;
1225:Src/mc_interface.c ****     tempVal.d = 0;
1226:Src/mc_interface.c ****   }
1227:Src/mc_interface.c ****   else
1228:Src/mc_interface.c ****   {
1229:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1230:Src/mc_interface.c ****   }
1231:Src/mc_interface.c ****   return (tempVal);
1232:Src/mc_interface.c **** #else
1233:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 2185              		.loc 1 1233 3 is_stmt 1 view .LVU550
 2186              		.loc 1 1233 18 is_stmt 0 view .LVU551
 2187 0002 4368     		ldr	r3, [r0, #4]
 2188              		.loc 1 1233 28 view .LVU552
 2189 0004 D868     		ldr	r0, [r3, #12]	@ unaligned
 2190              	.LVL195:
 2191              		.loc 1 1233 28 view .LVU553
 2192 0006 0023     		movs	r3, #0
 2193 0008 82B2     		uxth	r2, r0
 2194 000a 62F30F03 		bfi	r3, r2, #0, #16
 2195 000e 000C     		lsrs	r0, r0, #16
 2196 0010 60F31F43 		bfi	r3, r0, #16, #16
1234:Src/mc_interface.c **** #endif
1235:Src/mc_interface.c **** }
 2197              		.loc 1 1235 1 view .LVU554
 2198 0014 1846     		mov	r0, r3
 2199 0016 02B0     		add	sp, sp, #8
 2200              		.cfi_def_cfa_offset 0
 2201              		@ sp needed
 2202 0018 7047     		bx	lr
 2203              		.cfi_endproc
 2204              	.LFE1480:
 2206              		.section	.text.MCI_GetIqd_F,"ax",%progbits
ARM GAS  /tmp/ccRhyv0W.s 			page 63


 2207              		.align	1
 2208              		.weak	MCI_GetIqd_F
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2212              		.fpu fpv4-sp-d16
 2214              	MCI_GetIqd_F:
 2215              	.LVL196:
 2216              	.LFB1481:
1236:Src/mc_interface.c **** 
1237:Src/mc_interface.c **** /**
1238:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float format
1239:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1240:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1241:Src/mc_interface.c ****   */
1242:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle)
1243:Src/mc_interface.c **** {
 2217              		.loc 1 1243 1 is_stmt 1 view -0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 24
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              		.loc 1 1243 1 is_stmt 0 view .LVU556
 2222 0000 10B5     		push	{r4, lr}
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 4, -8
 2225              		.cfi_offset 14, -4
 2226 0002 86B0     		sub	sp, sp, #24
 2227              		.cfi_def_cfa_offset 32
1244:Src/mc_interface.c ****   qd_f_t Iqd;
 2228              		.loc 1 1244 3 is_stmt 1 view .LVU557
1245:Src/mc_interface.c **** 
1246:Src/mc_interface.c ****   Iqd.d = (float)((float)pHandle->pFOCVars->Iqd.d * CURRENT_CONV_FACTOR_INV);
 2229              		.loc 1 1246 3 view .LVU558
 2230              		.loc 1 1246 33 is_stmt 0 view .LVU559
 2231 0004 4468     		ldr	r4, [r0, #4]
 2232              		.loc 1 1246 48 view .LVU560
 2233 0006 B4F90E00 		ldrsh	r0, [r4, #14]
 2234              	.LVL197:
 2235              		.loc 1 1246 19 view .LVU561
 2236 000a 07EE900A 		vmov	s15, r0	@ int
 2237 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2238 0012 17EE900A 		vmov	r0, s15
 2239 0016 FFF7FEFF 		bl	__aeabi_f2d
 2240              	.LVL198:
 2241              		.loc 1 1246 51 view .LVU562
 2242 001a 13A3     		adr	r3, .L148
 2243 001c D3E90023 		ldrd	r2, [r3]
 2244 0020 FFF7FEFF 		bl	__aeabi_dmul
 2245              	.LVL199:
 2246              		.loc 1 1246 11 view .LVU563
 2247 0024 FFF7FEFF 		bl	__aeabi_d2f
 2248              	.LVL200:
 2249              		.loc 1 1246 9 view .LVU564
 2250 0028 0390     		str	r0, [sp, #12]	@ float
1247:Src/mc_interface.c ****   Iqd.q = (float)((float)pHandle->pFOCVars->Iqd.q * CURRENT_CONV_FACTOR_INV);
 2251              		.loc 1 1247 3 is_stmt 1 view .LVU565
 2252              		.loc 1 1247 48 is_stmt 0 view .LVU566
ARM GAS  /tmp/ccRhyv0W.s 			page 64


 2253 002a B4F90C00 		ldrsh	r0, [r4, #12]
 2254              		.loc 1 1247 19 view .LVU567
 2255 002e 07EE900A 		vmov	s15, r0	@ int
 2256 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2257 0036 17EE900A 		vmov	r0, s15
 2258 003a FFF7FEFF 		bl	__aeabi_f2d
 2259              	.LVL201:
 2260              		.loc 1 1247 51 view .LVU568
 2261 003e 0AA3     		adr	r3, .L148
 2262 0040 D3E90023 		ldrd	r2, [r3]
 2263 0044 FFF7FEFF 		bl	__aeabi_dmul
 2264              	.LVL202:
 2265              		.loc 1 1247 11 view .LVU569
 2266 0048 FFF7FEFF 		bl	__aeabi_d2f
 2267              	.LVL203:
 2268              		.loc 1 1247 9 view .LVU570
 2269 004c 0290     		str	r0, [sp, #8]	@ float
1248:Src/mc_interface.c **** 
1249:Src/mc_interface.c ****   return (Iqd);
 2270              		.loc 1 1249 3 is_stmt 1 view .LVU571
 2271              		.loc 1 1249 10 is_stmt 0 view .LVU572
 2272 004e 0399     		ldr	r1, [sp, #12]
 2273 0050 0298     		ldr	r0, [sp, #8]
 2274 0052 06AB     		add	r3, sp, #24
 2275 0054 03E90300 		stmdb	r3, {r0, r1}
1250:Src/mc_interface.c **** }
 2276              		.loc 1 1250 1 view .LVU573
 2277 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2278 005c DDED050A 		vldr.32	s1, [sp, #20]
 2279 0060 06B0     		add	sp, sp, #24
 2280              		.cfi_def_cfa_offset 8
 2281              		@ sp needed
 2282 0062 10BD     		pop	{r4, pc}
 2283              	.L149:
 2284 0064 AFF30080 		.align	3
 2285              	.L148:
 2286 0068 A59F4B31 		.word	827039653
 2287 006c 68165E3F 		.word	1063130728
 2288              		.cfi_endproc
 2289              	.LFE1481:
 2291              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2292              		.align	1
 2293              		.weak	MCI_GetIqdHF
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2297              		.fpu fpv4-sp-d16
 2299              	MCI_GetIqdHF:
 2300              	.LVL204:
 2301              	.LFB1482:
1251:Src/mc_interface.c **** 
1252:Src/mc_interface.c **** /**
1253:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1254:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1255:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1256:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1257:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccRhyv0W.s 			page 65


1258:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle)
1259:Src/mc_interface.c **** {
 2302              		.loc 1 1259 1 is_stmt 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 8
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307              		.loc 1 1259 1 is_stmt 0 view .LVU575
 2308 0000 82B0     		sub	sp, sp, #8
 2309              		.cfi_def_cfa_offset 8
1260:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1261:Src/mc_interface.c ****   qd_t tempVal;
1262:Src/mc_interface.c **** 
1263:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1264:Src/mc_interface.c ****   {
1265:Src/mc_interface.c ****     tempVal.q = 0;
1266:Src/mc_interface.c ****     tempVal.d = 0;
1267:Src/mc_interface.c ****   }
1268:Src/mc_interface.c ****   else
1269:Src/mc_interface.c ****   {
1270:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1271:Src/mc_interface.c ****   }
1272:Src/mc_interface.c ****   return (tempVal);
1273:Src/mc_interface.c **** #else
1274:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2310              		.loc 1 1274 3 is_stmt 1 view .LVU576
 2311              		.loc 1 1274 18 is_stmt 0 view .LVU577
 2312 0002 4368     		ldr	r3, [r0, #4]
 2313              		.loc 1 1274 28 view .LVU578
 2314 0004 9868     		ldr	r0, [r3, #8]	@ unaligned
 2315              	.LVL205:
 2316              		.loc 1 1274 28 view .LVU579
 2317 0006 0023     		movs	r3, #0
 2318 0008 82B2     		uxth	r2, r0
 2319 000a 62F30F03 		bfi	r3, r2, #0, #16
 2320 000e 000C     		lsrs	r0, r0, #16
 2321 0010 60F31F43 		bfi	r3, r0, #16, #16
1275:Src/mc_interface.c **** #endif
1276:Src/mc_interface.c **** }
 2322              		.loc 1 1276 1 view .LVU580
 2323 0014 1846     		mov	r0, r3
 2324 0016 02B0     		add	sp, sp, #8
 2325              		.cfi_def_cfa_offset 0
 2326              		@ sp needed
 2327 0018 7047     		bx	lr
 2328              		.cfi_endproc
 2329              	.LFE1482:
 2331              		.section	.text.MCI_GetIqdref,"ax",%progbits
 2332              		.align	1
 2333              		.weak	MCI_GetIqdref
 2334              		.syntax unified
 2335              		.thumb
 2336              		.thumb_func
 2337              		.fpu fpv4-sp-d16
 2339              	MCI_GetIqdref:
 2340              	.LVL206:
 2341              	.LFB1483:
ARM GAS  /tmp/ccRhyv0W.s 			page 66


1277:Src/mc_interface.c **** 
1278:Src/mc_interface.c **** /**
1279:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1280:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1281:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1282:Src/mc_interface.c ****   */
1283:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
1284:Src/mc_interface.c **** {
 2342              		.loc 1 1284 1 is_stmt 1 view -0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 8
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
 2347              		.loc 1 1284 1 is_stmt 0 view .LVU582
 2348 0000 82B0     		sub	sp, sp, #8
 2349              		.cfi_def_cfa_offset 8
1285:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1286:Src/mc_interface.c ****   qd_t tempVal;
1287:Src/mc_interface.c **** 
1288:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1289:Src/mc_interface.c ****   {
1290:Src/mc_interface.c ****     tempVal.q = 0;
1291:Src/mc_interface.c ****     tempVal.d = 0;
1292:Src/mc_interface.c ****   }
1293:Src/mc_interface.c ****   else
1294:Src/mc_interface.c ****   {
1295:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1296:Src/mc_interface.c ****   }
1297:Src/mc_interface.c ****   return (tempVal);
1298:Src/mc_interface.c **** #else
1299:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2350              		.loc 1 1299 3 is_stmt 1 view .LVU583
 2351              		.loc 1 1299 18 is_stmt 0 view .LVU584
 2352 0002 4368     		ldr	r3, [r0, #4]
 2353              		.loc 1 1299 28 view .LVU585
 2354 0004 1869     		ldr	r0, [r3, #16]	@ unaligned
 2355              	.LVL207:
 2356              		.loc 1 1299 28 view .LVU586
 2357 0006 0023     		movs	r3, #0
 2358 0008 82B2     		uxth	r2, r0
 2359 000a 62F30F03 		bfi	r3, r2, #0, #16
 2360 000e 000C     		lsrs	r0, r0, #16
 2361 0010 60F31F43 		bfi	r3, r0, #16, #16
1300:Src/mc_interface.c **** #endif
1301:Src/mc_interface.c **** }
 2362              		.loc 1 1301 1 view .LVU587
 2363 0014 1846     		mov	r0, r3
 2364 0016 02B0     		add	sp, sp, #8
 2365              		.cfi_def_cfa_offset 0
 2366              		@ sp needed
 2367 0018 7047     		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE1483:
 2371              		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2372              		.align	1
 2373              		.weak	MCI_GetIqdref_F
 2374              		.syntax unified
ARM GAS  /tmp/ccRhyv0W.s 			page 67


 2375              		.thumb
 2376              		.thumb_func
 2377              		.fpu fpv4-sp-d16
 2379              	MCI_GetIqdref_F:
 2380              	.LVL208:
 2381              	.LFB1484:
1302:Src/mc_interface.c **** 
1303:Src/mc_interface.c **** /**
1304:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float format
1305:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1306:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1307:Src/mc_interface.c ****   */
1308:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle)
1309:Src/mc_interface.c **** {
 2382              		.loc 1 1309 1 is_stmt 1 view -0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 24
 2385              		@ frame_needed = 0, uses_anonymous_args = 0
 2386              		.loc 1 1309 1 is_stmt 0 view .LVU589
 2387 0000 10B5     		push	{r4, lr}
 2388              		.cfi_def_cfa_offset 8
 2389              		.cfi_offset 4, -8
 2390              		.cfi_offset 14, -4
 2391 0002 86B0     		sub	sp, sp, #24
 2392              		.cfi_def_cfa_offset 32
1310:Src/mc_interface.c ****   qd_f_t Iqdref;
 2393              		.loc 1 1310 3 is_stmt 1 view .LVU590
1311:Src/mc_interface.c **** 
1312:Src/mc_interface.c ****   Iqdref.d = (float)((float)pHandle->pFOCVars->Iqdref.d * CURRENT_CONV_FACTOR_INV);
 2394              		.loc 1 1312 3 view .LVU591
 2395              		.loc 1 1312 36 is_stmt 0 view .LVU592
 2396 0004 4468     		ldr	r4, [r0, #4]
 2397              		.loc 1 1312 54 view .LVU593
 2398 0006 B4F91200 		ldrsh	r0, [r4, #18]
 2399              	.LVL209:
 2400              		.loc 1 1312 22 view .LVU594
 2401 000a 07EE900A 		vmov	s15, r0	@ int
 2402 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2403 0012 17EE900A 		vmov	r0, s15
 2404 0016 FFF7FEFF 		bl	__aeabi_f2d
 2405              	.LVL210:
 2406              		.loc 1 1312 57 view .LVU595
 2407 001a 13A3     		adr	r3, .L156
 2408 001c D3E90023 		ldrd	r2, [r3]
 2409 0020 FFF7FEFF 		bl	__aeabi_dmul
 2410              	.LVL211:
 2411              		.loc 1 1312 14 view .LVU596
 2412 0024 FFF7FEFF 		bl	__aeabi_d2f
 2413              	.LVL212:
 2414              		.loc 1 1312 12 view .LVU597
 2415 0028 0390     		str	r0, [sp, #12]	@ float
1313:Src/mc_interface.c ****   Iqdref.q = (float)((float)pHandle->pFOCVars->Iqdref.q * CURRENT_CONV_FACTOR_INV);
 2416              		.loc 1 1313 3 is_stmt 1 view .LVU598
 2417              		.loc 1 1313 54 is_stmt 0 view .LVU599
 2418 002a B4F91000 		ldrsh	r0, [r4, #16]
 2419              		.loc 1 1313 22 view .LVU600
 2420 002e 07EE900A 		vmov	s15, r0	@ int
ARM GAS  /tmp/ccRhyv0W.s 			page 68


 2421 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2422 0036 17EE900A 		vmov	r0, s15
 2423 003a FFF7FEFF 		bl	__aeabi_f2d
 2424              	.LVL213:
 2425              		.loc 1 1313 57 view .LVU601
 2426 003e 0AA3     		adr	r3, .L156
 2427 0040 D3E90023 		ldrd	r2, [r3]
 2428 0044 FFF7FEFF 		bl	__aeabi_dmul
 2429              	.LVL214:
 2430              		.loc 1 1313 14 view .LVU602
 2431 0048 FFF7FEFF 		bl	__aeabi_d2f
 2432              	.LVL215:
 2433              		.loc 1 1313 12 view .LVU603
 2434 004c 0290     		str	r0, [sp, #8]	@ float
1314:Src/mc_interface.c **** 
1315:Src/mc_interface.c ****   return ( Iqdref );
 2435              		.loc 1 1315 3 is_stmt 1 view .LVU604
 2436              		.loc 1 1315 10 is_stmt 0 view .LVU605
 2437 004e 0399     		ldr	r1, [sp, #12]
 2438 0050 0298     		ldr	r0, [sp, #8]
 2439 0052 06AB     		add	r3, sp, #24
 2440 0054 03E90300 		stmdb	r3, {r0, r1}
1316:Src/mc_interface.c **** }
 2441              		.loc 1 1316 1 view .LVU606
 2442 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2443 005c DDED050A 		vldr.32	s1, [sp, #20]
 2444 0060 06B0     		add	sp, sp, #24
 2445              		.cfi_def_cfa_offset 8
 2446              		@ sp needed
 2447 0062 10BD     		pop	{r4, pc}
 2448              	.L157:
 2449 0064 AFF30080 		.align	3
 2450              	.L156:
 2451 0068 A59F4B31 		.word	827039653
 2452 006c 68165E3F 		.word	1063130728
 2453              		.cfi_endproc
 2454              	.LFE1484:
 2456              		.section	.text.MCI_GetVqd,"ax",%progbits
 2457              		.align	1
 2458              		.weak	MCI_GetVqd
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2462              		.fpu fpv4-sp-d16
 2464              	MCI_GetVqd:
 2465              	.LVL216:
 2466              	.LFB1485:
1317:Src/mc_interface.c **** 
1318:Src/mc_interface.c **** /**
1319:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1320:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1321:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
1322:Src/mc_interface.c ****   */
1323:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
1324:Src/mc_interface.c **** {
 2467              		.loc 1 1324 1 is_stmt 1 view -0
 2468              		.cfi_startproc
ARM GAS  /tmp/ccRhyv0W.s 			page 69


 2469              		@ args = 0, pretend = 0, frame = 8
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              		@ link register save eliminated.
 2472              		.loc 1 1324 1 is_stmt 0 view .LVU608
 2473 0000 82B0     		sub	sp, sp, #8
 2474              		.cfi_def_cfa_offset 8
1325:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1326:Src/mc_interface.c ****   qd_t tempVal;
1327:Src/mc_interface.c **** 
1328:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1329:Src/mc_interface.c ****   {
1330:Src/mc_interface.c ****     tempVal.q = 0;
1331:Src/mc_interface.c ****     tempVal.d = 0;
1332:Src/mc_interface.c ****   }
1333:Src/mc_interface.c ****   else
1334:Src/mc_interface.c ****   {
1335:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1336:Src/mc_interface.c ****   }
1337:Src/mc_interface.c ****   return (tempVal);
1338:Src/mc_interface.c **** #else
1339:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2475              		.loc 1 1339 3 is_stmt 1 view .LVU609
 2476              		.loc 1 1339 18 is_stmt 0 view .LVU610
 2477 0002 4368     		ldr	r3, [r0, #4]
 2478              		.loc 1 1339 28 view .LVU611
 2479 0004 D3F81600 		ldr	r0, [r3, #22]	@ unaligned
 2480              	.LVL217:
 2481              		.loc 1 1339 28 view .LVU612
 2482 0008 0023     		movs	r3, #0
 2483 000a 82B2     		uxth	r2, r0
 2484 000c 62F30F03 		bfi	r3, r2, #0, #16
 2485 0010 000C     		lsrs	r0, r0, #16
 2486 0012 60F31F43 		bfi	r3, r0, #16, #16
1340:Src/mc_interface.c **** #endif
1341:Src/mc_interface.c **** }
 2487              		.loc 1 1341 1 view .LVU613
 2488 0016 1846     		mov	r0, r3
 2489 0018 02B0     		add	sp, sp, #8
 2490              		.cfi_def_cfa_offset 0
 2491              		@ sp needed
 2492 001a 7047     		bx	lr
 2493              		.cfi_endproc
 2494              	.LFE1485:
 2496              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2497              		.align	1
 2498              		.weak	MCI_GetValphabeta
 2499              		.syntax unified
 2500              		.thumb
 2501              		.thumb_func
 2502              		.fpu fpv4-sp-d16
 2504              	MCI_GetValphabeta:
 2505              	.LVL218:
 2506              	.LFB1486:
1342:Src/mc_interface.c **** 
1343:Src/mc_interface.c **** /**
1344:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1345:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  /tmp/ccRhyv0W.s 			page 70


1346:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1347:Src/mc_interface.c ****   */
1348:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
1349:Src/mc_interface.c **** {
 2507              		.loc 1 1349 1 is_stmt 1 view -0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 8
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              		@ link register save eliminated.
 2512              		.loc 1 1349 1 is_stmt 0 view .LVU615
 2513 0000 82B0     		sub	sp, sp, #8
 2514              		.cfi_def_cfa_offset 8
1350:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1351:Src/mc_interface.c ****   alphabeta_t tempVal;
1352:Src/mc_interface.c **** 
1353:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1354:Src/mc_interface.c ****   {
1355:Src/mc_interface.c ****     tempVal.alpha = 0;
1356:Src/mc_interface.c ****     tempVal.beta = 0;
1357:Src/mc_interface.c ****   }
1358:Src/mc_interface.c ****   else
1359:Src/mc_interface.c ****   {
1360:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1361:Src/mc_interface.c ****   }
1362:Src/mc_interface.c ****   return (tempVal);
1363:Src/mc_interface.c **** #else
1364:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2515              		.loc 1 1364 3 is_stmt 1 view .LVU616
 2516              		.loc 1 1364 18 is_stmt 0 view .LVU617
 2517 0002 4368     		ldr	r3, [r0, #4]
 2518              		.loc 1 1364 28 view .LVU618
 2519 0004 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2520              	.LVL219:
 2521              		.loc 1 1364 28 view .LVU619
 2522 0008 0023     		movs	r3, #0
 2523 000a 82B2     		uxth	r2, r0
 2524 000c 62F30F03 		bfi	r3, r2, #0, #16
 2525 0010 000C     		lsrs	r0, r0, #16
 2526 0012 60F31F43 		bfi	r3, r0, #16, #16
1365:Src/mc_interface.c **** #endif
1366:Src/mc_interface.c **** }
 2527              		.loc 1 1366 1 view .LVU620
 2528 0016 1846     		mov	r0, r3
 2529 0018 02B0     		add	sp, sp, #8
 2530              		.cfi_def_cfa_offset 0
 2531              		@ sp needed
 2532 001a 7047     		bx	lr
 2533              		.cfi_endproc
 2534              	.LFE1486:
 2536              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2537              		.align	1
 2538              		.weak	MCI_GetElAngledpp
 2539              		.syntax unified
 2540              		.thumb
 2541              		.thumb_func
 2542              		.fpu fpv4-sp-d16
 2544              	MCI_GetElAngledpp:
ARM GAS  /tmp/ccRhyv0W.s 			page 71


 2545              	.LVL220:
 2546              	.LFB1487:
1367:Src/mc_interface.c **** 
1368:Src/mc_interface.c **** /**
1369:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1370:Src/mc_interface.c ****   *         frame transformation
1371:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1372:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1373:Src/mc_interface.c ****   */
1374:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle)
1375:Src/mc_interface.c **** {
 2547              		.loc 1 1375 1 is_stmt 1 view -0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              		@ link register save eliminated.
1376:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1377:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1378:Src/mc_interface.c **** #else
1379:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
 2552              		.loc 1 1379 3 view .LVU622
 2553              		.loc 1 1379 18 is_stmt 0 view .LVU623
 2554 0000 4368     		ldr	r3, [r0, #4]
1380:Src/mc_interface.c **** #endif
1381:Src/mc_interface.c **** }
 2555              		.loc 1 1381 1 view .LVU624
 2556 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2557              	.LVL221:
 2558              		.loc 1 1381 1 view .LVU625
 2559 0006 7047     		bx	lr
 2560              		.cfi_endproc
 2561              	.LFE1487:
 2563              		.section	.text.MCI_GetTeref,"ax",%progbits
 2564              		.align	1
 2565              		.weak	MCI_GetTeref
 2566              		.syntax unified
 2567              		.thumb
 2568              		.thumb_func
 2569              		.fpu fpv4-sp-d16
 2571              	MCI_GetTeref:
 2572              	.LVL222:
 2573              	.LFB1488:
1382:Src/mc_interface.c **** 
1383:Src/mc_interface.c **** /**
1384:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1385:Src/mc_interface.c ****   *         Iqref and Idref computation
1386:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1387:Src/mc_interface.c ****   * @retval int16_t Teref
1388:Src/mc_interface.c ****   */
1389:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
1390:Src/mc_interface.c **** {
 2574              		.loc 1 1390 1 is_stmt 1 view -0
 2575              		.cfi_startproc
 2576              		@ args = 0, pretend = 0, frame = 0
 2577              		@ frame_needed = 0, uses_anonymous_args = 0
 2578              		@ link register save eliminated.
1391:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
ARM GAS  /tmp/ccRhyv0W.s 			page 72


1392:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1393:Src/mc_interface.c **** #else
1394:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2579              		.loc 1 1394 3 view .LVU627
 2580              		.loc 1 1394 18 is_stmt 0 view .LVU628
 2581 0000 4368     		ldr	r3, [r0, #4]
1395:Src/mc_interface.c **** #endif
1396:Src/mc_interface.c **** }
 2582              		.loc 1 1396 1 view .LVU629
 2583 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2584              	.LVL223:
 2585              		.loc 1 1396 1 view .LVU630
 2586 0006 7047     		bx	lr
 2587              		.cfi_endproc
 2588              	.LFE1488:
 2590              		.global	__aeabi_i2d
 2591              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2592              		.align	1
 2593              		.weak	MCI_GetTeref_F
 2594              		.syntax unified
 2595              		.thumb
 2596              		.thumb_func
 2597              		.fpu fpv4-sp-d16
 2599              	MCI_GetTeref_F:
 2600              	.LVL224:
 2601              	.LFB1489:
1397:Src/mc_interface.c **** 
1398:Src/mc_interface.c **** /**
1399:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1400:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1401:Src/mc_interface.c ****   * @retval float Teref
1402:Src/mc_interface.c ****   */
1403:Src/mc_interface.c **** __weak float MCI_GetTeref_F(MCI_Handle_t *pHandle)
1404:Src/mc_interface.c **** {
 2602              		.loc 1 1404 1 is_stmt 1 view -0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
 2606              		.loc 1 1404 1 is_stmt 0 view .LVU632
 2607 0000 08B5     		push	{r3, lr}
 2608              		.cfi_def_cfa_offset 8
 2609              		.cfi_offset 3, -8
 2610              		.cfi_offset 14, -4
1405:Src/mc_interface.c **** 
1406:Src/mc_interface.c ****   return ((float)(pHandle->pFOCVars->hTeref * CURRENT_CONV_FACTOR_INV));
 2611              		.loc 1 1406 3 is_stmt 1 view .LVU633
 2612              		.loc 1 1406 26 is_stmt 0 view .LVU634
 2613 0002 4368     		ldr	r3, [r0, #4]
 2614              		.loc 1 1406 45 view .LVU635
 2615 0004 B3F91E00 		ldrsh	r0, [r3, #30]
 2616              	.LVL225:
 2617              		.loc 1 1406 45 view .LVU636
 2618 0008 FFF7FEFF 		bl	__aeabi_i2d
 2619              	.LVL226:
 2620 000c 04A3     		adr	r3, .L166
 2621 000e D3E90023 		ldrd	r2, [r3]
 2622 0012 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccRhyv0W.s 			page 73


 2623              	.LVL227:
 2624              		.loc 1 1406 11 view .LVU637
 2625 0016 FFF7FEFF 		bl	__aeabi_d2f
 2626              	.LVL228:
1407:Src/mc_interface.c **** }
 2627              		.loc 1 1407 1 view .LVU638
 2628 001a 00EE100A 		vmov	s0, r0
 2629 001e 08BD     		pop	{r3, pc}
 2630              	.L167:
 2631              		.align	3
 2632              	.L166:
 2633 0020 A59F4B31 		.word	827039653
 2634 0024 68165E3F 		.word	1063130728
 2635              		.cfi_endproc
 2636              	.LFE1489:
 2638              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2639              		.align	1
 2640              		.weak	MCI_GetPhaseCurrentAmplitude
 2641              		.syntax unified
 2642              		.thumb
 2643              		.thumb_func
 2644              		.fpu fpv4-sp-d16
 2646              	MCI_GetPhaseCurrentAmplitude:
 2647              	.LVL229:
 2648              	.LFB1490:
1408:Src/mc_interface.c **** 
1409:Src/mc_interface.c **** /**
1410:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
1411:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1412:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1413:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1414:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1415:Src/mc_interface.c ****   */
1416:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle)
1417:Src/mc_interface.c **** {
 2649              		.loc 1 1417 1 is_stmt 1 view -0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 8
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              		@ link register save eliminated.
 2654              		.loc 1 1417 1 is_stmt 0 view .LVU640
 2655 0000 82B0     		sub	sp, sp, #8
 2656              		.cfi_def_cfa_offset 8
1418:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2657              		.loc 1 1418 3 is_stmt 1 view .LVU641
1419:Src/mc_interface.c ****   int16_t wAux;
 2658              		.loc 1 1419 3 view .LVU642
1420:Src/mc_interface.c **** 
1421:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1422:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1423:Src/mc_interface.c ****   {
1424:Src/mc_interface.c ****     wAux = 0;
1425:Src/mc_interface.c ****   }
1426:Src/mc_interface.c ****   else
1427:Src/mc_interface.c ****   {
1428:Src/mc_interface.c **** #endif
1429:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
ARM GAS  /tmp/ccRhyv0W.s 			page 74


 2659              		.loc 1 1429 3 view .LVU643
 2660              		.loc 1 1429 23 is_stmt 0 view .LVU644
 2661 0002 4368     		ldr	r3, [r0, #4]
 2662              		.loc 1 1429 14 view .LVU645
 2663 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2664              	.LVL230:
 2665              		.loc 1 1429 14 view .LVU646
 2666 0006 0190     		str	r0, [sp, #4]
1430:Src/mc_interface.c ****   wAux = MCM_Modulus( Local_Curr.alpha, Local_Curr.beta );
 2667              		.loc 1 1430 3 is_stmt 1 view .LVU647
 2668              		.loc 1 1430 10 is_stmt 0 view .LVU648
 2669 0008 03B2     		sxth	r3, r0
 2670 000a 0014     		asrs	r0, r0, #16
 2671              	.LVL231:
 2672              	.LBB30:
 2673              	.LBI30:
 2674              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /* CORDIC coprocessor configuration register settings */
ARM GAS  /tmp/ccRhyv0W.s 			page 75


  41:Inc/mc_math.h **** 
  42:Inc/mc_math.h **** /* CORDIC FUNCTION: PHASE q1.31 (Electrical Angle computation) */
  43:Inc/mc_math.h **** #define CORDIC_CONFIG_PHASE     (LL_CORDIC_FUNCTION_PHASE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDIC
  44:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_2 | LL_CORDIC_NBREAD_1 |\
  45:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  46:Inc/mc_math.h **** 
  47:Inc/mc_math.h **** /* CORDIC FUNCTION: SQUAREROOT q1.31 */
  48:Inc/mc_math.h **** #define CORDIC_CONFIG_SQRT      (LL_CORDIC_FUNCTION_SQUAREROOT | LL_CORDIC_PRECISION_6CYCLES | LL_C
  49:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  50:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  51:Inc/mc_math.h **** 
  52:Inc/mc_math.h **** /* CORDIC FUNCTION: COSINE q1.15 */
  53:Inc/mc_math.h **** #define CORDIC_CONFIG_COSINE    (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDI
  54:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  55:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  56:Inc/mc_math.h **** 
  57:Inc/mc_math.h **** /* CORDIC FUNCTION: MODULUS q1.15 */
  58:Inc/mc_math.h **** #define CORDIC_CONFIG_MODULUS   (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_6CYCLES | LL_CORD
  59:Inc/mc_math.h **** 				 LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  60:Inc/mc_math.h **** 				 LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** #define LOG2(x) \
  66:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  67:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  68:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  69:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  70:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  71:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  72:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  73:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  74:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  75:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  76:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  77:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  78:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  79:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  80:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  81:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  82:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  83:Inc/mc_math.h **** 
  84:Inc/mc_math.h **** /**
  85:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  86:Inc/mc_math.h ****   */
  87:Inc/mc_math.h **** typedef struct
  88:Inc/mc_math.h **** {
  89:Inc/mc_math.h ****   int16_t hCos;
  90:Inc/mc_math.h ****   int16_t hSin;
  91:Inc/mc_math.h **** } Trig_Components;
  92:Inc/mc_math.h **** 
  93:Inc/mc_math.h **** /**
  94:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  95:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  96:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  97:Inc/mc_math.h ****   *                               Ialpha = Ia
ARM GAS  /tmp/ccRhyv0W.s 			page 76


  98:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  99:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format
 100:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format
 101:Inc/mc_math.h ****   */
 102:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
 103:Inc/mc_math.h **** 
 104:Inc/mc_math.h **** /**
 105:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
 106:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
 107:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
 108:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
 109:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
 110:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format
 111:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 112:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format
 113:Inc/mc_math.h ****   */
 114:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
 115:Inc/mc_math.h **** 
 116:Inc/mc_math.h **** /**
 117:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
 118:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
 119:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
 120:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
 121:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 122:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format
 123:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 124:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format
 125:Inc/mc_math.h ****   */
 126:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 127:Inc/mc_math.h **** 
 128:Inc/mc_math.h **** /**
 129:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in
 130:Inc/mc_math.h ****   *         input
 131:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format
 132:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format
 133:Inc/mc_math.h ****   */
 134:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 135:Inc/mc_math.h **** 
 136:Inc/mc_math.h **** /**
 137:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0
 138:Inc/mc_math.h ****   *         for negative s32.
 139:Inc/mc_math.h ****   * @param  Input int32_t number
 140:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0)
 141:Inc/mc_math.h ****   */
 142:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 143:Inc/mc_math.h **** 
 144:Inc/mc_math.h **** /**
 145:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 146:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 147:Inc/mc_math.h ****   */
 148:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 149:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 150:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 151:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 152:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 153:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 154:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
ARM GAS  /tmp/ccRhyv0W.s 			page 77


 155:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 156:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 157:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 158:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 159:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 160:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 161:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 162:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 163:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 164:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 165:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 166:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 167:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 168:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 169:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 170:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 171:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 172:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 173:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 174:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 175:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 176:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 177:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 178:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 179:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 180:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 181:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 182:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 183:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 184:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 185:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 186:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 187:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 188:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 189:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 190:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 191:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 192:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 193:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 194:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 195:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 196:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 197:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20195 , 20221 , 20247,\
 198:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 199:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 200:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 201:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 202:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 203:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 204:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 205:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 206:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 207:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 208:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 209:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 210:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 211:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
ARM GAS  /tmp/ccRhyv0W.s 			page 78


 212:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 213:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 214:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 215:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 216:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 217:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 218:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 219:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 220:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 221:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 222:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 223:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 224:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 225:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 226:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 227:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 228:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 229:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 230:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 231:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 232:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 233:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 234:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 235:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 236:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 237:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 238:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 239:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 240:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 241:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 242:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 243:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 244:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 245:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 246:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 247:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 248:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 249:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 250:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 251:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 252:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 253:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 254:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 255:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 256:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 257:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 258:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 259:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 260:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 261:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 262:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 263:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 264:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 265:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 266:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 267:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 268:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
ARM GAS  /tmp/ccRhyv0W.s 			page 79


 269:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 270:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 271:Inc/mc_math.h ****      31989 , 32006 , 32022 , 32038 , 32055 , 32071 , 32087 , 32104,\
 272:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 273:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 274:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 275:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 276:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 277:Inc/mc_math.h ****      32767 }
 278:Inc/mc_math.h **** 
 279:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 280:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 281:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 282:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 283:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 284:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 285:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 286:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 287:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 288:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 289:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 290:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 291:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 292:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 293:Inc/mc_math.h **** 
 294:Inc/mc_math.h **** /**
 295:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm
 296:Inc/mc_math.h ****   * @param  alpha component
 297:Inc/mc_math.h ****   *         beta component
 298:Inc/mc_math.h ****   * @retval int16_t Modulus
 299:Inc/mc_math.h ****   */
 300:Inc/mc_math.h **** static inline int16_t MCM_Modulus( int16_t alpha, int16_t beta )
 2675              		.loc 2 300 23 is_stmt 1 view .LVU649
 2676              	.LBB31:
 301:Inc/mc_math.h **** {
 302:Inc/mc_math.h ****   int16_t Val;
 2677              		.loc 2 302 3 view .LVU650
 303:Inc/mc_math.h ****    __disable_irq();
 2678              		.loc 2 303 4 view .LVU651
 2679              	.LBB32:
 2680              	.LBI32:
 2681              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccRhyv0W.s 			page 80


  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccRhyv0W.s 			page 81


  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccRhyv0W.s 			page 82


 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/ccRhyv0W.s 			page 83


 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2682              		.loc 3 207 27 view .LVU652
 2683              	.LBB33:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2684              		.loc 3 209 3 view .LVU653
 2685              		.syntax unified
 2686              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2687 000c 72B6     		cpsid i
 2688              	@ 0 "" 2
 2689              		.thumb
 2690              		.syntax unified
 2691              	.LBE33:
 2692              	.LBE32:
 304:Inc/mc_math.h ****    /* Configure and call to CORDIC- */
 305:Inc/mc_math.h ****    WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 2693              		.loc 2 305 4 view .LVU654
 2694 000e 084A     		ldr	r2, .L171
 2695 0010 0849     		ldr	r1, .L171+4
 2696 0012 1160     		str	r1, [r2]
 306:Inc/mc_math.h ****    LL_CORDIC_WriteData(CORDIC, (int32_t) (beta)<<16 | alpha);
 2697              		.loc 2 306 4 view .LVU655
 2698              		.loc 2 306 53 is_stmt 0 view .LVU656
 2699 0014 43EA0043 		orr	r3, r3, r0, lsl #16
 2700              	.LVL232:
 2701              	.LBB34:
 2702              	.LBI34:
 2703              		.file 4 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
ARM GAS  /tmp/ccRhyv0W.s 			page 84


  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
ARM GAS  /tmp/ccRhyv0W.s 			page 85


  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
ARM GAS  /tmp/ccRhyv0W.s 			page 86


 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccRhyv0W.s 			page 87


 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
ARM GAS  /tmp/ccRhyv0W.s 			page 88


 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Configure\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Configure\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Configure\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Configure\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Configure\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Configure\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Configure
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
ARM GAS  /tmp/ccRhyv0W.s 			page 89


 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
ARM GAS  /tmp/ccRhyv0W.s 			page 90


 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(CORDIC_TypeDef *CORDICx)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccRhyv0W.s 			page 91


 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccRhyv0W.s 			page 92


 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccRhyv0W.s 			page 93


 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(CORDIC_TypeDef *CORDICx)
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccRhyv0W.s 			page 94


 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccRhyv0W.s 			page 95


 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(CORDIC_TypeDef *CORDICx)
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(CORDIC_TypeDef *CORDICx, uint32_t Direction)
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
ARM GAS  /tmp/ccRhyv0W.s 			page 96


 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 2704              		.loc 4 732 22 is_stmt 1 view .LVU657
 2705              	.LBB35:
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 2706              		.loc 4 734 3 view .LVU658
 2707 0018 5360     		str	r3, [r2, #4]
 2708              	.LVL233:
 2709              	.L169:
 2710              		.loc 4 734 3 is_stmt 0 view .LVU659
 2711              	.LBE35:
 2712              	.LBE34:
 307:Inc/mc_math.h ****    /* Wait for result */
 308:Inc/mc_math.h ****    while(!LL_CORDIC_IsActiveFlag_RRDY( CORDIC ))
 309:Inc/mc_math.h ****    {
 310:Inc/mc_math.h ****    }
 2713              		.loc 2 310 4 is_stmt 1 view .LVU660
 308:Inc/mc_math.h ****    {
 2714              		.loc 2 308 9 view .LVU661
ARM GAS  /tmp/ccRhyv0W.s 			page 97


 2715              	.LBB36:
 2716              	.LBI36:
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 2717              		.loc 4 712 26 view .LVU662
 2718              	.LBB37:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2719              		.loc 4 714 3 view .LVU663
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2720              		.loc 4 714 12 is_stmt 0 view .LVU664
 2721 001a 054B     		ldr	r3, .L171
 2722 001c 1B68     		ldr	r3, [r3]
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2723              		.loc 4 714 79 view .LVU665
 2724 001e 002B     		cmp	r3, #0
 2725 0020 FBDA     		bge	.L169
 2726              	.LVL234:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2727              		.loc 4 714 79 view .LVU666
 2728              	.LBE37:
 2729              	.LBE36:
 311:Inc/mc_math.h ****   /* Read computed modulus */
 312:Inc/mc_math.h ****   Val = (int16_t)(LL_CORDIC_ReadData(CORDIC)&0xFFFF);
 2730              		.loc 2 312 3 is_stmt 1 view .LVU667
 2731              	.LBB38:
 2732              	.LBI38:
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
 2733              		.loc 4 743 26 view .LVU668
 2734              	.LBB39:
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 2735              		.loc 4 745 3 view .LVU669
 2736              		.loc 4 745 10 is_stmt 0 view .LVU670
 2737 0022 034B     		ldr	r3, .L171
 2738 0024 9868     		ldr	r0, [r3, #8]
 2739              	.LVL235:
 2740              		.loc 4 745 10 view .LVU671
 2741              	.LBE39:
 2742              	.LBE38:
 2743              		.loc 2 312 7 view .LVU672
 2744 0026 00B2     		sxth	r0, r0
 2745              	.LVL236:
 313:Inc/mc_math.h ****   __enable_irq();
 2746              		.loc 2 313 3 is_stmt 1 view .LVU673
 2747              	.LBB40:
 2748              	.LBI40:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2749              		.loc 3 196 27 view .LVU674
 2750              	.LBB41:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccRhyv0W.s 			page 98


 2751              		.loc 3 198 3 view .LVU675
 2752              		.syntax unified
 2753              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2754 0028 62B6     		cpsie i
 2755              	@ 0 "" 2
 2756              		.thumb
 2757              		.syntax unified
 2758              	.LBE41:
 2759              	.LBE40:
 314:Inc/mc_math.h ****   return Val;
 2760              		.loc 2 314 3 view .LVU676
 2761              	.LVL237:
 2762              		.loc 2 314 3 is_stmt 0 view .LVU677
 2763              	.LBE31:
 2764              	.LBE30:
1431:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1432:Src/mc_interface.c ****   }
1433:Src/mc_interface.c **** #endif
1434:Src/mc_interface.c **** 
1435:Src/mc_interface.c ****   return (wAux);
 2765              		.loc 1 1435 3 is_stmt 1 view .LVU678
1436:Src/mc_interface.c **** }
 2766              		.loc 1 1436 1 is_stmt 0 view .LVU679
 2767 002a 02B0     		add	sp, sp, #8
 2768              		.cfi_def_cfa_offset 0
 2769              		@ sp needed
 2770 002c 7047     		bx	lr
 2771              	.L172:
 2772 002e 00BF     		.align	2
 2773              	.L171:
 2774 0030 000C0240 		.word	1073875968
 2775 0034 63006000 		.word	6291555
 2776              		.cfi_endproc
 2777              	.LFE1490:
 2779              		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2780              		.align	1
 2781              		.weak	MCI_GetPhaseVoltageAmplitude
 2782              		.syntax unified
 2783              		.thumb
 2784              		.thumb_func
 2785              		.fpu fpv4-sp-d16
 2787              	MCI_GetPhaseVoltageAmplitude:
 2788              	.LVL238:
 2789              	.LFB1491:
1437:Src/mc_interface.c **** 
1438:Src/mc_interface.c **** /**
1439:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1440:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1441:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1442:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1443:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1444:Src/mc_interface.c ****   */
1445:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle)
1446:Src/mc_interface.c **** {
 2790              		.loc 1 1446 1 is_stmt 1 view -0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccRhyv0W.s 			page 99


 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 2794              		.loc 1 1446 1 is_stmt 0 view .LVU681
 2795 0000 00B5     		push	{lr}
 2796              		.cfi_def_cfa_offset 4
 2797              		.cfi_offset 14, -4
 2798 0002 83B0     		sub	sp, sp, #12
 2799              		.cfi_def_cfa_offset 16
1447:Src/mc_interface.c ****   int16_t temp_wAux;
 2800              		.loc 1 1447 3 is_stmt 1 view .LVU682
1448:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1449:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1450:Src/mc_interface.c ****   {
1451:Src/mc_interface.c ****     temp_wAux = 0;
1452:Src/mc_interface.c ****   }
1453:Src/mc_interface.c ****   else
1454:Src/mc_interface.c ****   {
1455:Src/mc_interface.c **** #endif
1456:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2801              		.loc 1 1456 5 view .LVU683
1457:Src/mc_interface.c ****     int32_t wAux1;
 2802              		.loc 1 1457 5 view .LVU684
1458:Src/mc_interface.c ****     int32_t wAux2;
 2803              		.loc 1 1458 5 view .LVU685
1459:Src/mc_interface.c **** 
1460:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2804              		.loc 1 1460 5 view .LVU686
 2805              		.loc 1 1460 28 is_stmt 0 view .LVU687
 2806 0004 4368     		ldr	r3, [r0, #4]
 2807              		.loc 1 1460 19 view .LVU688
 2808 0006 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2809              	.LVL239:
 2810              		.loc 1 1460 19 view .LVU689
 2811 000a 0246     		mov	r2, r0	@ movhi
1461:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2812              		.loc 1 1461 5 is_stmt 1 view .LVU690
 2813              	.LVL240:
1462:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2814              		.loc 1 1462 5 view .LVU691
 2815              		.loc 1 1462 11 is_stmt 0 view .LVU692
 2816 000c 10FB30F0 		smultt	r0, r0, r0
 2817              	.LVL241:
1463:Src/mc_interface.c **** 
1464:Src/mc_interface.c ****     wAux1 += wAux2;
 2818              		.loc 1 1464 5 is_stmt 1 view .LVU693
1465:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
 2819              		.loc 1 1465 5 view .LVU694
 2820              		.loc 1 1465 13 is_stmt 0 view .LVU695
 2821 0010 12FB0200 		smlabb	r0, r2, r2, r0
 2822              	.LVL242:
 2823              		.loc 1 1465 13 view .LVU696
 2824 0014 FFF7FEFF 		bl	MCM_Sqrt
 2825              	.LVL243:
1466:Src/mc_interface.c **** 
1467:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2826              		.loc 1 1467 5 is_stmt 1 view .LVU697
 2827              		.loc 1 1467 8 is_stmt 0 view .LVU698
 2828 0018 B0F5004F 		cmp	r0, #32768
ARM GAS  /tmp/ccRhyv0W.s 			page 100


 2829 001c 01DB     		blt	.L174
1468:Src/mc_interface.c ****     {
1469:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
 2830              		.loc 1 1469 13 view .LVU699
 2831 001e 47F6FF70 		movw	r0, #32767
 2832              	.LVL244:
 2833              	.L174:
1470:Src/mc_interface.c ****     }
1471:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2834              		.loc 1 1471 5 is_stmt 1 view .LVU700
1472:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1473:Src/mc_interface.c ****   }
1474:Src/mc_interface.c **** #endif
1475:Src/mc_interface.c ****   return (temp_wAux);
 2835              		.loc 1 1475 3 view .LVU701
1476:Src/mc_interface.c **** }
 2836              		.loc 1 1476 1 is_stmt 0 view .LVU702
 2837 0022 00B2     		sxth	r0, r0
 2838              	.LVL245:
 2839              		.loc 1 1476 1 view .LVU703
 2840 0024 03B0     		add	sp, sp, #12
 2841              		.cfi_def_cfa_offset 4
 2842              		@ sp needed
 2843 0026 5DF804FB 		ldr	pc, [sp], #4
 2844              		.cfi_endproc
 2845              	.LFE1491:
 2847              		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2848              		.align	1
 2849              		.weak	MCI_Clear_Iqdref
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv4-sp-d16
 2855              	MCI_Clear_Iqdref:
 2856              	.LVL246:
 2857              	.LFB1492:
1477:Src/mc_interface.c **** 
1478:Src/mc_interface.c **** /**
1479:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1480:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1481:Src/mc_interface.c ****   * @retval none
1482:Src/mc_interface.c ****   */
1483:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1484:Src/mc_interface.c **** {
 2858              		.loc 1 1484 1 is_stmt 1 view -0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 2862              		.loc 1 1484 1 is_stmt 0 view .LVU705
 2863 0000 10B5     		push	{r4, lr}
 2864              		.cfi_def_cfa_offset 8
 2865              		.cfi_offset 4, -8
 2866              		.cfi_offset 14, -4
1485:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1486:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1487:Src/mc_interface.c ****   {
1488:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  /tmp/ccRhyv0W.s 			page 101


1489:Src/mc_interface.c ****   }
1490:Src/mc_interface.c ****   else
1491:Src/mc_interface.c ****   {
1492:Src/mc_interface.c **** #endif
1493:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2867              		.loc 1 1493 5 is_stmt 1 view .LVU706
 2868              		.loc 1 1493 12 is_stmt 0 view .LVU707
 2869 0002 4468     		ldr	r4, [r0, #4]
 2870              		.loc 1 1493 33 view .LVU708
 2871 0004 0068     		ldr	r0, [r0]
 2872              	.LVL247:
 2873              		.loc 1 1493 33 view .LVU709
 2874 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2875              	.LVL248:
 2876 000a 2082     		strh	r0, [r4, #16]	@ movhi
 2877 000c C0F30F40 		ubfx	r0, r0, #16, #16
 2878 0010 6082     		strh	r0, [r4, #18]	@ movhi
1494:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1495:Src/mc_interface.c ****   }
1496:Src/mc_interface.c **** #endif
1497:Src/mc_interface.c **** }
 2879              		.loc 1 1497 1 view .LVU710
 2880 0012 10BD     		pop	{r4, pc}
 2881              		.cfi_endproc
 2882              	.LFE1492:
 2884              		.text
 2885              	.Letext0:
 2886              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2887              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 2888              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2889              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2890              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2891              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2892              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2893              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2894              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2895              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2896              		.file 15 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 2897              		.file 16 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2898              		.file 17 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2899              		.file 18 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2900              		.file 19 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
 2901              		.file 20 "Inc/mc_interface.h"
 2902              		.file 21 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2903              		.file 22 "Inc/regular_conversion_manager.h"
 2904              		.file 23 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2905              		.file 24 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 2906              		.file 25 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 2907              		.file 26 "Inc/mc_configuration_registers.h"
 2908              		.file 27 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2909              		.file 28 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2910              		.file 29 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2911              		.file 30 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 2912              		.file 31 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2913              		.file 32 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2914              		.file 33 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 2915              		.file 34 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_cordic_speed_pos_fdbk.h"
ARM GAS  /tmp/ccRhyv0W.s 			page 102


 2916              		.file 35 "Inc/mc_config.h"
 2917              		.file 36 "Inc/debug_scope.h"
ARM GAS  /tmp/ccRhyv0W.s 			page 103


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_interface.c
     /tmp/ccRhyv0W.s:18     .text.MCI_Init:0000000000000000 $t
     /tmp/ccRhyv0W.s:26     .text.MCI_Init:0000000000000000 MCI_Init
     /tmp/ccRhyv0W.s:80     .text.MCI_ExecSpeedRamp:0000000000000000 $t
     /tmp/ccRhyv0W.s:87     .text.MCI_ExecSpeedRamp:0000000000000000 MCI_ExecSpeedRamp
     /tmp/ccRhyv0W.s:118    .text.MCI_ExecSpeedSin:0000000000000000 $t
     /tmp/ccRhyv0W.s:125    .text.MCI_ExecSpeedSin:0000000000000000 MCI_ExecSpeedSin
     /tmp/ccRhyv0W.s:169    .text.MCI_ExecSpeedRamp_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:176    .text.MCI_ExecSpeedRamp_F:0000000000000000 MCI_ExecSpeedRamp_F
     /tmp/ccRhyv0W.s:212    .text.MCI_ExecSpeedRamp_F:0000000000000024 $d
     /tmp/ccRhyv0W.s:217    .text.MCI_ExecTorqueRamp:0000000000000000 $t
     /tmp/ccRhyv0W.s:224    .text.MCI_ExecTorqueRamp:0000000000000000 MCI_ExecTorqueRamp
     /tmp/ccRhyv0W.s:259    .text.MCI_ExecTorqueRamp_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:266    .text.MCI_ExecTorqueRamp_F:0000000000000000 MCI_ExecTorqueRamp_F
     /tmp/ccRhyv0W.s:312    .text.MCI_ExecTorqueRamp_F:0000000000000028 $d
     /tmp/ccRhyv0W.s:318    .text.MCI_SetCurrentReferences:0000000000000000 $t
     /tmp/ccRhyv0W.s:325    .text.MCI_SetCurrentReferences:0000000000000000 MCI_SetCurrentReferences
     /tmp/ccRhyv0W.s:365    .text.MCI_SetCurrentReferences_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:372    .text.MCI_SetCurrentReferences_F:0000000000000000 MCI_SetCurrentReferences_F
     /tmp/ccRhyv0W.s:436    .text.MCI_SetCurrentReferences_F:0000000000000048 $d
     /tmp/ccRhyv0W.s:442    .text.MCI_SetSpeedMode:0000000000000000 $t
     /tmp/ccRhyv0W.s:449    .text.MCI_SetSpeedMode:0000000000000000 MCI_SetSpeedMode
     /tmp/ccRhyv0W.s:486    .text.MCI_SetOpenLoopCurrent:0000000000000000 $t
     /tmp/ccRhyv0W.s:493    .text.MCI_SetOpenLoopCurrent:0000000000000000 MCI_SetOpenLoopCurrent
     /tmp/ccRhyv0W.s:530    .text.MCI_SetOpenLoopVoltage:0000000000000000 $t
     /tmp/ccRhyv0W.s:537    .text.MCI_SetOpenLoopVoltage:0000000000000000 MCI_SetOpenLoopVoltage
     /tmp/ccRhyv0W.s:575    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccRhyv0W.s:582    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 MCI_GetCalibratedOffsetsMotor
     /tmp/ccRhyv0W.s:621    .text.MCI_FaultProcessing:0000000000000000 $t
     /tmp/ccRhyv0W.s:628    .text.MCI_FaultProcessing:0000000000000000 MCI_FaultProcessing
     /tmp/ccRhyv0W.s:658    .text.MCI_ExecBufferedCommands:0000000000000000 $t
     /tmp/ccRhyv0W.s:665    .text.MCI_ExecBufferedCommands:0000000000000000 MCI_ExecBufferedCommands
     /tmp/ccRhyv0W.s:697    .text.MCI_ExecBufferedCommands:000000000000001a $d
     /tmp/ccRhyv0W.s:701    .text.MCI_ExecBufferedCommands:000000000000001e $t
     /tmp/ccRhyv0W.s:821    .text.MCI_IsCommandAcknowledged:0000000000000000 $t
     /tmp/ccRhyv0W.s:828    .text.MCI_IsCommandAcknowledged:0000000000000000 MCI_IsCommandAcknowledged
     /tmp/ccRhyv0W.s:865    .text.MCI_GetLastCommand:0000000000000000 $t
     /tmp/ccRhyv0W.s:872    .text.MCI_GetLastCommand:0000000000000000 MCI_GetLastCommand
     /tmp/ccRhyv0W.s:892    .text.MCI_GetSTMState:0000000000000000 $t
     /tmp/ccRhyv0W.s:899    .text.MCI_GetSTMState:0000000000000000 MCI_GetSTMState
     /tmp/ccRhyv0W.s:917    .text.MCI_GetOccurredFaults:0000000000000000 $t
     /tmp/ccRhyv0W.s:924    .text.MCI_GetOccurredFaults:0000000000000000 MCI_GetOccurredFaults
     /tmp/ccRhyv0W.s:942    .text.MCI_GetCurrentFaults:0000000000000000 $t
     /tmp/ccRhyv0W.s:949    .text.MCI_GetCurrentFaults:0000000000000000 MCI_GetCurrentFaults
     /tmp/ccRhyv0W.s:967    .text.MCI_StartMotor:0000000000000000 $t
     /tmp/ccRhyv0W.s:974    .text.MCI_StartMotor:0000000000000000 MCI_StartMotor
     /tmp/ccRhyv0W.s:1039   .text.MCI_StartWithMeasurementOffset:0000000000000000 $t
     /tmp/ccRhyv0W.s:1046   .text.MCI_StartWithMeasurementOffset:0000000000000000 MCI_StartWithMeasurementOffset
     /tmp/ccRhyv0W.s:1117   .text.MCI_StartOffsetMeasurments:0000000000000000 $t
     /tmp/ccRhyv0W.s:1124   .text.MCI_StartOffsetMeasurments:0000000000000000 MCI_StartOffsetMeasurments
     /tmp/ccRhyv0W.s:1193   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccRhyv0W.s:1200   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 MCI_SetCalibratedOffsetsMotor
     /tmp/ccRhyv0W.s:1264   .text.MCI_StopMotor:0000000000000000 $t
     /tmp/ccRhyv0W.s:1271   .text.MCI_StopMotor:0000000000000000 MCI_StopMotor
     /tmp/ccRhyv0W.s:1357   .text.MCI_FaultAcknowledged:0000000000000000 $t
     /tmp/ccRhyv0W.s:1364   .text.MCI_FaultAcknowledged:0000000000000000 MCI_FaultAcknowledged
ARM GAS  /tmp/ccRhyv0W.s 			page 104


     /tmp/ccRhyv0W.s:1422   .text.MCI_GetFaultState:0000000000000000 $t
     /tmp/ccRhyv0W.s:1429   .text.MCI_GetFaultState:0000000000000000 MCI_GetFaultState
     /tmp/ccRhyv0W.s:1456   .text.MCI_GetControlMode:0000000000000000 $t
     /tmp/ccRhyv0W.s:1463   .text.MCI_GetControlMode:0000000000000000 MCI_GetControlMode
     /tmp/ccRhyv0W.s:1481   .text.MCI_GetImposedMotorDirection:0000000000000000 $t
     /tmp/ccRhyv0W.s:1488   .text.MCI_GetImposedMotorDirection:0000000000000000 MCI_GetImposedMotorDirection
     /tmp/ccRhyv0W.s:1505   .text.MCI_GetImposedMotorDirection:000000000000000c $d
     /tmp/ccRhyv0W.s:1509   .text.MCI_GetImposedMotorDirection:0000000000000010 $t
     /tmp/ccRhyv0W.s:1581   .text.MCI_GetLastRampFinalSpeed:0000000000000000 $t
     /tmp/ccRhyv0W.s:1588   .text.MCI_GetLastRampFinalSpeed:0000000000000000 MCI_GetLastRampFinalSpeed
     /tmp/ccRhyv0W.s:1606   .text.MCI_GetLastRampFinalTorque:0000000000000000 $t
     /tmp/ccRhyv0W.s:1613   .text.MCI_GetLastRampFinalTorque:0000000000000000 MCI_GetLastRampFinalTorque
     /tmp/ccRhyv0W.s:1631   .text.MCI_GetLastRampFinalDuration:0000000000000000 $t
     /tmp/ccRhyv0W.s:1638   .text.MCI_GetLastRampFinalDuration:0000000000000000 MCI_GetLastRampFinalDuration
     /tmp/ccRhyv0W.s:1656   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:1663   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 MCI_GetLastRampFinalSpeed_F
     /tmp/ccRhyv0W.s:1697   .text.MCI_GetLastRampFinalSpeed_F:000000000000001c $d
     /tmp/ccRhyv0W.s:1702   .text.MCI_RampCompleted:0000000000000000 $t
     /tmp/ccRhyv0W.s:1709   .text.MCI_RampCompleted:0000000000000000 MCI_RampCompleted
     /tmp/ccRhyv0W.s:1752   .text.MCI_StopSpeedRamp:0000000000000000 $t
     /tmp/ccRhyv0W.s:1759   .text.MCI_StopSpeedRamp:0000000000000000 MCI_StopSpeedRamp
     /tmp/ccRhyv0W.s:1784   .text.MCI_StopRamp:0000000000000000 $t
     /tmp/ccRhyv0W.s:1791   .text.MCI_StopRamp:0000000000000000 MCI_StopRamp
     /tmp/ccRhyv0W.s:1815   .text.MCI_GetSpdSensorReliability:0000000000000000 $t
     /tmp/ccRhyv0W.s:1822   .text.MCI_GetSpdSensorReliability:0000000000000000 MCI_GetSpdSensorReliability
     /tmp/ccRhyv0W.s:1853   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 $t
     /tmp/ccRhyv0W.s:1860   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 MCI_GetAvrgMecSpeedUnit
     /tmp/ccRhyv0W.s:1891   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:1898   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 MCI_GetAvrgMecSpeed_F
     /tmp/ccRhyv0W.s:1932   .text.MCI_GetMecSpeedRefUnit:0000000000000000 $t
     /tmp/ccRhyv0W.s:1939   .text.MCI_GetMecSpeedRefUnit:0000000000000000 MCI_GetMecSpeedRefUnit
     /tmp/ccRhyv0W.s:1964   .text.MCI_GetMecSpeedRef_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:1971   .text.MCI_GetMecSpeedRef_F:0000000000000000 MCI_GetMecSpeedRef_F
     /tmp/ccRhyv0W.s:2001   .text.MCI_GetIab:0000000000000000 $t
     /tmp/ccRhyv0W.s:2008   .text.MCI_GetIab:0000000000000000 MCI_GetIab
     /tmp/ccRhyv0W.s:2042   .text.MCI_GetIab_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:2049   .text.MCI_GetIab_F:0000000000000000 MCI_GetIab_F
     /tmp/ccRhyv0W.s:2121   .text.MCI_GetIab_F:0000000000000068 $d
     /tmp/ccRhyv0W.s:2127   .text.MCI_GetIalphabeta:0000000000000000 $t
     /tmp/ccRhyv0W.s:2134   .text.MCI_GetIalphabeta:0000000000000000 MCI_GetIalphabeta
     /tmp/ccRhyv0W.s:2167   .text.MCI_GetIqd:0000000000000000 $t
     /tmp/ccRhyv0W.s:2174   .text.MCI_GetIqd:0000000000000000 MCI_GetIqd
     /tmp/ccRhyv0W.s:2207   .text.MCI_GetIqd_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:2214   .text.MCI_GetIqd_F:0000000000000000 MCI_GetIqd_F
     /tmp/ccRhyv0W.s:2286   .text.MCI_GetIqd_F:0000000000000068 $d
     /tmp/ccRhyv0W.s:2292   .text.MCI_GetIqdHF:0000000000000000 $t
     /tmp/ccRhyv0W.s:2299   .text.MCI_GetIqdHF:0000000000000000 MCI_GetIqdHF
     /tmp/ccRhyv0W.s:2332   .text.MCI_GetIqdref:0000000000000000 $t
     /tmp/ccRhyv0W.s:2339   .text.MCI_GetIqdref:0000000000000000 MCI_GetIqdref
     /tmp/ccRhyv0W.s:2372   .text.MCI_GetIqdref_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:2379   .text.MCI_GetIqdref_F:0000000000000000 MCI_GetIqdref_F
     /tmp/ccRhyv0W.s:2451   .text.MCI_GetIqdref_F:0000000000000068 $d
     /tmp/ccRhyv0W.s:2457   .text.MCI_GetVqd:0000000000000000 $t
     /tmp/ccRhyv0W.s:2464   .text.MCI_GetVqd:0000000000000000 MCI_GetVqd
     /tmp/ccRhyv0W.s:2497   .text.MCI_GetValphabeta:0000000000000000 $t
     /tmp/ccRhyv0W.s:2504   .text.MCI_GetValphabeta:0000000000000000 MCI_GetValphabeta
     /tmp/ccRhyv0W.s:2537   .text.MCI_GetElAngledpp:0000000000000000 $t
ARM GAS  /tmp/ccRhyv0W.s 			page 105


     /tmp/ccRhyv0W.s:2544   .text.MCI_GetElAngledpp:0000000000000000 MCI_GetElAngledpp
     /tmp/ccRhyv0W.s:2564   .text.MCI_GetTeref:0000000000000000 $t
     /tmp/ccRhyv0W.s:2571   .text.MCI_GetTeref:0000000000000000 MCI_GetTeref
     /tmp/ccRhyv0W.s:2592   .text.MCI_GetTeref_F:0000000000000000 $t
     /tmp/ccRhyv0W.s:2599   .text.MCI_GetTeref_F:0000000000000000 MCI_GetTeref_F
     /tmp/ccRhyv0W.s:2633   .text.MCI_GetTeref_F:0000000000000020 $d
     /tmp/ccRhyv0W.s:2639   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 $t
     /tmp/ccRhyv0W.s:2646   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 MCI_GetPhaseCurrentAmplitude
     /tmp/ccRhyv0W.s:2774   .text.MCI_GetPhaseCurrentAmplitude:0000000000000030 $d
     /tmp/ccRhyv0W.s:2780   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 $t
     /tmp/ccRhyv0W.s:2787   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 MCI_GetPhaseVoltageAmplitude
     /tmp/ccRhyv0W.s:2848   .text.MCI_Clear_Iqdref:0000000000000000 $t
     /tmp/ccRhyv0W.s:2855   .text.MCI_Clear_Iqdref:0000000000000000 MCI_Clear_Iqdref

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_d2iz
STC_SetControlMode
PWMC_GetOffsetCalib
STC_ExecRamp
STC_ExecSin
PWMC_SetOffsetCalib
STC_RampCompleted
STC_StopSpeedRamp
STC_StopRamp
STC_GetSpeedSensor
SPD_Check
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
__aeabi_d2f
__aeabi_i2d
MCM_Sqrt
STC_GetDefaultIqdref
