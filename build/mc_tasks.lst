ARM GAS  /tmp/ccEk3fHX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FOC_Clear,"ax",%progbits
  18              		.align	1
  19              		.weak	FOC_Clear
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	FOC_Clear:
  27              	.LVL0:
  28              	.LFB1627:
  29              		.file 1 "Src/mc_tasks.c"
   1:Src/mc_tasks.c **** 
   2:Src/mc_tasks.c **** /**
   3:Src/mc_tasks.c ****   ******************************************************************************
   4:Src/mc_tasks.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks.c ****   *
   8:Src/mc_tasks.c ****   ******************************************************************************
   9:Src/mc_tasks.c ****   * @attention
  10:Src/mc_tasks.c ****   *
  11:Src/mc_tasks.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  12:Src/mc_tasks.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks.c ****   *
  14:Src/mc_tasks.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks.c ****   *
  19:Src/mc_tasks.c ****   ******************************************************************************
  20:Src/mc_tasks.c ****   */
  21:Src/mc_tasks.c **** 
  22:Src/mc_tasks.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks.c **** #include "main.h"
  25:Src/mc_tasks.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks.c **** #include "mc_type.h"
  27:Src/mc_tasks.c **** #include "mc_math.h"
  28:Src/mc_tasks.c **** #include "motorcontrol.h"
  29:Src/mc_tasks.c **** #include "regular_conversion_manager.h"
ARM GAS  /tmp/ccEk3fHX.s 			page 2


  30:Src/mc_tasks.c **** #include "mc_interface.h"
  31:Src/mc_tasks.c **** #include "digital_output.h"
  32:Src/mc_tasks.c **** #include "pwm_common.h"
  33:Src/mc_tasks.c **** 
  34:Src/mc_tasks.c **** #include "mc_tasks.h"
  35:Src/mc_tasks.c **** #include "parameters_conversion.h"
  36:Src/mc_tasks.c **** #include "mcp_config.h"
  37:Src/mc_tasks.c **** 
  38:Src/mc_tasks.c **** /* USER CODE BEGIN Includes */
  39:Src/mc_tasks.c **** #include "debug_scope.h"
  40:Src/mc_tasks.c **** /* USER CODE END Includes */
  41:Src/mc_tasks.c **** 
  42:Src/mc_tasks.c **** /* USER CODE BEGIN Private define */
  43:Src/mc_tasks.c **** 
  44:Src/mc_tasks.c **** /* Private define ------------------------------------------------------------*/
  45:Src/mc_tasks.c **** /* Un-Comment this macro define in order to activate the smooth
  46:Src/mc_tasks.c ****    braking action on over voltage */
  47:Src/mc_tasks.c **** /* #define  MC.SMOOTH_BRAKING_ACTION_ON_OVERVOLTAGE */
  48:Src/mc_tasks.c **** 
  49:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_MS  ((uint16_t)10)
  50:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_MS2 ((uint16_t)10)
  51:Src/mc_tasks.c ****   #define STOPPERMANENCY_MS   ((uint16_t)400)
  52:Src/mc_tasks.c ****   #define STOPPERMANENCY_MS2  ((uint16_t)400)
  53:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_TICKS  (uint16_t)((SYS_TICK_FREQUENCY * CHARGE_BOOT_CAP_MS) / ((uint16_t)
  54:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_TICKS2 (uint16_t)((SYS_TICK_FREQUENCY * CHARGE_BOOT_CAP_MS2)/ ((uint16_t)
  55:Src/mc_tasks.c ****   #define STOPPERMANENCY_TICKS   (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS)  / ((uint16_t)
  56:Src/mc_tasks.c ****   #define STOPPERMANENCY_TICKS2  (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS2) / ((uint16_t)
  57:Src/mc_tasks.c **** 
  58:Src/mc_tasks.c **** /* USER CODE END Private define */
  59:Src/mc_tasks.c **** #define VBUS_TEMP_ERR_MASK (MC_OVER_VOLT| MC_UNDER_VOLT| MC_OVER_TEMP)
  60:Src/mc_tasks.c **** /* Private variables----------------------------------------------------------*/
  61:Src/mc_tasks.c **** 
  62:Src/mc_tasks.c **** static FOCVars_t FOCVars[NBR_OF_MOTORS];
  63:Src/mc_tasks.c **** 
  64:Src/mc_tasks.c **** static PWMC_Handle_t *pwmcHandle[NBR_OF_MOTORS];
  65:Src/mc_tasks.c **** static CircleLimitation_Handle_t *pCLM[NBR_OF_MOTORS];
  66:Src/mc_tasks.c **** //cstat !MISRAC2012-Rule-8.9_a
  67:Src/mc_tasks.c **** static RampExtMngr_Handle_t *pREMNG[NBR_OF_MOTORS];   /*!< Ramp manager used to modify the Iq ref
  68:Src/mc_tasks.c ****                                                     during the start-up switch over.*/
  69:Src/mc_tasks.c **** 
  70:Src/mc_tasks.c **** static uint16_t hMFTaskCounterM1 = 0; //cstat !MISRAC2012-Rule-8.9_a
  71:Src/mc_tasks.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  72:Src/mc_tasks.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
  73:Src/mc_tasks.c **** 
  74:Src/mc_tasks.c **** static volatile uint8_t bMCBootCompleted = ((uint8_t)0);
  75:Src/mc_tasks.c **** 
  76:Src/mc_tasks.c **** /* USER CODE BEGIN Private Variables */
  77:Src/mc_tasks.c **** 
  78:Src/mc_tasks.c **** /* USER CODE END Private Variables */
  79:Src/mc_tasks.c **** 
  80:Src/mc_tasks.c **** /* Private functions ---------------------------------------------------------*/
  81:Src/mc_tasks.c **** void TSK_MediumFrequencyTaskM1(void);
  82:Src/mc_tasks.c **** void FOC_Clear(uint8_t bMotor);
  83:Src/mc_tasks.c **** void FOC_InitAdditionalMethods(uint8_t bMotor);
  84:Src/mc_tasks.c **** void FOC_CalcCurrRef(uint8_t bMotor);
  85:Src/mc_tasks.c **** void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor);
  86:Src/mc_tasks.c **** MCI_Handle_t * GetMCI(uint8_t bMotor);
ARM GAS  /tmp/ccEk3fHX.s 			page 3


  87:Src/mc_tasks.c **** static uint16_t FOC_CurrControllerM1(void);
  88:Src/mc_tasks.c **** void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount);
  89:Src/mc_tasks.c **** bool TSK_ChargeBootCapDelayHasElapsedM1(void);
  90:Src/mc_tasks.c **** void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount);
  91:Src/mc_tasks.c **** bool TSK_StopPermanencyTimeHasElapsedM1(void);
  92:Src/mc_tasks.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  93:Src/mc_tasks.c **** 
  94:Src/mc_tasks.c **** /* USER CODE BEGIN Private Functions */
  95:Src/mc_tasks.c **** 
  96:Src/mc_tasks.c **** /* USER CODE END Private Functions */
  97:Src/mc_tasks.c **** /**
  98:Src/mc_tasks.c ****   * @brief  It initializes the whole MC core according to user defined
  99:Src/mc_tasks.c ****   *         parameters.
 100:Src/mc_tasks.c ****   * @param  pMCIList pointer to the vector of MCInterface objects that will be
 101:Src/mc_tasks.c ****   *         created and initialized. The vector must have length equal to the
 102:Src/mc_tasks.c ****   *         number of motor drives.
 103:Src/mc_tasks.c ****   * @retval None
 104:Src/mc_tasks.c ****   */
 105:Src/mc_tasks.c **** __weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
 106:Src/mc_tasks.c **** {
 107:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 108:Src/mc_tasks.c **** 
 109:Src/mc_tasks.c ****   /* USER CODE END MCboot 0 */
 110:Src/mc_tasks.c **** 
 111:Src/mc_tasks.c ****   if (MC_NULL == pMCIList)
 112:Src/mc_tasks.c ****   {
 113:Src/mc_tasks.c ****     /* Nothing to do */
 114:Src/mc_tasks.c ****   }
 115:Src/mc_tasks.c ****   else
 116:Src/mc_tasks.c ****   {
 117:Src/mc_tasks.c **** 
 118:Src/mc_tasks.c ****     bMCBootCompleted = (uint8_t )0;
 119:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 120:Src/mc_tasks.c **** 
 121:Src/mc_tasks.c ****     /**********************************************************/
 122:Src/mc_tasks.c ****     /*    PWM and current sensing component initialization    */
 123:Src/mc_tasks.c ****     /**********************************************************/
 124:Src/mc_tasks.c ****     pwmcHandle[M1] = &PWM_Handle_M1._Super;
 125:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 126:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 127:Src/mc_tasks.c **** 
 128:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 1 */
 129:Src/mc_tasks.c **** 
 130:Src/mc_tasks.c ****     /* USER CODE END MCboot 1 */
 131:Src/mc_tasks.c ****     /**************************************/
 132:Src/mc_tasks.c ****     /*    Start timers synchronously      */
 133:Src/mc_tasks.c ****     /**************************************/
 134:Src/mc_tasks.c ****     startTimers();
 135:Src/mc_tasks.c **** 
 136:Src/mc_tasks.c ****     /******************************************************/
 137:Src/mc_tasks.c ****     /*   PID component initialization: speed regulation   */
 138:Src/mc_tasks.c ****     /******************************************************/
 139:Src/mc_tasks.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 140:Src/mc_tasks.c **** 
 141:Src/mc_tasks.c ****     /******************************************************/
 142:Src/mc_tasks.c ****     /*   Main speed sensor component initialization       */
 143:Src/mc_tasks.c ****     /******************************************************/
ARM GAS  /tmp/ccEk3fHX.s 			page 4


 144:Src/mc_tasks.c ****     STO_CR_Init (&STO_CR_M1);
 145:Src/mc_tasks.c **** 
 146:Src/mc_tasks.c ****     /******************************************************/
 147:Src/mc_tasks.c ****     /*   Speed & torque component initialization          */
 148:Src/mc_tasks.c ****     /******************************************************/
 149:Src/mc_tasks.c ****     STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_CR_M1._Super);
 150:Src/mc_tasks.c **** 
 151:Src/mc_tasks.c ****     /******************************************************/
 152:Src/mc_tasks.c ****     /*   Auxiliary speed sensor component initialization  */
 153:Src/mc_tasks.c ****     /******************************************************/
 154:Src/mc_tasks.c ****     STO_PLL_Init (&STO_PLL_M1);
 155:Src/mc_tasks.c **** 
 156:Src/mc_tasks.c ****     /****************************************************/
 157:Src/mc_tasks.c ****     /*   Virtual speed sensor component initialization  */
 158:Src/mc_tasks.c ****     /****************************************************/
 159:Src/mc_tasks.c ****     VSS_Init(&VirtualSpeedSensorM1);
 160:Src/mc_tasks.c **** 
 161:Src/mc_tasks.c ****     /**************************************/
 162:Src/mc_tasks.c ****     /*   Rev-up component initialization  */
 163:Src/mc_tasks.c ****     /**************************************/
 164:Src/mc_tasks.c ****     RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 165:Src/mc_tasks.c **** 
 166:Src/mc_tasks.c ****     /********************************************************/
 167:Src/mc_tasks.c ****     /*   PID component initialization: current regulation   */
 168:Src/mc_tasks.c ****     /********************************************************/
 169:Src/mc_tasks.c ****     PID_HandleInit(&PIDIqHandle_M1);
 170:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 171:Src/mc_tasks.c **** 
 172:Src/mc_tasks.c ****     /********************************************************/
 173:Src/mc_tasks.c ****     /*   Bus voltage sensor component initialization        */
 174:Src/mc_tasks.c ****     /********************************************************/
 175:Src/mc_tasks.c ****     RVBS_Init(&BusVoltageSensor_M1);
 176:Src/mc_tasks.c **** 
 177:Src/mc_tasks.c ****     /*************************************************/
 178:Src/mc_tasks.c ****     /*   Power measurement component initialization  */
 179:Src/mc_tasks.c ****     /*************************************************/
 180:Src/mc_tasks.c ****     pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 181:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 182:Src/mc_tasks.c **** 
 183:Src/mc_tasks.c ****     /*******************************************************/
 184:Src/mc_tasks.c ****     /*   Temperature measurement component initialization  */
 185:Src/mc_tasks.c ****     /*******************************************************/
 186:Src/mc_tasks.c ****     NTC_Init(&TempSensor_M1);
 187:Src/mc_tasks.c **** 
 188:Src/mc_tasks.c ****     pREMNG[M1] = &RampExtMngrHFParamsM1;
 189:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 190:Src/mc_tasks.c **** 
 191:Src/mc_tasks.c ****     FOC_Clear(M1);
 192:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 193:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 194:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 195:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 196:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 197:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
 198:Src/mc_tasks.c ****     pMCIList[M1] = &Mci[M1];
 199:Src/mc_tasks.c **** 
 200:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 2 */
ARM GAS  /tmp/ccEk3fHX.s 			page 5


 201:Src/mc_tasks.c **** 
 202:Src/mc_tasks.c ****     /* USER CODE END MCboot 2 */
 203:Src/mc_tasks.c **** 
 204:Src/mc_tasks.c ****     bMCBootCompleted = 1U;
 205:Src/mc_tasks.c ****   }
 206:Src/mc_tasks.c **** }
 207:Src/mc_tasks.c **** 
 208:Src/mc_tasks.c **** /**
 209:Src/mc_tasks.c ****  * @brief Runs all the Tasks of the Motor Control cockpit
 210:Src/mc_tasks.c ****  *
 211:Src/mc_tasks.c ****  * This function is to be called periodically at least at the Medium Frequency task
 212:Src/mc_tasks.c ****  * rate (It is typically called on the Systick interrupt). Exact invokation rate is
 213:Src/mc_tasks.c ****  * the Speed regulator execution rate set in the Motor Contorl Workbench.
 214:Src/mc_tasks.c ****  *
 215:Src/mc_tasks.c ****  * The following tasks are executed in this order:
 216:Src/mc_tasks.c ****  *
 217:Src/mc_tasks.c ****  * - Medium Frequency Tasks of each motors
 218:Src/mc_tasks.c ****  * - Safety Task
 219:Src/mc_tasks.c ****  * - Power Factor Correction Task (if enabled)
 220:Src/mc_tasks.c ****  * - User Interface task.
 221:Src/mc_tasks.c ****  */
 222:Src/mc_tasks.c **** __weak void MC_RunMotorControlTasks(void)
 223:Src/mc_tasks.c **** {
 224:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 225:Src/mc_tasks.c ****   {
 226:Src/mc_tasks.c ****     /* Nothing to do */
 227:Src/mc_tasks.c ****   }
 228:Src/mc_tasks.c ****   else
 229:Src/mc_tasks.c ****   {
 230:Src/mc_tasks.c ****     /* ** Medium Frequency Tasks ** */
 231:Src/mc_tasks.c ****     MC_Scheduler();
 232:Src/mc_tasks.c **** 
 233:Src/mc_tasks.c ****     /* Safety task is run after Medium Frequency task so that
 234:Src/mc_tasks.c ****      * it can overcome actions they initiated if needed. */
 235:Src/mc_tasks.c ****     TSK_SafetyTask();
 236:Src/mc_tasks.c **** 
 237:Src/mc_tasks.c ****   }
 238:Src/mc_tasks.c **** }
 239:Src/mc_tasks.c **** 
 240:Src/mc_tasks.c **** /**
 241:Src/mc_tasks.c ****  * @brief Performs stop process and update the state machine.This function
 242:Src/mc_tasks.c ****  *        shall be called only during medium frequency task
 243:Src/mc_tasks.c ****  */
 244:Src/mc_tasks.c **** void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor)
 245:Src/mc_tasks.c **** {
 246:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 247:Src/mc_tasks.c **** 
 248:Src/mc_tasks.c ****   FOC_Clear(motor);
 249:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 250:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 251:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 252:Src/mc_tasks.c ****   return;
 253:Src/mc_tasks.c **** }
 254:Src/mc_tasks.c **** 
 255:Src/mc_tasks.c **** /**
 256:Src/mc_tasks.c ****  * @brief  Executes the Medium Frequency Task functions for each drive instance.
 257:Src/mc_tasks.c ****  *
ARM GAS  /tmp/ccEk3fHX.s 			page 6


 258:Src/mc_tasks.c ****  * It is to be clocked at the Systick frequency.
 259:Src/mc_tasks.c ****  */
 260:Src/mc_tasks.c **** __weak void MC_Scheduler(void)
 261:Src/mc_tasks.c **** {
 262:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 263:Src/mc_tasks.c **** 
 264:Src/mc_tasks.c **** /* USER CODE END MC_Scheduler 0 */
 265:Src/mc_tasks.c **** 
 266:Src/mc_tasks.c ****   if (((uint8_t)1) == bMCBootCompleted)
 267:Src/mc_tasks.c ****   {
 268:Src/mc_tasks.c ****     if(hMFTaskCounterM1 > 0u)
 269:Src/mc_tasks.c ****     {
 270:Src/mc_tasks.c ****       hMFTaskCounterM1--;
 271:Src/mc_tasks.c ****     }
 272:Src/mc_tasks.c ****     else
 273:Src/mc_tasks.c ****     {
 274:Src/mc_tasks.c ****       TSK_MediumFrequencyTaskM1();
 275:Src/mc_tasks.c **** 
 276:Src/mc_tasks.c ****       MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTr
 277:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 278:Src/mc_tasks.c ****       if ( 0U == MCP_Over_UartA.rxBuffer)
 279:Src/mc_tasks.c ****       {
 280:Src/mc_tasks.c ****         /* Nothing to do */
 281:Src/mc_tasks.c ****       }
 282:Src/mc_tasks.c ****       else
 283:Src/mc_tasks.c ****       {
 284:Src/mc_tasks.c ****         /* Synchronous answer */
 285:Src/mc_tasks.c ****         if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 286:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 287:Src/mc_tasks.c ****                                                      MCTL_SYNC))
 288:Src/mc_tasks.c ****         {
 289:Src/mc_tasks.c ****           /* no buffer available to build the answer ... should not occur */
 290:Src/mc_tasks.c ****         }
 291:Src/mc_tasks.c ****         else
 292:Src/mc_tasks.c ****         {
 293:Src/mc_tasks.c ****           MCP_ReceivedPacket(&MCP_Over_UartA);
 294:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 295:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 296:Src/mc_tasks.c ****           /* no buffer available to build the answer ... should not occur */
 297:Src/mc_tasks.c ****         }
 298:Src/mc_tasks.c ****       }
 299:Src/mc_tasks.c **** 
 300:Src/mc_tasks.c ****       /* USER CODE BEGIN MC_Scheduler 1 */
 301:Src/mc_tasks.c **** 
 302:Src/mc_tasks.c ****       /* USER CODE END MC_Scheduler 1 */
 303:Src/mc_tasks.c ****       hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 304:Src/mc_tasks.c ****     }
 305:Src/mc_tasks.c ****     if(hBootCapDelayCounterM1 > 0U)
 306:Src/mc_tasks.c ****     {
 307:Src/mc_tasks.c ****       hBootCapDelayCounterM1--;
 308:Src/mc_tasks.c ****     }
 309:Src/mc_tasks.c ****     if(hStopPermanencyCounterM1 > 0U)
 310:Src/mc_tasks.c ****     {
 311:Src/mc_tasks.c ****       hStopPermanencyCounterM1--;
 312:Src/mc_tasks.c ****     }
 313:Src/mc_tasks.c ****   }
 314:Src/mc_tasks.c ****   else
ARM GAS  /tmp/ccEk3fHX.s 			page 7


 315:Src/mc_tasks.c ****   {
 316:Src/mc_tasks.c ****     /* Nothing to do */
 317:Src/mc_tasks.c ****   }
 318:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 319:Src/mc_tasks.c **** 
 320:Src/mc_tasks.c ****   /* USER CODE END MC_Scheduler 2 */
 321:Src/mc_tasks.c **** }
 322:Src/mc_tasks.c **** 
 323:Src/mc_tasks.c **** /**
 324:Src/mc_tasks.c ****   * @brief Executes medium frequency periodic Motor Control tasks
 325:Src/mc_tasks.c ****   *
 326:Src/mc_tasks.c ****   * This function performs some of the control duties on Motor 1 according to the
 327:Src/mc_tasks.c ****   * present state of its state machine. In particular, duties requiring a periodic
 328:Src/mc_tasks.c ****   * execution at a medium frequency rate (such as the speed controller for instance)
 329:Src/mc_tasks.c ****   * are executed here.
 330:Src/mc_tasks.c ****   */
 331:Src/mc_tasks.c **** __weak void TSK_MediumFrequencyTaskM1(void)
 332:Src/mc_tasks.c **** {
 333:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 334:Src/mc_tasks.c **** 
 335:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 0 */
 336:Src/mc_tasks.c **** 
 337:Src/mc_tasks.c ****   int16_t wAux = 0;
 338:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 339:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 340:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 341:Src/mc_tasks.c **** 
 342:Src/mc_tasks.c ****   if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 343:Src/mc_tasks.c ****   {
 344:Src/mc_tasks.c ****     if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 345:Src/mc_tasks.c ****     {
 346:Src/mc_tasks.c ****       switch (Mci[M1].State)
 347:Src/mc_tasks.c ****       {
 348:Src/mc_tasks.c ****         case IDLE:
 349:Src/mc_tasks.c ****         {
 350:Src/mc_tasks.c ****           if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand
 351:Src/mc_tasks.c ****           {
 352:Src/mc_tasks.c ****             {
 353:Src/mc_tasks.c ****               RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 354:Src/mc_tasks.c ****             }
 355:Src/mc_tasks.c **** 
 356:Src/mc_tasks.c ****            if (pwmcHandle[M1]->offsetCalibStatus == false)
 357:Src/mc_tasks.c ****            {
 358:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 359:Src/mc_tasks.c ****              Mci[M1].State = OFFSET_CALIB;
 360:Src/mc_tasks.c ****            }
 361:Src/mc_tasks.c ****            else
 362:Src/mc_tasks.c ****            {
 363:Src/mc_tasks.c ****              /* calibration already done. Enables only TIM channels */
 364:Src/mc_tasks.c ****              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 365:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 366:Src/mc_tasks.c ****              R3_2_TurnOnLowSides(pwmcHandle[M1]);
 367:Src/mc_tasks.c ****              TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 368:Src/mc_tasks.c ****              Mci[M1].State = CHARGE_BOOT_CAP;
 369:Src/mc_tasks.c **** 
 370:Src/mc_tasks.c ****            }
 371:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccEk3fHX.s 			page 8


 372:Src/mc_tasks.c ****           }
 373:Src/mc_tasks.c ****           else
 374:Src/mc_tasks.c ****           {
 375:Src/mc_tasks.c ****             /* nothing to be done, FW stays in IDLE state */
 376:Src/mc_tasks.c ****           }
 377:Src/mc_tasks.c ****           break;
 378:Src/mc_tasks.c ****         }
 379:Src/mc_tasks.c **** 
 380:Src/mc_tasks.c ****         case OFFSET_CALIB:
 381:Src/mc_tasks.c ****           {
 382:Src/mc_tasks.c ****             if (MCI_STOP == Mci[M1].DirectCommand)
 383:Src/mc_tasks.c ****             {
 384:Src/mc_tasks.c ****               TSK_MF_StopProcessing(&Mci[M1], M1);
 385:Src/mc_tasks.c ****             }
 386:Src/mc_tasks.c ****             else
 387:Src/mc_tasks.c ****             {
 388:Src/mc_tasks.c ****               if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 389:Src/mc_tasks.c ****               {
 390:Src/mc_tasks.c ****                 if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 391:Src/mc_tasks.c ****                 {
 392:Src/mc_tasks.c ****                   FOC_Clear(M1);
 393:Src/mc_tasks.c ****                   PQD_Clear(pMPM[M1]);
 394:Src/mc_tasks.c ****                   Mci[M1].DirectCommand = MCI_NO_COMMAND;
 395:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 396:Src/mc_tasks.c ****                 }
 397:Src/mc_tasks.c ****                 else
 398:Src/mc_tasks.c ****                 {
 399:Src/mc_tasks.c ****                   R3_2_TurnOnLowSides(pwmcHandle[M1]);
 400:Src/mc_tasks.c ****                   TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 401:Src/mc_tasks.c ****                   Mci[M1].State = CHARGE_BOOT_CAP;
 402:Src/mc_tasks.c **** 
 403:Src/mc_tasks.c ****                 }
 404:Src/mc_tasks.c ****               }
 405:Src/mc_tasks.c ****               else
 406:Src/mc_tasks.c ****               {
 407:Src/mc_tasks.c ****                 /* nothing to be done, FW waits for offset calibration to finish */
 408:Src/mc_tasks.c ****               }
 409:Src/mc_tasks.c ****             }
 410:Src/mc_tasks.c ****             break;
 411:Src/mc_tasks.c ****           }
 412:Src/mc_tasks.c **** 
 413:Src/mc_tasks.c ****         case CHARGE_BOOT_CAP:
 414:Src/mc_tasks.c ****         {
 415:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 416:Src/mc_tasks.c ****           {
 417:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 418:Src/mc_tasks.c ****           }
 419:Src/mc_tasks.c ****           else
 420:Src/mc_tasks.c ****           {
 421:Src/mc_tasks.c ****             if (TSK_ChargeBootCapDelayHasElapsedM1())
 422:Src/mc_tasks.c ****             {
 423:Src/mc_tasks.c ****               R3_2_SwitchOffPWM(pwmcHandle[M1]);
 424:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 425:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 426:Src/mc_tasks.c ****               STO_CR_Clear(&STO_CR_M1);
 427:Src/mc_tasks.c ****               STO_PLL_Clear(&STO_PLL_M1);
 428:Src/mc_tasks.c ****               FOC_Clear( M1 );
ARM GAS  /tmp/ccEk3fHX.s 			page 9


 429:Src/mc_tasks.c **** 
 430:Src/mc_tasks.c ****               {
 431:Src/mc_tasks.c **** 
 432:Src/mc_tasks.c ****                 Mci[M1].State = START;
 433:Src/mc_tasks.c ****               }
 434:Src/mc_tasks.c **** 
 435:Src/mc_tasks.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 436:Src/mc_tasks.c ****             }
 437:Src/mc_tasks.c ****             else
 438:Src/mc_tasks.c ****             {
 439:Src/mc_tasks.c ****               /* nothing to be done, FW waits for bootstrap capacitor to charge */
 440:Src/mc_tasks.c ****             }
 441:Src/mc_tasks.c ****           }
 442:Src/mc_tasks.c ****           break;
 443:Src/mc_tasks.c ****         }
 444:Src/mc_tasks.c **** 
 445:Src/mc_tasks.c ****         case START:
 446:Src/mc_tasks.c ****         {
 447:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 448:Src/mc_tasks.c ****           {
 449:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 450:Src/mc_tasks.c ****           }
 451:Src/mc_tasks.c ****           else
 452:Src/mc_tasks.c ****           {
 453:Src/mc_tasks.c ****             /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
 454:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 455:Src/mc_tasks.c ****             qd_t IqdRef;
 456:Src/mc_tasks.c ****             bool ObserverConverged = false;
 457:Src/mc_tasks.c **** 
 458:Src/mc_tasks.c ****             /* Execute the Rev Up procedure */
 459:Src/mc_tasks.c ****             if(! RUC_Exec(&RevUpControlM1))
 460:Src/mc_tasks.c **** 
 461:Src/mc_tasks.c ****             {
 462:Src/mc_tasks.c ****             /* The time allowed for the startup sequence has expired */
 463:Src/mc_tasks.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 464:Src/mc_tasks.c **** 
 465:Src/mc_tasks.c ****            }
 466:Src/mc_tasks.c ****            else
 467:Src/mc_tasks.c ****            {
 468:Src/mc_tasks.c ****              /* Execute the torque open loop current start-up ramp:
 469:Src/mc_tasks.c ****               * Compute the Iq reference current as configured in the Rev Up sequence */
 470:Src/mc_tasks.c ****              IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 471:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 472:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 473:Src/mc_tasks.c ****              FOCVars[M1].Iqdref = IqdRef;
 474:Src/mc_tasks.c ****            }
 475:Src/mc_tasks.c **** 
 476:Src/mc_tasks.c ****            (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 477:Src/mc_tasks.c **** 
 478:Src/mc_tasks.c ****            /* check that startup stage where the observer has to be used has been reached */
 479:Src/mc_tasks.c ****            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 480:Src/mc_tasks.c **** 
 481:Src/mc_tasks.c ****             {
 482:Src/mc_tasks.c ****              ObserverConverged = STO_CR_IsObserverConverged(&STO_CR_M1, hForcedMecSpeedUnit);
 483:Src/mc_tasks.c **** 
 484:Src/mc_tasks.c ****               (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 485:Src/mc_tasks.c ****             }
ARM GAS  /tmp/ccEk3fHX.s 			page 10


 486:Src/mc_tasks.c **** 
 487:Src/mc_tasks.c ****             if (ObserverConverged)
 488:Src/mc_tasks.c ****             {
 489:Src/mc_tasks.c ****               qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_CR_M1._Supe
 490:Src/mc_tasks.c **** 
 491:Src/mc_tasks.c ****               /* Start switch over ramp. This ramp will transition from the revup to the closed loo
 492:Src/mc_tasks.c ****               REMNG_Init(pREMNG[M1]);
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 494:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 495:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 496:Src/mc_tasks.c ****             }
 497:Src/mc_tasks.c ****           }
 498:Src/mc_tasks.c ****           break;
 499:Src/mc_tasks.c ****         }
 500:Src/mc_tasks.c **** 
 501:Src/mc_tasks.c ****         case SWITCH_OVER:
 502:Src/mc_tasks.c ****         {
 503:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 504:Src/mc_tasks.c ****           {
 505:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 506:Src/mc_tasks.c ****           }
 507:Src/mc_tasks.c ****           else
 508:Src/mc_tasks.c ****           {
 509:Src/mc_tasks.c ****             bool LoopClosed;
 510:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 511:Src/mc_tasks.c **** 
 512:Src/mc_tasks.c ****             if(! RUC_Exec(&RevUpControlM1))
 513:Src/mc_tasks.c **** 
 514:Src/mc_tasks.c ****             {
 515:Src/mc_tasks.c ****               /* The time allowed for the startup sequence has expired */
 516:Src/mc_tasks.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 517:Src/mc_tasks.c **** 
 518:Src/mc_tasks.c ****             }
 519:Src/mc_tasks.c ****             else
 520:Src/mc_tasks.c **** 
 521:Src/mc_tasks.c ****             {
 522:Src/mc_tasks.c ****               /* Compute the virtual speed and positions of the rotor.
 523:Src/mc_tasks.c ****                  The function returns true if the virtual speed is in the reliability range */
 524:Src/mc_tasks.c ****               LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 525:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 526:Src/mc_tasks.c ****               bool tempBool;
 527:Src/mc_tasks.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 528:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 529:Src/mc_tasks.c **** 
 530:Src/mc_tasks.c ****               /* If any of the above conditions is true, the loop is considered closed.
 531:Src/mc_tasks.c ****                  The state machine transitions to the START_RUN state. */
 532:Src/mc_tasks.c ****               if (true ==  LoopClosed)
 533:Src/mc_tasks.c ****               {
 534:Src/mc_tasks.c ****                 #if ( PID_SPEED_INTEGRAL_INIT_DIV == 0 )
 535:Src/mc_tasks.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1, 0);
 536:Src/mc_tasks.c ****                 #else
 537:Src/mc_tasks.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 538:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 539:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 540:Src/mc_tasks.c **** 				#endif
 541:Src/mc_tasks.c **** 
 542:Src/mc_tasks.c ****                 /* USER CODE BEGIN MediumFrequencyTask M1 1 */
ARM GAS  /tmp/ccEk3fHX.s 			page 11


 543:Src/mc_tasks.c **** 
 544:Src/mc_tasks.c ****                 /* USER CODE END MediumFrequencyTask M1 1 */
 545:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &STO_CR_M1._Super); /*Observer has converged*/
 546:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 547:Src/mc_tasks.c ****                 FOC_CalcCurrRef( M1 );
 548:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 549:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 550:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 551:Src/mc_tasks.c ****               }
 552:Src/mc_tasks.c ****             }
 553:Src/mc_tasks.c ****           }
 554:Src/mc_tasks.c ****           break;
 555:Src/mc_tasks.c ****         }
 556:Src/mc_tasks.c **** 
 557:Src/mc_tasks.c ****         case RUN:
 558:Src/mc_tasks.c ****         {
 559:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 560:Src/mc_tasks.c ****           {
 561:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 562:Src/mc_tasks.c ****           }
 563:Src/mc_tasks.c ****           else
 564:Src/mc_tasks.c ****           {
 565:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 2 */
 566:Src/mc_tasks.c ****             int8_t lastCommand = Mci[M1].lastCommand ;
 567:Src/mc_tasks.c ****             lastCommand++;
 568:Src/mc_tasks.c ****             lastCommand--;
 569:Src/mc_tasks.c ****             if (Mci[M1].lastCommand == MCI_CMD_EXECSPEEDSIN)
 570:Src/mc_tasks.c ****               Mci[M1].CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 571:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 572:Src/mc_tasks.c **** 
 573:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 574:Src/mc_tasks.c **** 
 575:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 576:Src/mc_tasks.c **** 
 577:Src/mc_tasks.c ****               if(!IsSpeedReliable)
 578:Src/mc_tasks.c ****               {
 579:Src/mc_tasks.c ****                 MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 580:Src/mc_tasks.c ****               }
 581:Src/mc_tasks.c **** 
 582:Src/mc_tasks.c ****           }
 583:Src/mc_tasks.c ****           break;
 584:Src/mc_tasks.c ****         }
 585:Src/mc_tasks.c **** 
 586:Src/mc_tasks.c ****         case STOP:
 587:Src/mc_tasks.c ****         {
 588:Src/mc_tasks.c ****           if (TSK_StopPermanencyTimeHasElapsedM1())
 589:Src/mc_tasks.c ****           {
 590:Src/mc_tasks.c **** 
 591:Src/mc_tasks.c ****             STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 592:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 593:Src/mc_tasks.c **** 
 594:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 595:Src/mc_tasks.c **** 
 596:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 5 */
 597:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 598:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 599:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccEk3fHX.s 			page 12


 600:Src/mc_tasks.c ****           }
 601:Src/mc_tasks.c ****           else
 602:Src/mc_tasks.c ****           {
 603:Src/mc_tasks.c ****             /* nothing to do, FW waits for to stop */
 604:Src/mc_tasks.c ****           }
 605:Src/mc_tasks.c ****           break;
 606:Src/mc_tasks.c ****         }
 607:Src/mc_tasks.c **** 
 608:Src/mc_tasks.c ****         case FAULT_OVER:
 609:Src/mc_tasks.c ****         {
 610:Src/mc_tasks.c ****           if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 611:Src/mc_tasks.c ****           {
 612:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 613:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 614:Src/mc_tasks.c **** 
 615:Src/mc_tasks.c ****           }
 616:Src/mc_tasks.c ****           else
 617:Src/mc_tasks.c ****           {
 618:Src/mc_tasks.c ****             /* nothing to do, FW stays in FAULT_OVER state until acknowledgement */
 619:Src/mc_tasks.c ****           }
 620:Src/mc_tasks.c ****         }
 621:Src/mc_tasks.c ****         break;
 622:Src/mc_tasks.c **** 
 623:Src/mc_tasks.c ****         case FAULT_NOW:
 624:Src/mc_tasks.c ****         {
 625:Src/mc_tasks.c ****           Mci[M1].State = FAULT_OVER;
 626:Src/mc_tasks.c ****         }
 627:Src/mc_tasks.c **** 
 628:Src/mc_tasks.c ****         default:
 629:Src/mc_tasks.c ****           break;
 630:Src/mc_tasks.c ****        }
 631:Src/mc_tasks.c ****     }
 632:Src/mc_tasks.c ****     else
 633:Src/mc_tasks.c ****     {
 634:Src/mc_tasks.c ****       Mci[M1].State = FAULT_OVER;
 635:Src/mc_tasks.c ****     }
 636:Src/mc_tasks.c ****   }
 637:Src/mc_tasks.c ****   else
 638:Src/mc_tasks.c ****   {
 639:Src/mc_tasks.c ****     Mci[M1].State = FAULT_NOW;
 640:Src/mc_tasks.c ****   }
 641:Src/mc_tasks.c **** 
 642:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 6 */
 643:Src/mc_tasks.c **** 
 644:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 6 */
 645:Src/mc_tasks.c **** }
 646:Src/mc_tasks.c **** 
 647:Src/mc_tasks.c **** /**
 648:Src/mc_tasks.c ****   * @brief  It re-initializes the current and voltage variables. Moreover
 649:Src/mc_tasks.c ****   *         it clears qd currents PI controllers, voltage sensor and SpeednTorque
 650:Src/mc_tasks.c ****   *         controller. It must be called before each motor restart.
 651:Src/mc_tasks.c ****   *         It does not clear speed sensor.
 652:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 653:Src/mc_tasks.c ****   * @retval none
 654:Src/mc_tasks.c ****   */
 655:Src/mc_tasks.c **** __weak void FOC_Clear(uint8_t bMotor)
 656:Src/mc_tasks.c **** {
ARM GAS  /tmp/ccEk3fHX.s 			page 13


  30              		.loc 1 656 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 656 1 is_stmt 0 view .LVU1
  35 0000 30B5     		push	{r4, r5, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 32
  42 0004 0546     		mov	r5, r0
 657:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 0 */
 658:Src/mc_tasks.c **** 
 659:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 0 */
 660:Src/mc_tasks.c **** 
 661:Src/mc_tasks.c ****   ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  43              		.loc 1 661 3 is_stmt 1 view .LVU2
  44              		.loc 1 661 8 is_stmt 0 view .LVU3
  45 0006 0024     		movs	r4, #0
  46 0008 ADF80C40 		strh	r4, [sp, #12]	@ movhi
  47 000c ADF80E40 		strh	r4, [sp, #14]	@ movhi
 662:Src/mc_tasks.c ****   qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  48              		.loc 1 662 3 is_stmt 1 view .LVU4
  49              		.loc 1 662 8 is_stmt 0 view .LVU5
  50 0010 ADF80840 		strh	r4, [sp, #8]	@ movhi
  51 0014 ADF80A40 		strh	r4, [sp, #10]	@ movhi
 663:Src/mc_tasks.c ****   alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
  52              		.loc 1 663 3 is_stmt 1 view .LVU6
  53              		.loc 1 663 15 is_stmt 0 view .LVU7
  54 0018 ADF80440 		strh	r4, [sp, #4]	@ movhi
  55 001c ADF80640 		strh	r4, [sp, #6]	@ movhi
 664:Src/mc_tasks.c **** 
 665:Src/mc_tasks.c ****   FOCVars[bMotor].Iab = NULL_ab;
  56              		.loc 1 665 3 is_stmt 1 view .LVU8
  57              		.loc 1 665 23 is_stmt 0 view .LVU9
  58 0020 1549     		ldr	r1, .L3
  59 0022 2622     		movs	r2, #38
  60 0024 02FB00F2 		mul	r2, r2, r0
  61 0028 8B18     		adds	r3, r1, r2
  62 002a 0398     		ldr	r0, [sp, #12]
  63              	.LVL1:
  64              		.loc 1 665 23 view .LVU10
  65 002c 8850     		str	r0, [r1, r2]	@ unaligned
 666:Src/mc_tasks.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  66              		.loc 1 666 3 is_stmt 1 view .LVU11
  67              		.loc 1 666 30 is_stmt 0 view .LVU12
  68 002e 0198     		ldr	r0, [sp, #4]
  69 0030 5860     		str	r0, [r3, #4]	@ unaligned
 667:Src/mc_tasks.c ****   FOCVars[bMotor].Iqd = NULL_qd;
  70              		.loc 1 667 3 is_stmt 1 view .LVU13
  71              		.loc 1 667 23 is_stmt 0 view .LVU14
  72 0032 0298     		ldr	r0, [sp, #8]
  73 0034 D860     		str	r0, [r3, #12]	@ unaligned
 668:Src/mc_tasks.c ****   {
 669:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
ARM GAS  /tmp/ccEk3fHX.s 			page 14


  74              		.loc 1 669 5 is_stmt 1 view .LVU15
  75              		.loc 1 669 28 is_stmt 0 view .LVU16
  76 0036 1861     		str	r0, [r3, #16]	@ unaligned
 670:Src/mc_tasks.c ****   }
 671:Src/mc_tasks.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
  77              		.loc 1 671 3 is_stmt 1 view .LVU17
  78              		.loc 1 671 26 is_stmt 0 view .LVU18
  79 0038 DC83     		strh	r4, [r3, #30]	@ movhi
 672:Src/mc_tasks.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  80              		.loc 1 672 3 is_stmt 1 view .LVU19
  81              		.loc 1 672 23 is_stmt 0 view .LVU20
  82 003a C3F81600 		str	r0, [r3, #22]	@ unaligned
 673:Src/mc_tasks.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  83              		.loc 1 673 3 is_stmt 1 view .LVU21
  84              		.loc 1 673 30 is_stmt 0 view .LVU22
  85 003e 0198     		ldr	r0, [sp, #4]
  86 0040 C3F81A00 		str	r0, [r3, #26]	@ unaligned
 674:Src/mc_tasks.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
  87              		.loc 1 674 3 is_stmt 1 view .LVU23
  88              		.loc 1 674 28 is_stmt 0 view .LVU24
  89 0044 1C84     		strh	r4, [r3, #32]	@ movhi
 675:Src/mc_tasks.c **** 
 676:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
  90              		.loc 1 676 3 is_stmt 1 view .LVU25
  91 0046 2146     		mov	r1, r4
  92 0048 0C4B     		ldr	r3, .L3+4
  93 004a 53F82500 		ldr	r0, [r3, r5, lsl #2]
  94 004e FFF7FEFF 		bl	PID_SetIntegralTerm
  95              	.LVL2:
 677:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
  96              		.loc 1 677 3 view .LVU26
  97 0052 2146     		mov	r1, r4
  98 0054 0A4B     		ldr	r3, .L3+8
  99 0056 53F82500 		ldr	r0, [r3, r5, lsl #2]
 100 005a FFF7FEFF 		bl	PID_SetIntegralTerm
 101              	.LVL3:
 678:Src/mc_tasks.c **** 
 679:Src/mc_tasks.c ****   STC_Clear(pSTC[bMotor]);
 102              		.loc 1 679 3 view .LVU27
 103 005e 094B     		ldr	r3, .L3+12
 104 0060 53F82500 		ldr	r0, [r3, r5, lsl #2]
 105 0064 FFF7FEFF 		bl	STC_Clear
 106              	.LVL4:
 680:Src/mc_tasks.c **** 
 681:Src/mc_tasks.c ****   PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 107              		.loc 1 681 3 view .LVU28
 108 0068 074B     		ldr	r3, .L3+16
 109 006a 53F82500 		ldr	r0, [r3, r5, lsl #2]
 110 006e FFF7FEFF 		bl	PWMC_SwitchOffPWM
 111              	.LVL5:
 682:Src/mc_tasks.c **** 
 683:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 1 */
 684:Src/mc_tasks.c **** 
 685:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 1 */
 686:Src/mc_tasks.c **** }
 112              		.loc 1 686 1 is_stmt 0 view .LVU29
 113 0072 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccEk3fHX.s 			page 15


 114              		.cfi_def_cfa_offset 12
 115              		@ sp needed
 116 0074 30BD     		pop	{r4, r5, pc}
 117              	.L4:
 118 0076 00BF     		.align	2
 119              	.L3:
 120 0078 00000000 		.word	.LANCHOR0
 121 007c 00000000 		.word	pPIDIq
 122 0080 00000000 		.word	pPIDId
 123 0084 00000000 		.word	pSTC
 124 0088 00000000 		.word	.LANCHOR1
 125              		.cfi_endproc
 126              	.LFE1627:
 128              		.section	.text.MCboot,"ax",%progbits
 129              		.align	1
 130              		.weak	MCboot
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	MCboot:
 137              	.LVL6:
 138              	.LFB1622:
 106:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 139              		.loc 1 106 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 111:Src/mc_tasks.c ****   {
 143              		.loc 1 111 3 view .LVU31
 111:Src/mc_tasks.c ****   {
 144              		.loc 1 111 6 is_stmt 0 view .LVU32
 145 0000 0028     		cmp	r0, #0
 146 0002 73D0     		beq	.L8
 106:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 147              		.loc 1 106 1 view .LVU33
 148 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 149              		.cfi_def_cfa_offset 36
 150              		.cfi_offset 4, -36
 151              		.cfi_offset 5, -32
 152              		.cfi_offset 6, -28
 153              		.cfi_offset 7, -24
 154              		.cfi_offset 8, -20
 155              		.cfi_offset 9, -16
 156              		.cfi_offset 10, -12
 157              		.cfi_offset 11, -8
 158              		.cfi_offset 14, -4
 159 0008 85B0     		sub	sp, sp, #20
 160              		.cfi_def_cfa_offset 56
 161 000a 8246     		mov	r10, r0
 118:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 162              		.loc 1 118 5 is_stmt 1 view .LVU34
 118:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 163              		.loc 1 118 22 is_stmt 0 view .LVU35
 164 000c DFF83091 		ldr	r9, .L11+80
 165 0010 0027     		movs	r7, #0
 166 0012 89F80070 		strb	r7, [r9]
ARM GAS  /tmp/ccEk3fHX.s 			page 16


 119:Src/mc_tasks.c **** 
 167              		.loc 1 119 5 is_stmt 1 view .LVU36
 119:Src/mc_tasks.c **** 
 168              		.loc 1 119 14 is_stmt 0 view .LVU37
 169 0016 364B     		ldr	r3, .L11
 170 0018 364A     		ldr	r2, .L11+4
 171 001a 1A60     		str	r2, [r3]
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 172              		.loc 1 124 5 is_stmt 1 view .LVU38
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 173              		.loc 1 124 20 is_stmt 0 view .LVU39
 174 001c DFF82481 		ldr	r8, .L11+84
 175 0020 3548     		ldr	r0, .L11+8
 176              	.LVL7:
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 177              		.loc 1 124 20 view .LVU40
 178 0022 C8F80000 		str	r0, [r8]
 125:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 179              		.loc 1 125 5 is_stmt 1 view .LVU41
 180 0026 FFF7FEFF 		bl	R3_2_Init
 181              	.LVL8:
 126:Src/mc_tasks.c **** 
 182              		.loc 1 126 5 view .LVU42
 183 002a 3448     		ldr	r0, .L11+12
 184 002c FFF7FEFF 		bl	ASPEP_start
 185              	.LVL9:
 134:Src/mc_tasks.c **** 
 186              		.loc 1 134 5 view .LVU43
 187 0030 FFF7FEFF 		bl	startTimers
 188              	.LVL10:
 139:Src/mc_tasks.c **** 
 189              		.loc 1 139 5 view .LVU44
 190 0034 324D     		ldr	r5, .L11+16
 191 0036 2846     		mov	r0, r5
 192 0038 FFF7FEFF 		bl	PID_HandleInit
 193              	.LVL11:
 144:Src/mc_tasks.c **** 
 194              		.loc 1 144 5 view .LVU45
 195 003c 314E     		ldr	r6, .L11+20
 196 003e 3046     		mov	r0, r6
 197 0040 FFF7FEFF 		bl	STO_CR_Init
 198              	.LVL12:
 149:Src/mc_tasks.c **** 
 199              		.loc 1 149 5 view .LVU46
 200 0044 304C     		ldr	r4, .L11+24
 201 0046 3246     		mov	r2, r6
 202 0048 2946     		mov	r1, r5
 203 004a 2068     		ldr	r0, [r4]
 204 004c FFF7FEFF 		bl	STC_Init
 205              	.LVL13:
 154:Src/mc_tasks.c **** 
 206              		.loc 1 154 5 view .LVU47
 207 0050 2E48     		ldr	r0, .L11+28
 208 0052 FFF7FEFF 		bl	STO_PLL_Init
 209              	.LVL14:
 159:Src/mc_tasks.c **** 
 210              		.loc 1 159 5 view .LVU48
ARM GAS  /tmp/ccEk3fHX.s 			page 17


 211 0056 2E4D     		ldr	r5, .L11+32
 212 0058 2846     		mov	r0, r5
 213 005a FFF7FEFF 		bl	VSS_Init
 214              	.LVL15:
 164:Src/mc_tasks.c **** 
 215              		.loc 1 164 5 view .LVU49
 216 005e D8F80030 		ldr	r3, [r8]
 217 0062 0093     		str	r3, [sp]
 218 0064 2B4B     		ldr	r3, .L11+36
 219 0066 2A46     		mov	r2, r5
 220 0068 2168     		ldr	r1, [r4]
 221 006a 2B48     		ldr	r0, .L11+40
 222 006c FFF7FEFF 		bl	RUC_Init
 223              	.LVL16:
 169:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 224              		.loc 1 169 5 view .LVU50
 225 0070 2A48     		ldr	r0, .L11+44
 226 0072 FFF7FEFF 		bl	PID_HandleInit
 227              	.LVL17:
 170:Src/mc_tasks.c **** 
 228              		.loc 1 170 5 view .LVU51
 229 0076 2A48     		ldr	r0, .L11+48
 230 0078 FFF7FEFF 		bl	PID_HandleInit
 231              	.LVL18:
 175:Src/mc_tasks.c **** 
 232              		.loc 1 175 5 view .LVU52
 233 007c 294D     		ldr	r5, .L11+52
 234 007e 2846     		mov	r0, r5
 235 0080 FFF7FEFF 		bl	RVBS_Init
 236              	.LVL19:
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 237              		.loc 1 180 5 view .LVU53
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 238              		.loc 1 180 9 is_stmt 0 view .LVU54
 239 0084 284B     		ldr	r3, .L11+56
 240 0086 1B68     		ldr	r3, [r3]
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 241              		.loc 1 180 20 view .LVU55
 242 0088 DD60     		str	r5, [r3, #12]
 181:Src/mc_tasks.c **** 
 243              		.loc 1 181 5 is_stmt 1 view .LVU56
 181:Src/mc_tasks.c **** 
 244              		.loc 1 181 24 is_stmt 0 view .LVU57
 245 008a 284D     		ldr	r5, .L11+60
 246 008c 9D60     		str	r5, [r3, #8]
 186:Src/mc_tasks.c **** 
 247              		.loc 1 186 5 is_stmt 1 view .LVU58
 248 008e 2848     		ldr	r0, .L11+64
 249 0090 FFF7FEFF 		bl	NTC_Init
 250              	.LVL20:
 188:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 251              		.loc 1 188 5 view .LVU59
 188:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 252              		.loc 1 188 16 is_stmt 0 view .LVU60
 253 0094 2748     		ldr	r0, .L11+68
 254 0096 284B     		ldr	r3, .L11+72
 255 0098 1860     		str	r0, [r3]
ARM GAS  /tmp/ccEk3fHX.s 			page 18


 189:Src/mc_tasks.c **** 
 256              		.loc 1 189 5 is_stmt 1 view .LVU61
 257 009a FFF7FEFF 		bl	REMNG_Init
 258              	.LVL21:
 191:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 259              		.loc 1 191 5 view .LVU62
 260 009e 3846     		mov	r0, r7
 261 00a0 FFF7FEFF 		bl	FOC_Clear
 262              	.LVL22:
 192:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 263              		.loc 1 192 5 view .LVU63
 192:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 264              		.loc 1 192 29 is_stmt 0 view .LVU64
 265 00a4 4FF0010B 		mov	fp, #1
 266 00a8 85F824B0 		strb	fp, [r5, #36]
 193:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 267              		.loc 1 193 5 is_stmt 1 view .LVU65
 193:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 268              		.loc 1 193 26 is_stmt 0 view .LVU66
 269 00ac 2068     		ldr	r0, [r4]
 270 00ae FFF7FEFF 		bl	STC_GetDefaultIqdref
 271              	.LVL23:
 272 00b2 2861     		str	r0, [r5, #16]
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 273              		.loc 1 194 5 is_stmt 1 view .LVU67
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 274              		.loc 1 194 29 is_stmt 0 view .LVU68
 275 00b4 2068     		ldr	r0, [r4]
 276 00b6 FFF7FEFF 		bl	STC_GetDefaultIqdref
 277              	.LVL24:
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 278              		.loc 1 194 59 view .LVU69
 279 00ba 0014     		asrs	r0, r0, #16
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 280              		.loc 1 194 27 view .LVU70
 281 00bc A882     		strh	r0, [r5, #20]	@ movhi
 195:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 282              		.loc 1 195 5 is_stmt 1 view .LVU71
 283 00be 1F4E     		ldr	r6, .L11+76
 284 00c0 D8F80030 		ldr	r3, [r8]
 285 00c4 2A46     		mov	r2, r5
 286 00c6 2168     		ldr	r1, [r4]
 287 00c8 3046     		mov	r0, r6
 288 00ca FFF7FEFF 		bl	MCI_Init
 289              	.LVL25:
 196:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
 290              		.loc 1 196 5 view .LVU72
 291 00ce 2068     		ldr	r0, [r4]
 292 00d0 FFF7FEFF 		bl	STC_GetMecSpeedRefUnitDefault
 293              	.LVL26:
 294 00d4 0146     		mov	r1, r0
 295 00d6 3A46     		mov	r2, r7
 296 00d8 3046     		mov	r0, r6
 297 00da FFF7FEFF 		bl	MCI_ExecSpeedRamp
 298              	.LVL27:
 198:Src/mc_tasks.c **** 
 299              		.loc 1 198 5 view .LVU73
ARM GAS  /tmp/ccEk3fHX.s 			page 19


 198:Src/mc_tasks.c **** 
 300              		.loc 1 198 18 is_stmt 0 view .LVU74
 301 00de CAF80060 		str	r6, [r10]
 204:Src/mc_tasks.c ****   }
 302              		.loc 1 204 5 is_stmt 1 view .LVU75
 204:Src/mc_tasks.c ****   }
 303              		.loc 1 204 22 is_stmt 0 view .LVU76
 304 00e2 89F800B0 		strb	fp, [r9]
 206:Src/mc_tasks.c **** 
 305              		.loc 1 206 1 view .LVU77
 306 00e6 05B0     		add	sp, sp, #20
 307              		.cfi_def_cfa_offset 36
 308              		@ sp needed
 309 00e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 310              	.LVL28:
 311              	.L8:
 312              		.cfi_def_cfa_offset 0
 313              		.cfi_restore 4
 314              		.cfi_restore 5
 315              		.cfi_restore 6
 316              		.cfi_restore 7
 317              		.cfi_restore 8
 318              		.cfi_restore 9
 319              		.cfi_restore 10
 320              		.cfi_restore 11
 321              		.cfi_restore 14
 206:Src/mc_tasks.c **** 
 322              		.loc 1 206 1 view .LVU78
 323 00ec 7047     		bx	lr
 324              	.L12:
 325 00ee 00BF     		.align	2
 326              	.L11:
 327 00f0 00000000 		.word	.LANCHOR3
 328 00f4 00000000 		.word	CircleLimitationM1
 329 00f8 00000000 		.word	PWM_Handle_M1
 330 00fc 00000000 		.word	aspepOverUartA
 331 0100 00000000 		.word	PIDSpeedHandle_M1
 332 0104 00000000 		.word	STO_CR_M1
 333 0108 00000000 		.word	pSTC
 334 010c 00000000 		.word	STO_PLL_M1
 335 0110 00000000 		.word	VirtualSpeedSensorM1
 336 0114 00000000 		.word	STO_M1
 337 0118 00000000 		.word	RevUpControlM1
 338 011c 00000000 		.word	PIDIqHandle_M1
 339 0120 00000000 		.word	PIDIdHandle_M1
 340 0124 00000000 		.word	BusVoltageSensor_M1
 341 0128 00000000 		.word	pMPM
 342 012c 00000000 		.word	.LANCHOR0
 343 0130 00000000 		.word	TempSensor_M1
 344 0134 00000000 		.word	RampExtMngrHFParamsM1
 345 0138 00000000 		.word	.LANCHOR4
 346 013c 00000000 		.word	Mci
 347 0140 00000000 		.word	.LANCHOR2
 348 0144 00000000 		.word	.LANCHOR1
 349              		.cfi_endproc
 350              	.LFE1622:
 352              		.section	.text.FOC_InitAdditionalMethods,"ax",%progbits
ARM GAS  /tmp/ccEk3fHX.s 			page 20


 353              		.align	1
 354              		.weak	FOC_InitAdditionalMethods
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	FOC_InitAdditionalMethods:
 361              	.LVL29:
 362              	.LFB1628:
 687:Src/mc_tasks.c **** 
 688:Src/mc_tasks.c **** /**
 689:Src/mc_tasks.c ****   * @brief  Use this method to initialize additional methods (if any) in
 690:Src/mc_tasks.c ****   *         START_TO_RUN state
 691:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 692:Src/mc_tasks.c ****   * @retval none
 693:Src/mc_tasks.c ****   */
 694:Src/mc_tasks.c **** __weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
 695:Src/mc_tasks.c **** {
 363              		.loc 1 695 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 696:Src/mc_tasks.c ****     if (M_NONE == bMotor)
 368              		.loc 1 696 5 view .LVU80
 697:Src/mc_tasks.c ****     {
 698:Src/mc_tasks.c ****       /* Nothing to do */
 699:Src/mc_tasks.c ****     }
 700:Src/mc_tasks.c ****     else
 701:Src/mc_tasks.c ****     {
 702:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */
 703:Src/mc_tasks.c **** 
 704:Src/mc_tasks.c ****   /* USER CODE END FOC_InitAdditionalMethods 0 */
 705:Src/mc_tasks.c ****     }
 369              		.loc 1 705 5 view .LVU81
 706:Src/mc_tasks.c **** }
 370              		.loc 1 706 1 is_stmt 0 view .LVU82
 371 0000 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE1628:
 375              		.section	.text.FOC_CalcCurrRef,"ax",%progbits
 376              		.align	1
 377              		.weak	FOC_CalcCurrRef
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	FOC_CalcCurrRef:
 384              	.LVL30:
 385              	.LFB1629:
 707:Src/mc_tasks.c **** 
 708:Src/mc_tasks.c **** /**
 709:Src/mc_tasks.c ****   * @brief  It computes the new values of Iqdref (current references on qd
 710:Src/mc_tasks.c ****   *         reference frame) based on the required electrical torque information
 711:Src/mc_tasks.c ****   *         provided by oTSC object (internally clocked).
 712:Src/mc_tasks.c ****   *         If implemented in the derived class it executes flux weakening and/or
 713:Src/mc_tasks.c ****   *         MTPA algorithm(s). It must be called with the periodicity specified
ARM GAS  /tmp/ccEk3fHX.s 			page 21


 714:Src/mc_tasks.c ****   *         in oTSC parameters
 715:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 716:Src/mc_tasks.c ****   * @retval none
 717:Src/mc_tasks.c ****   */
 718:Src/mc_tasks.c **** __weak void FOC_CalcCurrRef(uint8_t bMotor)
 719:Src/mc_tasks.c **** {
 386              		.loc 1 719 1 is_stmt 1 view -0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 720:Src/mc_tasks.c **** 
 721:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 0 */
 722:Src/mc_tasks.c **** 
 723:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 0 */
 724:Src/mc_tasks.c ****   if (INTERNAL == FOCVars[bMotor].bDriveInput)
 390              		.loc 1 724 3 view .LVU84
 391              		.loc 1 724 34 is_stmt 0 view .LVU85
 392 0000 0A4A     		ldr	r2, .L21
 393 0002 2623     		movs	r3, #38
 394 0004 03FB0023 		mla	r3, r3, r0, r2
 395 0008 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 396              		.loc 1 724 6 view .LVU86
 397 000c 03B1     		cbz	r3, .L20
 398 000e 7047     		bx	lr
 399              	.L20:
 719:Src/mc_tasks.c **** 
 400              		.loc 1 719 1 view .LVU87
 401 0010 10B5     		push	{r4, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 14, -4
 405 0012 0446     		mov	r4, r0
 725:Src/mc_tasks.c ****   {
 726:Src/mc_tasks.c ****     FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 406              		.loc 1 726 5 is_stmt 1 view .LVU88
 407              		.loc 1 726 30 is_stmt 0 view .LVU89
 408 0014 064B     		ldr	r3, .L21+4
 409 0016 53F82000 		ldr	r0, [r3, r0, lsl #2]
 410              	.LVL31:
 411              		.loc 1 726 30 view .LVU90
 412 001a FFF7FEFF 		bl	STC_CalcTorqueReference
 413              	.LVL32:
 414              		.loc 1 726 28 view .LVU91
 415 001e 034B     		ldr	r3, .L21
 416 0020 2622     		movs	r2, #38
 417 0022 02FB0434 		mla	r4, r2, r4, r3
 418 0026 E083     		strh	r0, [r4, #30]	@ movhi
 727:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 419              		.loc 1 727 5 is_stmt 1 view .LVU92
 420              		.loc 1 727 30 is_stmt 0 view .LVU93
 421 0028 2082     		strh	r0, [r4, #16]	@ movhi
 728:Src/mc_tasks.c **** 
 729:Src/mc_tasks.c ****   }
 730:Src/mc_tasks.c ****   else
 731:Src/mc_tasks.c ****   {
 732:Src/mc_tasks.c ****     /* Nothing to do */
 733:Src/mc_tasks.c ****   }
ARM GAS  /tmp/ccEk3fHX.s 			page 22


 422              		.loc 1 733 3 is_stmt 1 view .LVU94
 734:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 1 */
 735:Src/mc_tasks.c **** 
 736:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 1 */
 737:Src/mc_tasks.c **** }
 423              		.loc 1 737 1 is_stmt 0 view .LVU95
 424 002a 10BD     		pop	{r4, pc}
 425              	.L22:
 426              		.align	2
 427              	.L21:
 428 002c 00000000 		.word	.LANCHOR0
 429 0030 00000000 		.word	pSTC
 430              		.cfi_endproc
 431              	.LFE1629:
 433              		.section	.text.TSK_SetChargeBootCapDelayM1,"ax",%progbits
 434              		.align	1
 435              		.weak	TSK_SetChargeBootCapDelayM1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	TSK_SetChargeBootCapDelayM1:
 442              	.LVL33:
 443              	.LFB1630:
 738:Src/mc_tasks.c **** 
 739:Src/mc_tasks.c **** /**
 740:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the delay required
 741:Src/mc_tasks.c ****   *         for drivers boot capacitors charging of motor 1
 742:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted
 743:Src/mc_tasks.c ****   * @retval void
 744:Src/mc_tasks.c ****   */
 745:Src/mc_tasks.c **** __weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
 746:Src/mc_tasks.c **** {
 444              		.loc 1 746 1 is_stmt 1 view -0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 747:Src/mc_tasks.c ****    hBootCapDelayCounterM1 = hTickCount;
 449              		.loc 1 747 4 view .LVU97
 450              		.loc 1 747 27 is_stmt 0 view .LVU98
 451 0000 014B     		ldr	r3, .L24
 452 0002 1880     		strh	r0, [r3]	@ movhi
 748:Src/mc_tasks.c **** }
 453              		.loc 1 748 1 view .LVU99
 454 0004 7047     		bx	lr
 455              	.L25:
 456 0006 00BF     		.align	2
 457              	.L24:
 458 0008 00000000 		.word	.LANCHOR5
 459              		.cfi_endproc
 460              	.LFE1630:
 462              		.section	.text.TSK_ChargeBootCapDelayHasElapsedM1,"ax",%progbits
 463              		.align	1
 464              		.weak	TSK_ChargeBootCapDelayHasElapsedM1
 465              		.syntax unified
 466              		.thumb
ARM GAS  /tmp/ccEk3fHX.s 			page 23


 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	TSK_ChargeBootCapDelayHasElapsedM1:
 471              	.LFB1631:
 749:Src/mc_tasks.c **** 
 750:Src/mc_tasks.c **** /**
 751:Src/mc_tasks.c ****   * @brief  Use this function to know whether the time required to charge boot
 752:Src/mc_tasks.c ****   *         capacitors of motor 1 has elapsed
 753:Src/mc_tasks.c ****   * @param  none
 754:Src/mc_tasks.c ****   * @retval bool true if time has elapsed, false otherwise
 755:Src/mc_tasks.c ****   */
 756:Src/mc_tasks.c **** __weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
 757:Src/mc_tasks.c **** {
 472              		.loc 1 757 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 758:Src/mc_tasks.c ****   bool retVal = false;
 477              		.loc 1 758 3 view .LVU101
 478              	.LVL34:
 759:Src/mc_tasks.c ****   if (((uint16_t)0) == hBootCapDelayCounterM1)
 479              		.loc 1 759 3 view .LVU102
 480              		.loc 1 759 21 is_stmt 0 view .LVU103
 481 0000 034B     		ldr	r3, .L29
 482 0002 1B88     		ldrh	r3, [r3]
 483 0004 9BB2     		uxth	r3, r3
 484              		.loc 1 759 6 view .LVU104
 485 0006 0BB1     		cbz	r3, .L28
 758:Src/mc_tasks.c ****   bool retVal = false;
 486              		.loc 1 758 8 view .LVU105
 487 0008 0020     		movs	r0, #0
 488 000a 7047     		bx	lr
 489              	.L28:
 760:Src/mc_tasks.c ****   {
 761:Src/mc_tasks.c ****     retVal = true;
 490              		.loc 1 761 12 view .LVU106
 491 000c 0120     		movs	r0, #1
 492              	.LVL35:
 762:Src/mc_tasks.c ****   }
 763:Src/mc_tasks.c ****   return (retVal);
 493              		.loc 1 763 3 is_stmt 1 view .LVU107
 764:Src/mc_tasks.c **** }
 494              		.loc 1 764 1 is_stmt 0 view .LVU108
 495 000e 7047     		bx	lr
 496              	.L30:
 497              		.align	2
 498              	.L29:
 499 0010 00000000 		.word	.LANCHOR5
 500              		.cfi_endproc
 501              	.LFE1631:
 503              		.section	.text.TSK_SetStopPermanencyTimeM1,"ax",%progbits
 504              		.align	1
 505              		.weak	TSK_SetStopPermanencyTimeM1
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
ARM GAS  /tmp/ccEk3fHX.s 			page 24


 509              		.fpu fpv4-sp-d16
 511              	TSK_SetStopPermanencyTimeM1:
 512              	.LVL36:
 513              	.LFB1632:
 765:Src/mc_tasks.c **** 
 766:Src/mc_tasks.c **** /**
 767:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the permanency
 768:Src/mc_tasks.c ****   *         time in STOP state of motor 1
 769:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted
 770:Src/mc_tasks.c ****   * @retval void
 771:Src/mc_tasks.c ****   */
 772:Src/mc_tasks.c **** __weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
 773:Src/mc_tasks.c **** {
 514              		.loc 1 773 1 is_stmt 1 view -0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 774:Src/mc_tasks.c ****   hStopPermanencyCounterM1 = hTickCount;
 519              		.loc 1 774 3 view .LVU110
 520              		.loc 1 774 28 is_stmt 0 view .LVU111
 521 0000 014B     		ldr	r3, .L32
 522 0002 1880     		strh	r0, [r3]	@ movhi
 775:Src/mc_tasks.c **** }
 523              		.loc 1 775 1 view .LVU112
 524 0004 7047     		bx	lr
 525              	.L33:
 526 0006 00BF     		.align	2
 527              	.L32:
 528 0008 00000000 		.word	.LANCHOR6
 529              		.cfi_endproc
 530              	.LFE1632:
 532              		.section	.text.TSK_MF_StopProcessing,"ax",%progbits
 533              		.align	1
 534              		.global	TSK_MF_StopProcessing
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	TSK_MF_StopProcessing:
 541              	.LVL37:
 542              	.LFB1624:
 245:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 543              		.loc 1 245 1 is_stmt 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 245:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 547              		.loc 1 245 1 is_stmt 0 view .LVU114
 548 0000 10B5     		push	{r4, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 14, -4
 552 0002 0C46     		mov	r4, r1
 246:Src/mc_tasks.c **** 
 553              		.loc 1 246 3 is_stmt 1 view .LVU115
 554 0004 0C4B     		ldr	r3, .L36
ARM GAS  /tmp/ccEk3fHX.s 			page 25


 555 0006 53F82100 		ldr	r0, [r3, r1, lsl #2]
 556              	.LVL38:
 246:Src/mc_tasks.c **** 
 557              		.loc 1 246 3 is_stmt 0 view .LVU116
 558 000a FFF7FEFF 		bl	R3_2_SwitchOffPWM
 559              	.LVL39:
 248:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 560              		.loc 1 248 3 is_stmt 1 view .LVU117
 561 000e 2046     		mov	r0, r4
 562 0010 FFF7FEFF 		bl	FOC_Clear
 563              	.LVL40:
 249:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 564              		.loc 1 249 3 view .LVU118
 565 0014 094B     		ldr	r3, .L36+4
 566 0016 53F82400 		ldr	r0, [r3, r4, lsl #2]
 567 001a FFF7FEFF 		bl	PQD_Clear
 568              	.LVL41:
 250:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 569              		.loc 1 250 3 view .LVU119
 570 001e 4FF44870 		mov	r0, #800
 571 0022 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 572              	.LVL42:
 251:Src/mc_tasks.c ****   return;
 573              		.loc 1 251 3 view .LVU120
 251:Src/mc_tasks.c ****   return;
 574              		.loc 1 251 20 is_stmt 0 view .LVU121
 575 0026 04EBC404 		add	r4, r4, r4, lsl #3
 576 002a 0549     		ldr	r1, .L36+8
 577 002c 01EB8404 		add	r4, r1, r4, lsl #2
 578 0030 0823     		movs	r3, #8
 579 0032 6377     		strb	r3, [r4, #29]
 252:Src/mc_tasks.c **** }
 580              		.loc 1 252 3 is_stmt 1 view .LVU122
 253:Src/mc_tasks.c **** 
 581              		.loc 1 253 1 is_stmt 0 view .LVU123
 582 0034 10BD     		pop	{r4, pc}
 583              	.L37:
 584 0036 00BF     		.align	2
 585              	.L36:
 586 0038 00000000 		.word	.LANCHOR1
 587 003c 00000000 		.word	pMPM
 588 0040 00000000 		.word	Mci
 589              		.cfi_endproc
 590              	.LFE1624:
 592              		.section	.text.TSK_StopPermanencyTimeHasElapsedM1,"ax",%progbits
 593              		.align	1
 594              		.weak	TSK_StopPermanencyTimeHasElapsedM1
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	TSK_StopPermanencyTimeHasElapsedM1:
 601              	.LFB1633:
 776:Src/mc_tasks.c **** 
 777:Src/mc_tasks.c **** /**
 778:Src/mc_tasks.c ****   * @brief  Use this function to know whether the permanency time in STOP state
 779:Src/mc_tasks.c ****   *         of motor 1 has elapsed
ARM GAS  /tmp/ccEk3fHX.s 			page 26


 780:Src/mc_tasks.c ****   * @param  none
 781:Src/mc_tasks.c ****   * @retval bool true if time is elapsed, false otherwise
 782:Src/mc_tasks.c ****   */
 783:Src/mc_tasks.c **** __weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
 784:Src/mc_tasks.c **** {
 602              		.loc 1 784 1 is_stmt 1 view -0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 785:Src/mc_tasks.c ****   bool retVal = false;
 607              		.loc 1 785 3 view .LVU125
 608              	.LVL43:
 786:Src/mc_tasks.c ****   if (((uint16_t)0) == hStopPermanencyCounterM1)
 609              		.loc 1 786 3 view .LVU126
 610              		.loc 1 786 21 is_stmt 0 view .LVU127
 611 0000 034B     		ldr	r3, .L41
 612 0002 1B88     		ldrh	r3, [r3]
 613 0004 9BB2     		uxth	r3, r3
 614              		.loc 1 786 6 view .LVU128
 615 0006 0BB1     		cbz	r3, .L40
 785:Src/mc_tasks.c ****   bool retVal = false;
 616              		.loc 1 785 8 view .LVU129
 617 0008 0020     		movs	r0, #0
 618 000a 7047     		bx	lr
 619              	.L40:
 787:Src/mc_tasks.c ****   {
 788:Src/mc_tasks.c ****     retVal = true;
 620              		.loc 1 788 12 view .LVU130
 621 000c 0120     		movs	r0, #1
 622              	.LVL44:
 789:Src/mc_tasks.c ****   }
 790:Src/mc_tasks.c ****   return (retVal);
 623              		.loc 1 790 3 is_stmt 1 view .LVU131
 791:Src/mc_tasks.c **** }
 624              		.loc 1 791 1 is_stmt 0 view .LVU132
 625 000e 7047     		bx	lr
 626              	.L42:
 627              		.align	2
 628              	.L41:
 629 0010 00000000 		.word	.LANCHOR6
 630              		.cfi_endproc
 631              	.LFE1633:
 633              		.section	.text.TSK_MediumFrequencyTaskM1,"ax",%progbits
 634              		.align	1
 635              		.weak	TSK_MediumFrequencyTaskM1
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	TSK_MediumFrequencyTaskM1:
 642              	.LFB1626:
 332:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 643              		.loc 1 332 1 is_stmt 1 view -0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 16
 646              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEk3fHX.s 			page 27


 647 0000 30B5     		push	{r4, r5, lr}
 648              		.cfi_def_cfa_offset 12
 649              		.cfi_offset 4, -12
 650              		.cfi_offset 5, -8
 651              		.cfi_offset 14, -4
 652 0002 85B0     		sub	sp, sp, #20
 653              		.cfi_def_cfa_offset 32
 337:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 654              		.loc 1 337 3 view .LVU134
 337:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 655              		.loc 1 337 11 is_stmt 0 view .LVU135
 656 0004 0023     		movs	r3, #0
 657 0006 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 338:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 658              		.loc 1 338 3 is_stmt 1 view .LVU136
 338:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 659              		.loc 1 338 9 is_stmt 0 view .LVU137
 660 000a 0DF10E01 		add	r1, sp, #14
 661 000e B448     		ldr	r0, .L83
 662 0010 FFF7FEFF 		bl	STO_PLL_CalcAvrgMecSpeedUnit
 663              	.LVL45:
 339:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 664              		.loc 1 339 3 is_stmt 1 view .LVU138
 339:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 665              		.loc 1 339 26 is_stmt 0 view .LVU139
 666 0014 0DF10E01 		add	r1, sp, #14
 667 0018 B248     		ldr	r0, .L83+4
 668 001a FFF7FEFF 		bl	STO_CR_CalcAvrgMecSpeedUnit
 669              	.LVL46:
 670 001e 0446     		mov	r4, r0
 671              	.LVL47:
 340:Src/mc_tasks.c **** 
 672              		.loc 1 340 3 is_stmt 1 view .LVU140
 673 0020 B14B     		ldr	r3, .L83+8
 674 0022 1868     		ldr	r0, [r3]
 675 0024 FFF7FEFF 		bl	PQD_CalcElMotorPower
 676              	.LVL48:
 342:Src/mc_tasks.c ****   {
 677              		.loc 1 342 3 view .LVU141
 342:Src/mc_tasks.c ****   {
 678              		.loc 1 342 7 is_stmt 0 view .LVU142
 679 0028 B048     		ldr	r0, .L83+12
 680 002a FFF7FEFF 		bl	MCI_GetCurrentFaults
 681              	.LVL49:
 342:Src/mc_tasks.c ****   {
 682              		.loc 1 342 6 view .LVU143
 683 002e 20B1     		cbz	r0, .L75
 639:Src/mc_tasks.c ****   }
 684              		.loc 1 639 5 is_stmt 1 view .LVU144
 639:Src/mc_tasks.c ****   }
 685              		.loc 1 639 19 is_stmt 0 view .LVU145
 686 0030 AE4B     		ldr	r3, .L83+12
 687 0032 0A22     		movs	r2, #10
 688 0034 5A77     		strb	r2, [r3, #29]
 689              	.LVL50:
 690              	.L43:
 645:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccEk3fHX.s 			page 28


 691              		.loc 1 645 1 view .LVU146
 692 0036 05B0     		add	sp, sp, #20
 693              		.cfi_remember_state
 694              		.cfi_def_cfa_offset 12
 695              		@ sp needed
 696 0038 30BD     		pop	{r4, r5, pc}
 697              	.LVL51:
 698              	.L75:
 699              		.cfi_restore_state
 344:Src/mc_tasks.c ****     {
 700              		.loc 1 344 5 is_stmt 1 view .LVU147
 344:Src/mc_tasks.c ****     {
 701              		.loc 1 344 9 is_stmt 0 view .LVU148
 702 003a AC48     		ldr	r0, .L83+12
 703 003c FFF7FEFF 		bl	MCI_GetOccurredFaults
 704              	.LVL52:
 344:Src/mc_tasks.c ****     {
 705              		.loc 1 344 8 view .LVU149
 706 0040 0028     		cmp	r0, #0
 707 0042 40F0A581 		bne	.L45
 346:Src/mc_tasks.c ****       {
 708              		.loc 1 346 7 is_stmt 1 view .LVU150
 346:Src/mc_tasks.c ****       {
 709              		.loc 1 346 22 is_stmt 0 view .LVU151
 710 0046 A94B     		ldr	r3, .L83+12
 711 0048 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 712 004a 132B     		cmp	r3, #19
 713 004c F3D8     		bhi	.L43
 714 004e 01A2     		adr	r2, .L48
 715 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 716              		.p2align 2
 717              	.L48:
 718 0054 A5000000 		.word	.L56+1
 719 0058 37000000 		.word	.L43+1
 720 005c 37000000 		.word	.L43+1
 721 0060 37000000 		.word	.L43+1
 722 0064 A3010000 		.word	.L55+1
 723 0068 37000000 		.word	.L43+1
 724 006c 0D030000 		.word	.L54+1
 725 0070 37000000 		.word	.L43+1
 726 0074 4F030000 		.word	.L53+1
 727 0078 37000000 		.word	.L43+1
 728 007c 89030000 		.word	.L52+1
 729 0080 75030000 		.word	.L51+1
 730 0084 37000000 		.word	.L43+1
 731 0088 37000000 		.word	.L43+1
 732 008c 37000000 		.word	.L43+1
 733 0090 37000000 		.word	.L43+1
 734 0094 4D010000 		.word	.L50+1
 735 0098 F7000000 		.word	.L49+1
 736 009c 37000000 		.word	.L43+1
 737 00a0 4F020000 		.word	.L47+1
 738              		.p2align 1
 739              	.L56:
 350:Src/mc_tasks.c ****           {
 740              		.loc 1 350 11 is_stmt 1 view .LVU152
 350:Src/mc_tasks.c ****           {
ARM GAS  /tmp/ccEk3fHX.s 			page 29


 741              		.loc 1 350 36 is_stmt 0 view .LVU153
 742 00a4 914B     		ldr	r3, .L83+12
 743 00a6 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 350:Src/mc_tasks.c ****           {
 744              		.loc 1 350 14 view .LVU154
 745 00a8 012B     		cmp	r3, #1
 746 00aa 01D0     		beq	.L57
 350:Src/mc_tasks.c ****           {
 747              		.loc 1 350 52 discriminator 1 view .LVU155
 748 00ac 032B     		cmp	r3, #3
 749 00ae C2D1     		bne	.L43
 750              	.L57:
 353:Src/mc_tasks.c ****             }
 751              		.loc 1 353 15 is_stmt 1 view .LVU156
 752 00b0 8E48     		ldr	r0, .L83+12
 753 00b2 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 754              	.LVL53:
 755 00b6 0146     		mov	r1, r0
 756 00b8 8D48     		ldr	r0, .L83+16
 757 00ba FFF7FEFF 		bl	RUC_Clear
 758              	.LVL54:
 356:Src/mc_tasks.c ****            {
 759              		.loc 1 356 12 view .LVU157
 356:Src/mc_tasks.c ****            {
 760              		.loc 1 356 26 is_stmt 0 view .LVU158
 761 00be 8D4B     		ldr	r3, .L83+20
 762 00c0 1868     		ldr	r0, [r3]
 356:Src/mc_tasks.c ****            {
 763              		.loc 1 356 30 view .LVU159
 764 00c2 90F86E30 		ldrb	r3, [r0, #110]	@ zero_extendqisi2
 356:Src/mc_tasks.c ****            {
 765              		.loc 1 356 15 view .LVU160
 766 00c6 33B9     		cbnz	r3, .L58
 358:Src/mc_tasks.c ****              Mci[M1].State = OFFSET_CALIB;
 767              		.loc 1 358 14 is_stmt 1 view .LVU161
 768 00c8 0021     		movs	r1, #0
 769 00ca FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 770              	.LVL55:
 359:Src/mc_tasks.c ****            }
 771              		.loc 1 359 14 view .LVU162
 359:Src/mc_tasks.c ****            }
 772              		.loc 1 359 28 is_stmt 0 view .LVU163
 773 00ce 874B     		ldr	r3, .L83+12
 774 00d0 1122     		movs	r2, #17
 775 00d2 5A77     		strb	r2, [r3, #29]
 776 00d4 AFE7     		b	.L43
 777              	.L58:
 364:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 778              		.loc 1 364 14 is_stmt 1 view .LVU164
 364:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 779              		.loc 1 364 55 is_stmt 0 view .LVU165
 780 00d6 0121     		movs	r1, #1
 781 00d8 A0F84E10 		strh	r1, [r0, #78]	@ movhi
 365:Src/mc_tasks.c ****              R3_2_TurnOnLowSides(pwmcHandle[M1]);
 782              		.loc 1 365 14 is_stmt 1 view .LVU166
 783 00dc FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 784              	.LVL56:
ARM GAS  /tmp/ccEk3fHX.s 			page 30


 366:Src/mc_tasks.c ****              TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 785              		.loc 1 366 14 view .LVU167
 786 00e0 844B     		ldr	r3, .L83+20
 787 00e2 1868     		ldr	r0, [r3]
 788 00e4 FFF7FEFF 		bl	R3_2_TurnOnLowSides
 789              	.LVL57:
 367:Src/mc_tasks.c ****              Mci[M1].State = CHARGE_BOOT_CAP;
 790              		.loc 1 367 14 view .LVU168
 791 00e8 1420     		movs	r0, #20
 792 00ea FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 793              	.LVL58:
 368:Src/mc_tasks.c **** 
 794              		.loc 1 368 14 view .LVU169
 368:Src/mc_tasks.c **** 
 795              		.loc 1 368 28 is_stmt 0 view .LVU170
 796 00ee 7F4B     		ldr	r3, .L83+12
 797 00f0 1022     		movs	r2, #16
 798 00f2 5A77     		strb	r2, [r3, #29]
 799 00f4 9FE7     		b	.L43
 800              	.L49:
 382:Src/mc_tasks.c ****             {
 801              		.loc 1 382 13 is_stmt 1 view .LVU171
 382:Src/mc_tasks.c ****             {
 802              		.loc 1 382 36 is_stmt 0 view .LVU172
 803 00f6 7D4B     		ldr	r3, .L83+12
 804 00f8 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 382:Src/mc_tasks.c ****             {
 805              		.loc 1 382 16 view .LVU173
 806 00fa 052B     		cmp	r3, #5
 807 00fc 15D0     		beq	.L76
 388:Src/mc_tasks.c ****               {
 808              		.loc 1 388 15 is_stmt 1 view .LVU174
 388:Src/mc_tasks.c ****               {
 809              		.loc 1 388 19 is_stmt 0 view .LVU175
 810 00fe 0121     		movs	r1, #1
 811 0100 7C4B     		ldr	r3, .L83+20
 812 0102 1868     		ldr	r0, [r3]
 813 0104 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 814              	.LVL59:
 388:Src/mc_tasks.c ****               {
 815              		.loc 1 388 18 view .LVU176
 816 0108 0028     		cmp	r0, #0
 817 010a 94D0     		beq	.L43
 390:Src/mc_tasks.c ****                 {
 818              		.loc 1 390 17 is_stmt 1 view .LVU177
 390:Src/mc_tasks.c ****                 {
 819              		.loc 1 390 51 is_stmt 0 view .LVU178
 820 010c 774B     		ldr	r3, .L83+12
 821 010e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 390:Src/mc_tasks.c ****                 {
 822              		.loc 1 390 20 view .LVU179
 823 0110 032B     		cmp	r3, #3
 824 0112 0FD0     		beq	.L77
 399:Src/mc_tasks.c ****                   TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 825              		.loc 1 399 19 is_stmt 1 view .LVU180
 826 0114 774B     		ldr	r3, .L83+20
 827 0116 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccEk3fHX.s 			page 31


 828 0118 FFF7FEFF 		bl	R3_2_TurnOnLowSides
 829              	.LVL60:
 400:Src/mc_tasks.c ****                   Mci[M1].State = CHARGE_BOOT_CAP;
 830              		.loc 1 400 19 view .LVU181
 831 011c 1420     		movs	r0, #20
 832 011e FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 833              	.LVL61:
 401:Src/mc_tasks.c **** 
 834              		.loc 1 401 19 view .LVU182
 401:Src/mc_tasks.c **** 
 835              		.loc 1 401 33 is_stmt 0 view .LVU183
 836 0122 724B     		ldr	r3, .L83+12
 837 0124 1022     		movs	r2, #16
 838 0126 5A77     		strb	r2, [r3, #29]
 839 0128 85E7     		b	.L43
 840              	.L76:
 384:Src/mc_tasks.c ****             }
 841              		.loc 1 384 15 is_stmt 1 view .LVU184
 842 012a 0021     		movs	r1, #0
 843 012c 6F48     		ldr	r0, .L83+12
 844 012e FFF7FEFF 		bl	TSK_MF_StopProcessing
 845              	.LVL62:
 846 0132 80E7     		b	.L43
 847              	.L77:
 392:Src/mc_tasks.c ****                   PQD_Clear(pMPM[M1]);
 848              		.loc 1 392 19 view .LVU185
 849 0134 0020     		movs	r0, #0
 850 0136 FFF7FEFF 		bl	FOC_Clear
 851              	.LVL63:
 393:Src/mc_tasks.c ****                   Mci[M1].DirectCommand = MCI_NO_COMMAND;
 852              		.loc 1 393 19 view .LVU186
 853 013a 6B4B     		ldr	r3, .L83+8
 854 013c 1868     		ldr	r0, [r3]
 855 013e FFF7FEFF 		bl	PQD_Clear
 856              	.LVL64:
 394:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 857              		.loc 1 394 19 view .LVU187
 394:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 858              		.loc 1 394 41 is_stmt 0 view .LVU188
 859 0142 6A4B     		ldr	r3, .L83+12
 860 0144 0022     		movs	r2, #0
 861 0146 1A77     		strb	r2, [r3, #28]
 395:Src/mc_tasks.c ****                 }
 862              		.loc 1 395 19 is_stmt 1 view .LVU189
 395:Src/mc_tasks.c ****                 }
 863              		.loc 1 395 33 is_stmt 0 view .LVU190
 864 0148 5A77     		strb	r2, [r3, #29]
 865 014a 74E7     		b	.L43
 866              	.L50:
 415:Src/mc_tasks.c ****           {
 867              		.loc 1 415 11 is_stmt 1 view .LVU191
 415:Src/mc_tasks.c ****           {
 868              		.loc 1 415 34 is_stmt 0 view .LVU192
 869 014c 674B     		ldr	r3, .L83+12
 870 014e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 415:Src/mc_tasks.c ****           {
 871              		.loc 1 415 14 view .LVU193
ARM GAS  /tmp/ccEk3fHX.s 			page 32


 872 0150 052B     		cmp	r3, #5
 873 0152 21D0     		beq	.L78
 421:Src/mc_tasks.c ****             {
 874              		.loc 1 421 13 is_stmt 1 view .LVU194
 421:Src/mc_tasks.c ****             {
 875              		.loc 1 421 17 is_stmt 0 view .LVU195
 876 0154 FFF7FEFF 		bl	TSK_ChargeBootCapDelayHasElapsedM1
 877              	.LVL65:
 421:Src/mc_tasks.c ****             {
 878              		.loc 1 421 16 view .LVU196
 879 0158 0028     		cmp	r0, #0
 880 015a 3FF46CAF 		beq	.L43
 423:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 881              		.loc 1 423 15 is_stmt 1 view .LVU197
 882 015e 654C     		ldr	r4, .L83+20
 883              	.LVL66:
 423:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 884              		.loc 1 423 15 is_stmt 0 view .LVU198
 885 0160 2068     		ldr	r0, [r4]
 886 0162 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 887              	.LVL67:
 424:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 888              		.loc 1 424 15 is_stmt 1 view .LVU199
 424:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 889              		.loc 1 424 39 is_stmt 0 view .LVU200
 890 0166 644B     		ldr	r3, .L83+24
 891 0168 0122     		movs	r2, #1
 892 016a 83F82420 		strb	r2, [r3, #36]
 425:Src/mc_tasks.c ****               STO_CR_Clear(&STO_CR_M1);
 893              		.loc 1 425 15 is_stmt 1 view .LVU201
 894 016e 6349     		ldr	r1, .L83+28
 895 0170 634B     		ldr	r3, .L83+32
 896 0172 1868     		ldr	r0, [r3]
 897 0174 FFF7FEFF 		bl	STC_SetSpeedSensor
 898              	.LVL68:
 426:Src/mc_tasks.c ****               STO_PLL_Clear(&STO_PLL_M1);
 899              		.loc 1 426 15 view .LVU202
 900 0178 5A48     		ldr	r0, .L83+4
 901 017a FFF7FEFF 		bl	STO_CR_Clear
 902              	.LVL69:
 427:Src/mc_tasks.c ****               FOC_Clear( M1 );
 903              		.loc 1 427 15 view .LVU203
 904 017e 5848     		ldr	r0, .L83
 905 0180 FFF7FEFF 		bl	STO_PLL_Clear
 906              	.LVL70:
 428:Src/mc_tasks.c **** 
 907              		.loc 1 428 15 view .LVU204
 908 0184 0020     		movs	r0, #0
 909 0186 FFF7FEFF 		bl	FOC_Clear
 910              	.LVL71:
 432:Src/mc_tasks.c ****               }
 911              		.loc 1 432 17 view .LVU205
 432:Src/mc_tasks.c ****               }
 912              		.loc 1 432 31 is_stmt 0 view .LVU206
 913 018a 584B     		ldr	r3, .L83+12
 914 018c 0422     		movs	r2, #4
 915 018e 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/ccEk3fHX.s 			page 33


 435:Src/mc_tasks.c ****             }
 916              		.loc 1 435 15 is_stmt 1 view .LVU207
 917 0190 2068     		ldr	r0, [r4]
 918 0192 FFF7FEFF 		bl	PWMC_SwitchOnPWM
 919              	.LVL72:
 920 0196 4EE7     		b	.L43
 921              	.LVL73:
 922              	.L78:
 417:Src/mc_tasks.c ****           }
 923              		.loc 1 417 13 view .LVU208
 924 0198 0021     		movs	r1, #0
 925 019a 5448     		ldr	r0, .L83+12
 926 019c FFF7FEFF 		bl	TSK_MF_StopProcessing
 927              	.LVL74:
 928 01a0 49E7     		b	.L43
 929              	.L55:
 447:Src/mc_tasks.c ****           {
 930              		.loc 1 447 11 view .LVU209
 447:Src/mc_tasks.c ****           {
 931              		.loc 1 447 34 is_stmt 0 view .LVU210
 932 01a2 524B     		ldr	r3, .L83+12
 933 01a4 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 447:Src/mc_tasks.c ****           {
 934              		.loc 1 447 14 view .LVU211
 935 01a6 052B     		cmp	r3, #5
 936 01a8 3ED0     		beq	.L79
 937              	.LBB42:
 454:Src/mc_tasks.c ****             qd_t IqdRef;
 938              		.loc 1 454 13 is_stmt 1 view .LVU212
 455:Src/mc_tasks.c ****             bool ObserverConverged = false;
 939              		.loc 1 455 13 view .LVU213
 456:Src/mc_tasks.c **** 
 940              		.loc 1 456 13 view .LVU214
 941              	.LVL75:
 459:Src/mc_tasks.c **** 
 942              		.loc 1 459 13 view .LVU215
 459:Src/mc_tasks.c **** 
 943              		.loc 1 459 18 is_stmt 0 view .LVU216
 944 01aa 5148     		ldr	r0, .L83+16
 945 01ac FFF7FEFF 		bl	RUC_Exec
 946              	.LVL76:
 459:Src/mc_tasks.c **** 
 947              		.loc 1 459 15 view .LVU217
 948 01b0 0028     		cmp	r0, #0
 949 01b2 3ED1     		bne	.L63
 463:Src/mc_tasks.c **** 
 950              		.loc 1 463 15 is_stmt 1 view .LVU218
 951 01b4 0022     		movs	r2, #0
 952 01b6 1021     		movs	r1, #16
 953 01b8 4C48     		ldr	r0, .L83+12
 954 01ba FFF7FEFF 		bl	MCI_FaultProcessing
 955              	.LVL77:
 956              	.L64:
 476:Src/mc_tasks.c **** 
 957              		.loc 1 476 12 view .LVU219
 476:Src/mc_tasks.c **** 
 958              		.loc 1 476 19 is_stmt 0 view .LVU220
ARM GAS  /tmp/ccEk3fHX.s 			page 34


 959 01be 0DF10201 		add	r1, sp, #2
 960 01c2 4E48     		ldr	r0, .L83+28
 961 01c4 FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 962              	.LVL78:
 479:Src/mc_tasks.c **** 
 963              		.loc 1 479 12 is_stmt 1 view .LVU221
 479:Src/mc_tasks.c **** 
 964              		.loc 1 479 24 is_stmt 0 view .LVU222
 965 01c8 4948     		ldr	r0, .L83+16
 966 01ca FFF7FEFF 		bl	RUC_FirstAccelerationStageReached
 967              	.LVL79:
 479:Src/mc_tasks.c **** 
 968              		.loc 1 479 15 view .LVU223
 969 01ce 0028     		cmp	r0, #0
 970 01d0 3FF431AF 		beq	.L43
 482:Src/mc_tasks.c **** 
 971              		.loc 1 482 14 is_stmt 1 view .LVU224
 482:Src/mc_tasks.c **** 
 972              		.loc 1 482 34 is_stmt 0 view .LVU225
 973 01d4 BDF90210 		ldrsh	r1, [sp, #2]
 974 01d8 4248     		ldr	r0, .L83+4
 975 01da FFF7FEFF 		bl	STO_CR_IsObserverConverged
 976              	.LVL80:
 977 01de 0446     		mov	r4, r0
 978              	.LVL81:
 484:Src/mc_tasks.c ****             }
 979              		.loc 1 484 15 is_stmt 1 view .LVU226
 484:Src/mc_tasks.c ****             }
 980              		.loc 1 484 21 is_stmt 0 view .LVU227
 981 01e0 0146     		mov	r1, r0
 982 01e2 4648     		ldr	r0, .L83+28
 983              	.LVL82:
 484:Src/mc_tasks.c ****             }
 984              		.loc 1 484 21 view .LVU228
 985 01e4 FFF7FEFF 		bl	VSS_SetStartTransition
 986              	.LVL83:
 487:Src/mc_tasks.c ****             {
 987              		.loc 1 487 13 is_stmt 1 view .LVU229
 487:Src/mc_tasks.c ****             {
 988              		.loc 1 487 16 is_stmt 0 view .LVU230
 989 01e8 002C     		cmp	r4, #0
 990 01ea 3FF424AF 		beq	.L43
 991              	.LBB43:
 489:Src/mc_tasks.c **** 
 992              		.loc 1 489 15 is_stmt 1 view .LVU231
 489:Src/mc_tasks.c **** 
 993              		.loc 1 489 36 is_stmt 0 view .LVU232
 994 01ee 3D48     		ldr	r0, .L83+4
 995 01f0 FFF7FEFF 		bl	SPD_GetElAngle
 996              	.LVL84:
 997 01f4 0146     		mov	r1, r0
 998 01f6 404D     		ldr	r5, .L83+24
 999 01f8 6868     		ldr	r0, [r5, #4]
 1000 01fa FFF7FEFF 		bl	MCM_Park
 1001              	.LVL85:
 1002 01fe 0290     		str	r0, [sp, #8]
 492:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
ARM GAS  /tmp/ccEk3fHX.s 			page 35


 1003              		.loc 1 492 15 is_stmt 1 view .LVU233
 1004 0200 404C     		ldr	r4, .L83+36
 1005              	.LVL86:
 492:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 1006              		.loc 1 492 15 is_stmt 0 view .LVU234
 1007 0202 2068     		ldr	r0, [r4]
 1008 0204 FFF7FEFF 		bl	REMNG_Init
 1009              	.LVL87:
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 1010              		.loc 1 493 15 is_stmt 1 view .LVU235
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 1011              		.loc 1 493 21 is_stmt 0 view .LVU236
 1012 0208 0022     		movs	r2, #0
 1013 020a B5F91010 		ldrsh	r1, [r5, #16]
 1014 020e 2068     		ldr	r0, [r4]
 1015 0210 FFF7FEFF 		bl	REMNG_ExecRamp
 1016              	.LVL88:
 494:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 1017              		.loc 1 494 15 is_stmt 1 view .LVU237
 494:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 1018              		.loc 1 494 21 is_stmt 0 view .LVU238
 1019 0214 1922     		movs	r2, #25
 1020 0216 BDF90810 		ldrsh	r1, [sp, #8]
 1021 021a 2068     		ldr	r0, [r4]
 1022 021c FFF7FEFF 		bl	REMNG_ExecRamp
 1023              	.LVL89:
 495:Src/mc_tasks.c ****             }
 1024              		.loc 1 495 15 is_stmt 1 view .LVU239
 495:Src/mc_tasks.c ****             }
 1025              		.loc 1 495 29 is_stmt 0 view .LVU240
 1026 0220 324B     		ldr	r3, .L83+12
 1027 0222 1322     		movs	r2, #19
 1028 0224 5A77     		strb	r2, [r3, #29]
 495:Src/mc_tasks.c ****             }
 1029              		.loc 1 495 29 view .LVU241
 1030 0226 06E7     		b	.L43
 1031              	.LVL90:
 1032              	.L79:
 495:Src/mc_tasks.c ****             }
 1033              		.loc 1 495 29 view .LVU242
 1034              	.LBE43:
 1035              	.LBE42:
 449:Src/mc_tasks.c ****           }
 1036              		.loc 1 449 13 is_stmt 1 view .LVU243
 1037 0228 0021     		movs	r1, #0
 1038 022a 3048     		ldr	r0, .L83+12
 1039 022c FFF7FEFF 		bl	TSK_MF_StopProcessing
 1040              	.LVL91:
 1041 0230 01E7     		b	.L43
 1042              	.LVL92:
 1043              	.L63:
 1044              	.LBB44:
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1045              		.loc 1 470 14 view .LVU244
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1046              		.loc 1 470 25 is_stmt 0 view .LVU245
 1047 0232 334B     		ldr	r3, .L83+32
ARM GAS  /tmp/ccEk3fHX.s 			page 36


 1048 0234 1868     		ldr	r0, [r3]
 1049 0236 FFF7FEFF 		bl	STC_CalcTorqueReference
 1050              	.LVL93:
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1051              		.loc 1 470 23 view .LVU246
 1052 023a ADF80400 		strh	r0, [sp, #4]	@ movhi
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1053              		.loc 1 471 14 is_stmt 1 view .LVU247
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1054              		.loc 1 471 36 is_stmt 0 view .LVU248
 1055 023e 2E4B     		ldr	r3, .L83+24
 1056 0240 B3F91420 		ldrsh	r2, [r3, #20]
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1057              		.loc 1 471 23 view .LVU249
 1058 0244 ADF80620 		strh	r2, [sp, #6]	@ movhi
 473:Src/mc_tasks.c ****            }
 1059              		.loc 1 473 14 is_stmt 1 view .LVU250
 473:Src/mc_tasks.c ****            }
 1060              		.loc 1 473 33 is_stmt 0 view .LVU251
 1061 0248 019A     		ldr	r2, [sp, #4]
 1062 024a 1A61     		str	r2, [r3, #16]
 1063 024c B7E7     		b	.L64
 1064              	.LVL94:
 1065              	.L47:
 473:Src/mc_tasks.c ****            }
 1066              		.loc 1 473 33 view .LVU252
 1067              	.LBE44:
 503:Src/mc_tasks.c ****           {
 1068              		.loc 1 503 11 is_stmt 1 view .LVU253
 503:Src/mc_tasks.c ****           {
 1069              		.loc 1 503 34 is_stmt 0 view .LVU254
 1070 024e 274B     		ldr	r3, .L83+12
 1071 0250 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 503:Src/mc_tasks.c ****           {
 1072              		.loc 1 503 14 view .LVU255
 1073 0252 052B     		cmp	r3, #5
 1074 0254 09D0     		beq	.L80
 1075              	.LBB45:
 509:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 1076              		.loc 1 509 13 is_stmt 1 view .LVU256
 510:Src/mc_tasks.c **** 
 1077              		.loc 1 510 13 view .LVU257
 512:Src/mc_tasks.c **** 
 1078              		.loc 1 512 13 view .LVU258
 512:Src/mc_tasks.c **** 
 1079              		.loc 1 512 18 is_stmt 0 view .LVU259
 1080 0256 2648     		ldr	r0, .L83+16
 1081 0258 FFF7FEFF 		bl	RUC_Exec
 1082              	.LVL95:
 512:Src/mc_tasks.c **** 
 1083              		.loc 1 512 15 view .LVU260
 1084 025c 50B9     		cbnz	r0, .L67
 516:Src/mc_tasks.c **** 
 1085              		.loc 1 516 15 is_stmt 1 view .LVU261
 1086 025e 0022     		movs	r2, #0
 1087 0260 1021     		movs	r1, #16
 1088 0262 2248     		ldr	r0, .L83+12
ARM GAS  /tmp/ccEk3fHX.s 			page 37


 1089 0264 FFF7FEFF 		bl	MCI_FaultProcessing
 1090              	.LVL96:
 1091 0268 E5E6     		b	.L43
 1092              	.L80:
 1093              	.LBE45:
 505:Src/mc_tasks.c ****           }
 1094              		.loc 1 505 13 view .LVU262
 1095 026a 0021     		movs	r1, #0
 1096 026c 1F48     		ldr	r0, .L83+12
 1097 026e FFF7FEFF 		bl	TSK_MF_StopProcessing
 1098              	.LVL97:
 1099 0272 E0E6     		b	.L43
 1100              	.L67:
 1101              	.LBB47:
 1102              	.LBB46:
 524:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 1103              		.loc 1 524 15 view .LVU263
 524:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 1104              		.loc 1 524 28 is_stmt 0 view .LVU264
 1105 0274 214D     		ldr	r5, .L83+28
 1106 0276 02A9     		add	r1, sp, #8
 1107 0278 2846     		mov	r0, r5
 1108 027a FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 1109              	.LVL98:
 1110 027e 0446     		mov	r4, r0
 1111              	.LVL99:
 526:Src/mc_tasks.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 1112              		.loc 1 526 15 is_stmt 1 view .LVU265
 527:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 1113              		.loc 1 527 15 view .LVU266
 527:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 1114              		.loc 1 527 26 is_stmt 0 view .LVU267
 1115 0280 2846     		mov	r0, r5
 1116 0282 FFF7FEFF 		bl	VSS_TransitionEnded
 1117              	.LVL100:
 528:Src/mc_tasks.c **** 
 1118              		.loc 1 528 15 is_stmt 1 view .LVU268
 528:Src/mc_tasks.c **** 
 1119              		.loc 1 528 39 is_stmt 0 view .LVU269
 1120 0286 14B9     		cbnz	r4, .L72
 528:Src/mc_tasks.c **** 
 1121              		.loc 1 528 39 discriminator 2 view .LVU270
 1122 0288 38B3     		cbz	r0, .L73
 528:Src/mc_tasks.c **** 
 1123              		.loc 1 528 39 view .LVU271
 1124 028a 0123     		movs	r3, #1
 1125 028c 00E0     		b	.L69
 1126              	.L72:
 1127 028e 0123     		movs	r3, #1
 1128              	.L69:
 1129              	.LVL101:
 532:Src/mc_tasks.c ****               {
 1130              		.loc 1 532 15 is_stmt 1 discriminator 6 view .LVU272
 532:Src/mc_tasks.c ****               {
 1131              		.loc 1 532 18 is_stmt 0 discriminator 6 view .LVU273
 1132 0290 002B     		cmp	r3, #0
 1133 0292 3FF4D0AE 		beq	.L43
ARM GAS  /tmp/ccEk3fHX.s 			page 38


 537:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1134              		.loc 1 537 17 is_stmt 1 view .LVU274
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1135              		.loc 1 538 66 is_stmt 0 view .LVU275
 1136 0296 184B     		ldr	r3, .L83+24
 1137              	.LVL102:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1138              		.loc 1 538 66 view .LVU276
 1139 0298 B3F91050 		ldrsh	r5, [r3, #16]
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1140              		.loc 1 538 80 view .LVU277
 1141 029c 1A4C     		ldr	r4, .L83+40
 1142 029e 2046     		mov	r0, r4
 1143              	.LVL103:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1144              		.loc 1 538 80 view .LVU278
 1145 02a0 FFF7FEFF 		bl	PID_GetKIDivisor
 1146              	.LVL104:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1147              		.loc 1 538 71 view .LVU279
 1148 02a4 01B2     		sxth	r1, r0
 537:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1149              		.loc 1 537 17 view .LVU280
 1150 02a6 01FB05F1 		mul	r1, r1, r5
 1151 02aa 2046     		mov	r0, r4
 1152 02ac FFF7FEFF 		bl	PID_SetIntegralTerm
 1153              	.LVL105:
 545:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 1154              		.loc 1 545 17 is_stmt 1 view .LVU281
 1155 02b0 134C     		ldr	r4, .L83+32
 1156 02b2 0C49     		ldr	r1, .L83+4
 1157 02b4 2068     		ldr	r0, [r4]
 1158 02b6 FFF7FEFF 		bl	STC_SetSpeedSensor
 1159              	.LVL106:
 546:Src/mc_tasks.c ****                 FOC_CalcCurrRef( M1 );
 1160              		.loc 1 546 17 view .LVU282
 1161 02ba 0020     		movs	r0, #0
 1162 02bc FFF7FEFF 		bl	FOC_InitAdditionalMethods
 1163              	.LVL107:
 547:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 1164              		.loc 1 547 17 view .LVU283
 1165 02c0 0020     		movs	r0, #0
 1166 02c2 FFF7FEFF 		bl	FOC_CalcCurrRef
 1167              	.LVL108:
 548:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 1168              		.loc 1 548 17 view .LVU284
 1169 02c6 2068     		ldr	r0, [r4]
 1170 02c8 FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 1171              	.LVL109:
 549:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 1172              		.loc 1 549 17 view .LVU285
 1173 02cc 074C     		ldr	r4, .L83+12
 1174 02ce 2046     		mov	r0, r4
 1175 02d0 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 1176              	.LVL110:
 550:Src/mc_tasks.c ****               }
 1177              		.loc 1 550 17 view .LVU286
ARM GAS  /tmp/ccEk3fHX.s 			page 39


 550:Src/mc_tasks.c ****               }
 1178              		.loc 1 550 31 is_stmt 0 view .LVU287
 1179 02d4 0623     		movs	r3, #6
 1180 02d6 6377     		strb	r3, [r4, #29]
 1181 02d8 ADE6     		b	.L43
 1182              	.LVL111:
 1183              	.L73:
 528:Src/mc_tasks.c **** 
 1184              		.loc 1 528 39 view .LVU288
 1185 02da 0023     		movs	r3, #0
 1186 02dc D8E7     		b	.L69
 1187              	.L84:
 1188 02de 00BF     		.align	2
 1189              	.L83:
 1190 02e0 00000000 		.word	STO_PLL_M1
 1191 02e4 00000000 		.word	STO_CR_M1
 1192 02e8 00000000 		.word	pMPM
 1193 02ec 00000000 		.word	Mci
 1194 02f0 00000000 		.word	RevUpControlM1
 1195 02f4 00000000 		.word	.LANCHOR1
 1196 02f8 00000000 		.word	.LANCHOR0
 1197 02fc 00000000 		.word	VirtualSpeedSensorM1
 1198 0300 00000000 		.word	pSTC
 1199 0304 00000000 		.word	.LANCHOR4
 1200 0308 00000000 		.word	PIDSpeedHandle_M1
 1201              	.LVL112:
 1202              	.L54:
 528:Src/mc_tasks.c **** 
 1203              		.loc 1 528 39 view .LVU289
 1204              	.LBE46:
 1205              	.LBE47:
 559:Src/mc_tasks.c ****           {
 1206              		.loc 1 559 11 is_stmt 1 view .LVU290
 559:Src/mc_tasks.c ****           {
 1207              		.loc 1 559 34 is_stmt 0 view .LVU291
 1208 030c 224B     		ldr	r3, .L85
 1209 030e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 559:Src/mc_tasks.c ****           {
 1210              		.loc 1 559 14 view .LVU292
 1211 0310 052B     		cmp	r3, #5
 1212 0312 12D0     		beq	.L81
 1213              	.LBB48:
 566:Src/mc_tasks.c ****             lastCommand++;
 1214              		.loc 1 566 13 is_stmt 1 view .LVU293
 566:Src/mc_tasks.c ****             lastCommand++;
 1215              		.loc 1 566 41 is_stmt 0 view .LVU294
 1216 0314 204B     		ldr	r3, .L85
 1217 0316 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1218              	.LVL113:
 567:Src/mc_tasks.c ****             lastCommand--;
 1219              		.loc 1 567 13 is_stmt 1 view .LVU295
 568:Src/mc_tasks.c ****             if (Mci[M1].lastCommand == MCI_CMD_EXECSPEEDSIN)
 1220              		.loc 1 568 13 view .LVU296
 569:Src/mc_tasks.c ****               Mci[M1].CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1221              		.loc 1 569 13 view .LVU297
 569:Src/mc_tasks.c ****               Mci[M1].CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1222              		.loc 1 569 16 is_stmt 0 view .LVU298
ARM GAS  /tmp/ccEk3fHX.s 			page 40


 1223 0318 042B     		cmp	r3, #4
 1224 031a 13D0     		beq	.L82
 1225              	.LVL114:
 1226              	.L71:
 573:Src/mc_tasks.c **** 
 1227              		.loc 1 573 13 is_stmt 1 view .LVU299
 1228 031c 1E48     		ldr	r0, .L85
 1229              	.LVL115:
 573:Src/mc_tasks.c **** 
 1230              		.loc 1 573 13 is_stmt 0 view .LVU300
 1231 031e FFF7FEFF 		bl	MCI_ExecBufferedCommands
 1232              	.LVL116:
 575:Src/mc_tasks.c **** 
 1233              		.loc 1 575 15 is_stmt 1 view .LVU301
 1234 0322 0020     		movs	r0, #0
 1235 0324 FFF7FEFF 		bl	FOC_CalcCurrRef
 1236              	.LVL117:
 577:Src/mc_tasks.c ****               {
 1237              		.loc 1 577 15 view .LVU302
 577:Src/mc_tasks.c ****               {
 1238              		.loc 1 577 17 is_stmt 0 view .LVU303
 1239 0328 002C     		cmp	r4, #0
 1240 032a 7FF484AE 		bne	.L43
 579:Src/mc_tasks.c ****               }
 1241              		.loc 1 579 17 is_stmt 1 view .LVU304
 1242 032e 0022     		movs	r2, #0
 1243 0330 2021     		movs	r1, #32
 1244 0332 1948     		ldr	r0, .L85
 1245 0334 FFF7FEFF 		bl	MCI_FaultProcessing
 1246              	.LVL118:
 1247 0338 7DE6     		b	.L43
 1248              	.L81:
 579:Src/mc_tasks.c ****               }
 1249              		.loc 1 579 17 is_stmt 0 view .LVU305
 1250              	.LBE48:
 561:Src/mc_tasks.c ****           }
 1251              		.loc 1 561 13 is_stmt 1 view .LVU306
 1252 033a 0021     		movs	r1, #0
 1253 033c 1648     		ldr	r0, .L85
 1254 033e FFF7FEFF 		bl	TSK_MF_StopProcessing
 1255              	.LVL119:
 1256 0342 78E6     		b	.L43
 1257              	.LVL120:
 1258              	.L82:
 1259              	.LBB49:
 570:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 1260              		.loc 1 570 15 view .LVU307
 570:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 1261              		.loc 1 570 36 is_stmt 0 view .LVU308
 1262 0344 144B     		ldr	r3, .L85
 1263              	.LVL121:
 570:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 1264              		.loc 1 570 36 view .LVU309
 1265 0346 0122     		movs	r2, #1
 1266 0348 83F82220 		strb	r2, [r3, #34]
 1267 034c E6E7     		b	.L71
 1268              	.LVL122:
ARM GAS  /tmp/ccEk3fHX.s 			page 41


 1269              	.L53:
 570:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 1270              		.loc 1 570 36 view .LVU310
 1271              	.LBE49:
 588:Src/mc_tasks.c ****           {
 1272              		.loc 1 588 11 is_stmt 1 view .LVU311
 588:Src/mc_tasks.c ****           {
 1273              		.loc 1 588 15 is_stmt 0 view .LVU312
 1274 034e FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1275              	.LVL123:
 588:Src/mc_tasks.c ****           {
 1276              		.loc 1 588 14 view .LVU313
 1277 0352 0028     		cmp	r0, #0
 1278 0354 3FF46FAE 		beq	.L43
 591:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 1279              		.loc 1 591 13 is_stmt 1 view .LVU314
 1280 0358 104C     		ldr	r4, .L85+4
 1281              	.LVL124:
 591:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 1282              		.loc 1 591 13 is_stmt 0 view .LVU315
 1283 035a 2146     		mov	r1, r4
 1284 035c 104B     		ldr	r3, .L85+8
 1285 035e 1868     		ldr	r0, [r3]
 1286 0360 FFF7FEFF 		bl	STC_SetSpeedSensor
 1287              	.LVL125:
 592:Src/mc_tasks.c **** 
 1288              		.loc 1 592 13 is_stmt 1 view .LVU316
 1289 0364 2046     		mov	r0, r4
 1290 0366 FFF7FEFF 		bl	VSS_Clear
 1291              	.LVL126:
 597:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1292              		.loc 1 597 13 view .LVU317
 597:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1293              		.loc 1 597 35 is_stmt 0 view .LVU318
 1294 036a 0B4B     		ldr	r3, .L85
 1295 036c 0022     		movs	r2, #0
 1296 036e 1A77     		strb	r2, [r3, #28]
 598:Src/mc_tasks.c **** 
 1297              		.loc 1 598 13 is_stmt 1 view .LVU319
 598:Src/mc_tasks.c **** 
 1298              		.loc 1 598 27 is_stmt 0 view .LVU320
 1299 0370 5A77     		strb	r2, [r3, #29]
 1300 0372 60E6     		b	.L43
 1301              	.LVL127:
 1302              	.L51:
 610:Src/mc_tasks.c ****           {
 1303              		.loc 1 610 11 is_stmt 1 view .LVU321
 610:Src/mc_tasks.c ****           {
 1304              		.loc 1 610 40 is_stmt 0 view .LVU322
 1305 0374 084B     		ldr	r3, .L85
 1306 0376 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 610:Src/mc_tasks.c ****           {
 1307              		.loc 1 610 14 view .LVU323
 1308 0378 022B     		cmp	r3, #2
 1309 037a 7FF45CAE 		bne	.L43
 612:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1310              		.loc 1 612 13 is_stmt 1 view .LVU324
ARM GAS  /tmp/ccEk3fHX.s 			page 42


 612:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1311              		.loc 1 612 35 is_stmt 0 view .LVU325
 1312 037e 064B     		ldr	r3, .L85
 1313 0380 0022     		movs	r2, #0
 1314 0382 1A77     		strb	r2, [r3, #28]
 613:Src/mc_tasks.c **** 
 1315              		.loc 1 613 13 is_stmt 1 view .LVU326
 613:Src/mc_tasks.c **** 
 1316              		.loc 1 613 27 is_stmt 0 view .LVU327
 1317 0384 5A77     		strb	r2, [r3, #29]
 1318 0386 56E6     		b	.L43
 1319              	.L52:
 625:Src/mc_tasks.c ****         }
 1320              		.loc 1 625 11 is_stmt 1 view .LVU328
 625:Src/mc_tasks.c ****         }
 1321              		.loc 1 625 25 is_stmt 0 view .LVU329
 1322 0388 034B     		ldr	r3, .L85
 1323 038a 0B22     		movs	r2, #11
 1324 038c 5A77     		strb	r2, [r3, #29]
 1325 038e 52E6     		b	.L43
 1326              	.L45:
 634:Src/mc_tasks.c ****     }
 1327              		.loc 1 634 7 is_stmt 1 view .LVU330
 634:Src/mc_tasks.c ****     }
 1328              		.loc 1 634 21 is_stmt 0 view .LVU331
 1329 0390 014B     		ldr	r3, .L85
 1330 0392 0B22     		movs	r2, #11
 1331 0394 5A77     		strb	r2, [r3, #29]
 1332 0396 4EE6     		b	.L43
 1333              	.L86:
 1334              		.align	2
 1335              	.L85:
 1336 0398 00000000 		.word	Mci
 1337 039c 00000000 		.word	VirtualSpeedSensorM1
 1338 03a0 00000000 		.word	pSTC
 1339              		.cfi_endproc
 1340              	.LFE1626:
 1342              		.section	.text.MC_Scheduler,"ax",%progbits
 1343              		.align	1
 1344              		.weak	MC_Scheduler
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1348              		.fpu fpv4-sp-d16
 1350              	MC_Scheduler:
 1351              	.LFB1625:
 261:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 1352              		.loc 1 261 1 is_stmt 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356 0000 38B5     		push	{r3, r4, r5, lr}
 1357              		.cfi_def_cfa_offset 16
 1358              		.cfi_offset 3, -16
 1359              		.cfi_offset 4, -12
 1360              		.cfi_offset 5, -8
 1361              		.cfi_offset 14, -4
ARM GAS  /tmp/ccEk3fHX.s 			page 43


 266:Src/mc_tasks.c ****   {
 1362              		.loc 1 266 3 view .LVU333
 266:Src/mc_tasks.c ****   {
 1363              		.loc 1 266 20 is_stmt 0 view .LVU334
 1364 0002 204B     		ldr	r3, .L96
 1365 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1366 0006 DBB2     		uxtb	r3, r3
 266:Src/mc_tasks.c ****   {
 1367              		.loc 1 266 6 view .LVU335
 1368 0008 012B     		cmp	r3, #1
 1369 000a 00D0     		beq	.L94
 1370              	.L87:
 321:Src/mc_tasks.c **** 
 1371              		.loc 1 321 1 view .LVU336
 1372 000c 38BD     		pop	{r3, r4, r5, pc}
 1373              	.L94:
 268:Src/mc_tasks.c ****     {
 1374              		.loc 1 268 5 is_stmt 1 view .LVU337
 268:Src/mc_tasks.c ****     {
 1375              		.loc 1 268 25 is_stmt 0 view .LVU338
 1376 000e 1E4B     		ldr	r3, .L96+4
 1377 0010 1B88     		ldrh	r3, [r3]
 268:Src/mc_tasks.c ****     {
 1378              		.loc 1 268 7 view .LVU339
 1379 0012 C3B1     		cbz	r3, .L89
 270:Src/mc_tasks.c ****     }
 1380              		.loc 1 270 7 is_stmt 1 view .LVU340
 270:Src/mc_tasks.c ****     }
 1381              		.loc 1 270 23 is_stmt 0 view .LVU341
 1382 0014 013B     		subs	r3, r3, #1
 1383 0016 1C4A     		ldr	r2, .L96+4
 1384 0018 1380     		strh	r3, [r2]	@ movhi
 1385              	.L90:
 305:Src/mc_tasks.c ****     {
 1386              		.loc 1 305 5 is_stmt 1 view .LVU342
 305:Src/mc_tasks.c ****     {
 1387              		.loc 1 305 31 is_stmt 0 view .LVU343
 1388 001a 1C4B     		ldr	r3, .L96+8
 1389 001c 1B88     		ldrh	r3, [r3]
 1390 001e 9BB2     		uxth	r3, r3
 305:Src/mc_tasks.c ****     {
 1391              		.loc 1 305 7 view .LVU344
 1392 0020 2BB1     		cbz	r3, .L92
 307:Src/mc_tasks.c ****     }
 1393              		.loc 1 307 7 is_stmt 1 view .LVU345
 307:Src/mc_tasks.c ****     }
 1394              		.loc 1 307 29 is_stmt 0 view .LVU346
 1395 0022 1A4A     		ldr	r2, .L96+8
 1396 0024 1388     		ldrh	r3, [r2]
 1397 0026 9BB2     		uxth	r3, r3
 1398 0028 013B     		subs	r3, r3, #1
 1399 002a 9BB2     		uxth	r3, r3
 1400 002c 1380     		strh	r3, [r2]	@ movhi
 1401              	.L92:
 309:Src/mc_tasks.c ****     {
 1402              		.loc 1 309 5 is_stmt 1 view .LVU347
 309:Src/mc_tasks.c ****     {
ARM GAS  /tmp/ccEk3fHX.s 			page 44


 1403              		.loc 1 309 33 is_stmt 0 view .LVU348
 1404 002e 184B     		ldr	r3, .L96+12
 1405 0030 1B88     		ldrh	r3, [r3]
 1406 0032 9BB2     		uxth	r3, r3
 309:Src/mc_tasks.c ****     {
 1407              		.loc 1 309 7 view .LVU349
 1408 0034 002B     		cmp	r3, #0
 1409 0036 E9D0     		beq	.L87
 311:Src/mc_tasks.c ****     }
 1410              		.loc 1 311 7 is_stmt 1 view .LVU350
 311:Src/mc_tasks.c ****     }
 1411              		.loc 1 311 31 is_stmt 0 view .LVU351
 1412 0038 154A     		ldr	r2, .L96+12
 1413 003a 1388     		ldrh	r3, [r2]
 1414 003c 9BB2     		uxth	r3, r3
 1415 003e 013B     		subs	r3, r3, #1
 1416 0040 9BB2     		uxth	r3, r3
 1417 0042 1380     		strh	r3, [r2]	@ movhi
 317:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 1418              		.loc 1 317 3 is_stmt 1 view .LVU352
 321:Src/mc_tasks.c **** 
 1419              		.loc 1 321 1 is_stmt 0 view .LVU353
 1420 0044 E2E7     		b	.L87
 1421              	.L89:
 274:Src/mc_tasks.c **** 
 1422              		.loc 1 274 7 is_stmt 1 view .LVU354
 1423 0046 FFF7FEFF 		bl	TSK_MediumFrequencyTaskM1
 1424              	.LVL128:
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1425              		.loc 1 276 7 view .LVU355
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1426              		.loc 1 276 47 is_stmt 0 view .LVU356
 1427 004a 124C     		ldr	r4, .L96+16
 1428 004c 2146     		mov	r1, r4
 1429 004e 51F80C0B 		ldr	r0, [r1], #12
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1430              		.loc 1 276 63 view .LVU357
 1431 0052 8368     		ldr	r3, [r0, #8]
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1432              		.loc 1 276 33 view .LVU358
 1433 0054 9847     		blx	r3
 1434              	.LVL129:
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1435              		.loc 1 276 31 view .LVU359
 1436 0056 6060     		str	r0, [r4, #4]
 278:Src/mc_tasks.c ****       {
 1437              		.loc 1 278 7 is_stmt 1 view .LVU360
 278:Src/mc_tasks.c ****       {
 1438              		.loc 1 278 10 is_stmt 0 view .LVU361
 1439 0058 30B1     		cbz	r0, .L91
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1440              		.loc 1 285 9 is_stmt 1 view .LVU362
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1441              		.loc 1 285 33 is_stmt 0 view .LVU363
 1442 005a 2146     		mov	r1, r4
 1443 005c 51F8080B 		ldr	r0, [r1], #8
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
ARM GAS  /tmp/ccEk3fHX.s 			page 45


 1444              		.loc 1 285 49 view .LVU364
 1445 0060 0368     		ldr	r3, [r0]
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1446              		.loc 1 285 19 view .LVU365
 1447 0062 0A22     		movs	r2, #10
 1448 0064 9847     		blx	r3
 1449              	.LVL130:
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1450              		.loc 1 285 12 view .LVU366
 1451 0066 18B9     		cbnz	r0, .L95
 1452              	.L91:
 303:Src/mc_tasks.c ****     }
 1453              		.loc 1 303 7 is_stmt 1 view .LVU367
 303:Src/mc_tasks.c ****     }
 1454              		.loc 1 303 24 is_stmt 0 view .LVU368
 1455 0068 074B     		ldr	r3, .L96+4
 1456 006a 0122     		movs	r2, #1
 1457 006c 1A80     		strh	r2, [r3]	@ movhi
 1458 006e D4E7     		b	.L90
 1459              	.L95:
 293:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 1460              		.loc 1 293 11 is_stmt 1 view .LVU369
 1461 0070 2046     		mov	r0, r4
 1462 0072 FFF7FEFF 		bl	MCP_ReceivedPacket
 1463              	.LVL131:
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1464              		.loc 1 294 11 view .LVU370
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1465              		.loc 1 294 25 is_stmt 0 view .LVU371
 1466 0076 2068     		ldr	r0, [r4]
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1467              		.loc 1 294 41 view .LVU372
 1468 0078 4568     		ldr	r5, [r0, #4]
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1469              		.loc 1 294 11 view .LVU373
 1470 007a 0A23     		movs	r3, #10
 1471 007c E289     		ldrh	r2, [r4, #14]
 1472 007e A168     		ldr	r1, [r4, #8]
 1473 0080 A847     		blx	r5
 1474              	.LVL132:
 1475 0082 F1E7     		b	.L91
 1476              	.L97:
 1477              		.align	2
 1478              	.L96:
 1479 0084 00000000 		.word	.LANCHOR2
 1480 0088 00000000 		.word	.LANCHOR7
 1481 008c 00000000 		.word	.LANCHOR5
 1482 0090 00000000 		.word	.LANCHOR6
 1483 0094 00000000 		.word	MCP_Over_UartA
 1484              		.cfi_endproc
 1485              	.LFE1625:
 1487              		.section	.text.TSK_HighFrequencyTask,"ax",%progbits
 1488              		.align	1
 1489              		.weak	TSK_HighFrequencyTask
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
ARM GAS  /tmp/ccEk3fHX.s 			page 46


 1493              		.fpu fpv4-sp-d16
 1495              	TSK_HighFrequencyTask:
 1496              	.LFB1634:
 792:Src/mc_tasks.c **** 
 793:Src/mc_tasks.c **** #if defined (CCMRAM)
 794:Src/mc_tasks.c **** #if defined (__ICCARM__)
 795:Src/mc_tasks.c **** #pragma location = ".ccmram"
 796:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 797:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 798:Src/mc_tasks.c **** #endif
 799:Src/mc_tasks.c **** #endif
 800:Src/mc_tasks.c **** 
 801:Src/mc_tasks.c **** /**
 802:Src/mc_tasks.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 803:Src/mc_tasks.c ****   *
 804:Src/mc_tasks.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 805:Src/mc_tasks.c ****   * subsystem (see the state machine(s)).
 806:Src/mc_tasks.c ****   *
 807:Src/mc_tasks.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 808:Src/mc_tasks.c ****   */
 809:Src/mc_tasks.c **** __weak uint8_t TSK_HighFrequencyTask(void)
 810:Src/mc_tasks.c **** {
 1497              		.loc 1 810 1 is_stmt 1 view -0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 48
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1502              		.cfi_def_cfa_offset 20
 1503              		.cfi_offset 4, -20
 1504              		.cfi_offset 5, -16
 1505              		.cfi_offset 6, -12
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 8DB0     		sub	sp, sp, #52
 1509              		.cfi_def_cfa_offset 72
 811:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
 812:Src/mc_tasks.c **** 
 813:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 0 */
 814:Src/mc_tasks.c **** 
 815:Src/mc_tasks.c ****   uint16_t hFOCreturn;
 1510              		.loc 1 815 3 view .LVU375
 816:Src/mc_tasks.c ****   uint8_t bMotorNbr = 0;
 1511              		.loc 1 816 3 view .LVU376
 1512              	.LVL133:
 817:Src/mc_tasks.c **** 
 818:Src/mc_tasks.c ****   Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/
 1513              		.loc 1 818 3 view .LVU377
 819:Src/mc_tasks.c ****   Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
 1514              		.loc 1 819 3 view .LVU378
 820:Src/mc_tasks.c ****   STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 1515              		.loc 1 820 3 view .LVU379
 1516              		.loc 1 820 29 is_stmt 0 view .LVU380
 1517 0004 574B     		ldr	r3, .L109
 1518 0006 1868     		ldr	r0, [r3]	@ unaligned
 1519 0008 0690     		str	r0, [sp, #24]
 821:Src/mc_tasks.c **** 
 822:Src/mc_tasks.c ****   STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
ARM GAS  /tmp/ccEk3fHX.s 			page 47


 1520              		.loc 1 822 3 is_stmt 1 view .LVU381
 1521              		.loc 1 822 25 is_stmt 0 view .LVU382
 1522 000a 0990     		str	r0, [sp, #36]
 823:Src/mc_tasks.c ****   if (SWITCH_OVER == Mci[M1].State)
 1523              		.loc 1 823 3 is_stmt 1 view .LVU383
 1524              		.loc 1 823 29 is_stmt 0 view .LVU384
 1525 000c 564B     		ldr	r3, .L109+4
 1526 000e 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 1527              		.loc 1 823 6 view .LVU385
 1528 0010 132B     		cmp	r3, #19
 1529 0012 00F08580 		beq	.L106
 1530              	.L99:
 824:Src/mc_tasks.c ****   {
 825:Src/mc_tasks.c ****     if (!REMNG_RampCompleted(pREMNG[M1]))
 826:Src/mc_tasks.c ****     {
 827:Src/mc_tasks.c ****       FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 828:Src/mc_tasks.c ****     }
 829:Src/mc_tasks.c ****   }
 830:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
 831:Src/mc_tasks.c **** 
 832:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
 833:Src/mc_tasks.c ****   hFOCreturn = FOC_CurrControllerM1();
 1531              		.loc 1 833 3 is_stmt 1 view .LVU386
 1532              	.LBB53:
 1533              	.LBI53:
 834:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */
 835:Src/mc_tasks.c **** 
 836:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
 837:Src/mc_tasks.c ****   if(hFOCreturn == MC_DURATION)
 838:Src/mc_tasks.c ****   {
 839:Src/mc_tasks.c ****     MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 840:Src/mc_tasks.c ****   }
 841:Src/mc_tasks.c ****   else
 842:Src/mc_tasks.c ****   {
 843:Src/mc_tasks.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 844:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 845:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 846:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 847:Src/mc_tasks.c ****     /*  only for sensor-less */
 848:Src/mc_tasks.c ****     if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 849:Src/mc_tasks.c ****     {
 850:Src/mc_tasks.c ****       int16_t hObsAngle = SPD_GetElAngle(&STO_CR_M1._Super);
 851:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 852:Src/mc_tasks.c ****     }
 853:Src/mc_tasks.c ****     STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 854:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 855:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 856:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 857:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 858:Src/mc_tasks.c **** 
 859:Src/mc_tasks.c ****     /* USER CODE END HighFrequencyTask SINGLEDRIVE_3 */
 860:Src/mc_tasks.c ****   }
 861:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 1 */
 862:Src/mc_tasks.c **** 
 863:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 1 */
 864:Src/mc_tasks.c **** 
 865:Src/mc_tasks.c ****   GLOBAL_TIMESTAMP++;
ARM GAS  /tmp/ccEk3fHX.s 			page 48


 866:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 867:Src/mc_tasks.c ****   {
 868:Src/mc_tasks.c ****     /* Nothing to do */
 869:Src/mc_tasks.c ****   }
 870:Src/mc_tasks.c ****   else
 871:Src/mc_tasks.c ****   {
 872:Src/mc_tasks.c ****     MCPA_dataLog (&MCPA_UART_A);
 873:Src/mc_tasks.c ****   }
 874:Src/mc_tasks.c **** 
 875:Src/mc_tasks.c ****   return (bMotorNbr);
 876:Src/mc_tasks.c **** }
 877:Src/mc_tasks.c **** 
 878:Src/mc_tasks.c **** #if defined (CCMRAM)
 879:Src/mc_tasks.c **** #if defined (__ICCARM__)
 880:Src/mc_tasks.c **** #pragma location = ".ccmram"
 881:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 882:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 883:Src/mc_tasks.c **** #endif
 884:Src/mc_tasks.c **** #endif
 885:Src/mc_tasks.c **** /**
 886:Src/mc_tasks.c ****   * @brief It executes the core of FOC drive that is the controllers for Iqd
 887:Src/mc_tasks.c ****   *        currents regulation. Reference frame transformations are carried out
 888:Src/mc_tasks.c ****   *        accordingly to the active speed sensor. It must be called periodically
 889:Src/mc_tasks.c ****   *        when new motor currents have been converted
 890:Src/mc_tasks.c ****   * @param this related object of class CFOC.
 891:Src/mc_tasks.c ****   * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
 892:Src/mc_tasks.c ****   *         next PWM Update event, MC_DURATION otherwise
 893:Src/mc_tasks.c ****   */
 894:Src/mc_tasks.c **** inline uint16_t FOC_CurrControllerM1(void)
 1534              		.loc 1 894 17 view .LVU387
 1535              	.LBB54:
 895:Src/mc_tasks.c **** {
 896:Src/mc_tasks.c ****   qd_t Iqd, Vqd;
 1536              		.loc 1 896 3 view .LVU388
 897:Src/mc_tasks.c ****   ab_t Iab;
 1537              		.loc 1 897 3 view .LVU389
 898:Src/mc_tasks.c ****   alphabeta_t Ialphabeta, Valphabeta;
 1538              		.loc 1 898 3 view .LVU390
 899:Src/mc_tasks.c ****   int16_t hElAngle;
 1539              		.loc 1 899 3 view .LVU391
 900:Src/mc_tasks.c ****   uint16_t hCodeError;
 1540              		.loc 1 900 3 view .LVU392
 901:Src/mc_tasks.c ****   SpeednPosFdbk_Handle_t *speedHandle;
 1541              		.loc 1 901 3 view .LVU393
 902:Src/mc_tasks.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1542              		.loc 1 902 3 view .LVU394
 1543              		.loc 1 902 17 is_stmt 0 view .LVU395
 1544 0016 554B     		ldr	r3, .L109+8
 1545 0018 1868     		ldr	r0, [r3]
 1546 001a FFF7FEFF 		bl	STC_GetSpeedSensor
 1547              	.LVL134:
 1548 001e 0746     		mov	r7, r0
 1549              	.LVL135:
 903:Src/mc_tasks.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1550              		.loc 1 903 3 is_stmt 1 view .LVU396
 1551              		.loc 1 903 14 is_stmt 0 view .LVU397
 1552 0020 FFF7FEFF 		bl	SPD_GetElAngle
ARM GAS  /tmp/ccEk3fHX.s 			page 49


 1553              	.LVL136:
 1554              		.loc 1 903 14 view .LVU398
 1555 0024 0546     		mov	r5, r0
 1556              	.LVL137:
 904:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 1557              		.loc 1 904 3 is_stmt 1 view .LVU399
 1558              		.loc 1 904 15 is_stmt 0 view .LVU400
 1559 0026 3846     		mov	r0, r7
 1560 0028 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 1561              	.LVL138:
 905:Src/mc_tasks.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1562              		.loc 1 905 3 is_stmt 1 view .LVU401
 1563 002c 504E     		ldr	r6, .L109+12
 1564 002e 03A9     		add	r1, sp, #12
 1565 0030 3068     		ldr	r0, [r6]
 1566 0032 FFF7FEFF 		bl	PWMC_GetPhaseCurrents
 1567              	.LVL139:
 906:Src/mc_tasks.c ****   RCM_ReadOngoingConv();
 1568              		.loc 1 906 3 view .LVU402
 1569 0036 FFF7FEFF 		bl	RCM_ReadOngoingConv
 1570              	.LVL140:
 907:Src/mc_tasks.c ****   RCM_ExecNextConv();
 1571              		.loc 1 907 3 view .LVU403
 1572 003a FFF7FEFF 		bl	RCM_ExecNextConv
 1573              	.LVL141:
 908:Src/mc_tasks.c ****   Ialphabeta = MCM_Clarke(Iab);
 1574              		.loc 1 908 3 view .LVU404
 1575              		.loc 1 908 16 is_stmt 0 view .LVU405
 1576 003e 0398     		ldr	r0, [sp, #12]
 1577 0040 FFF7FEFF 		bl	MCM_Clarke
 1578              	.LVL142:
 1579 0044 0490     		str	r0, [sp, #16]
 909:Src/mc_tasks.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1580              		.loc 1 909 3 is_stmt 1 view .LVU406
 1581              		.loc 1 909 9 is_stmt 0 view .LVU407
 1582 0046 2946     		mov	r1, r5
 1583 0048 FFF7FEFF 		bl	MCM_Park
 1584              	.LVL143:
 1585 004c 0190     		str	r0, [sp, #4]
 910:Src/mc_tasks.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1586              		.loc 1 910 3 is_stmt 1 view .LVU408
 1587              		.loc 1 910 65 is_stmt 0 view .LVU409
 1588 004e 494C     		ldr	r4, .L109+16
 1589 0050 B4F91030 		ldrsh	r3, [r4, #16]
 1590              		.loc 1 910 74 view .LVU410
 1591 0054 01B2     		sxth	r1, r0
 1592              		.loc 1 910 11 view .LVU411
 1593 0056 591A     		subs	r1, r3, r1
 1594 0058 474B     		ldr	r3, .L109+20
 1595 005a 1868     		ldr	r0, [r3]
 1596 005c FFF7FEFF 		bl	PI_Controller
 1597              	.LVL144:
 1598              		.loc 1 910 9 view .LVU412
 1599 0060 ADF80800 		strh	r0, [sp, #8]	@ movhi
 911:Src/mc_tasks.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1600              		.loc 1 911 3 is_stmt 1 view .LVU413
 1601              		.loc 1 911 65 is_stmt 0 view .LVU414
ARM GAS  /tmp/ccEk3fHX.s 			page 50


 1602 0064 B4F91210 		ldrsh	r1, [r4, #18]
 1603              		.loc 1 911 74 view .LVU415
 1604 0068 BDF90630 		ldrsh	r3, [sp, #6]
 1605              		.loc 1 911 11 view .LVU416
 1606 006c C91A     		subs	r1, r1, r3
 1607 006e 434B     		ldr	r3, .L109+24
 1608 0070 1868     		ldr	r0, [r3]
 1609 0072 FFF7FEFF 		bl	PI_Controller
 1610              	.LVL145:
 1611              		.loc 1 911 9 view .LVU417
 1612 0076 ADF80A00 		strh	r0, [sp, #10]	@ movhi
 912:Src/mc_tasks.c ****   Vqd = Circle_Limitation(pCLM[M1], Vqd);
 1613              		.loc 1 912 3 is_stmt 1 view .LVU418
 1614              		.loc 1 912 9 is_stmt 0 view .LVU419
 1615 007a 0299     		ldr	r1, [sp, #8]
 1616 007c 404B     		ldr	r3, .L109+28
 1617 007e 1868     		ldr	r0, [r3]
 1618 0080 FFF7FEFF 		bl	Circle_Limitation
 1619              	.LVL146:
 1620 0084 0290     		str	r0, [sp, #8]
 913:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1621              		.loc 1 913 3 is_stmt 1 view .LVU420
 1622              		.loc 1 913 15 is_stmt 0 view .LVU421
 1623 0086 3846     		mov	r0, r7
 1624 0088 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 1625              	.LVL147:
 914:Src/mc_tasks.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 1626              		.loc 1 914 3 is_stmt 1 view .LVU422
 1627              		.loc 1 914 16 is_stmt 0 view .LVU423
 1628 008c 2946     		mov	r1, r5
 1629 008e 0298     		ldr	r0, [sp, #8]
 1630 0090 FFF7FEFF 		bl	MCM_Rev_Park
 1631              	.LVL148:
 1632 0094 0146     		mov	r1, r0
 1633 0096 0590     		str	r0, [sp, #20]
 915:Src/mc_tasks.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1634              		.loc 1 915 3 is_stmt 1 view .LVU424
 1635              		.loc 1 915 16 is_stmt 0 view .LVU425
 1636 0098 3068     		ldr	r0, [r6]
 1637 009a FFF7FEFF 		bl	PWMC_SetPhaseVoltage
 1638              	.LVL149:
 1639 009e 0346     		mov	r3, r0
 1640              	.LVL150:
 916:Src/mc_tasks.c **** 
 917:Src/mc_tasks.c ****   FOCVars[M1].Vqd = Vqd;
 1641              		.loc 1 917 3 is_stmt 1 view .LVU426
 1642              		.loc 1 917 19 is_stmt 0 view .LVU427
 1643 00a0 0298     		ldr	r0, [sp, #8]
 1644 00a2 C4F81600 		str	r0, [r4, #22]	@ unaligned
 918:Src/mc_tasks.c ****   FOCVars[M1].Iab = Iab;
 1645              		.loc 1 918 3 is_stmt 1 view .LVU428
 1646              		.loc 1 918 19 is_stmt 0 view .LVU429
 1647 00a6 039A     		ldr	r2, [sp, #12]
 1648 00a8 2260     		str	r2, [r4]
 919:Src/mc_tasks.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 1649              		.loc 1 919 3 is_stmt 1 view .LVU430
 1650              		.loc 1 919 26 is_stmt 0 view .LVU431
ARM GAS  /tmp/ccEk3fHX.s 			page 51


 1651 00aa 049A     		ldr	r2, [sp, #16]
 1652 00ac 6260     		str	r2, [r4, #4]
 920:Src/mc_tasks.c ****   FOCVars[M1].Iqd = Iqd;
 1653              		.loc 1 920 3 is_stmt 1 view .LVU432
 1654              		.loc 1 920 19 is_stmt 0 view .LVU433
 1655 00ae 019A     		ldr	r2, [sp, #4]
 1656 00b0 E260     		str	r2, [r4, #12]
 921:Src/mc_tasks.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 1657              		.loc 1 921 3 is_stmt 1 view .LVU434
 1658              		.loc 1 921 26 is_stmt 0 view .LVU435
 1659 00b2 0598     		ldr	r0, [sp, #20]
 1660 00b4 C4F81A00 		str	r0, [r4, #26]	@ unaligned
 922:Src/mc_tasks.c ****   FOCVars[M1].hElAngle = hElAngle;
 1661              		.loc 1 922 3 is_stmt 1 view .LVU436
 1662              		.loc 1 922 24 is_stmt 0 view .LVU437
 1663 00b8 2584     		strh	r5, [r4, #32]	@ movhi
 923:Src/mc_tasks.c **** 
 924:Src/mc_tasks.c ****   return(hCodeError);
 1664              		.loc 1 924 3 is_stmt 1 view .LVU438
 1665              	.LVL151:
 1666              		.loc 1 924 3 is_stmt 0 view .LVU439
 1667              	.LBE54:
 1668              	.LBE53:
 837:Src/mc_tasks.c ****   {
 1669              		.loc 1 837 3 is_stmt 1 view .LVU440
 837:Src/mc_tasks.c ****   {
 1670              		.loc 1 837 5 is_stmt 0 view .LVU441
 1671 00ba 012B     		cmp	r3, #1
 1672 00bc 3ED0     		beq	.L107
 843:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1673              		.loc 1 843 5 is_stmt 1 view .LVU442
 843:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1674              		.loc 1 843 27 is_stmt 0 view .LVU443
 1675 00be 2D4B     		ldr	r3, .L109+16
 1676              	.LVL152:
 843:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1677              		.loc 1 843 27 view .LVU444
 1678 00c0 5B68     		ldr	r3, [r3, #4]
 1679 00c2 0A93     		str	r3, [sp, #40]
 844:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1680              		.loc 1 844 5 is_stmt 1 view .LVU445
 844:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1681              		.loc 1 844 23 is_stmt 0 view .LVU446
 1682 00c4 2F48     		ldr	r0, .L109+32
 1683 00c6 FFF7FEFF 		bl	VBS_GetAvBusVoltage_d
 1684              	.LVL153:
 844:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1685              		.loc 1 844 21 view .LVU447
 1686 00ca ADF82C00 		strh	r0, [sp, #44]	@ movhi
 845:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 1687              		.loc 1 845 5 is_stmt 1 view .LVU448
 845:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 1688              		.loc 1 845 11 is_stmt 0 view .LVU449
 1689 00ce 2E4C     		ldr	r4, .L109+36
 1690 00d0 09A9     		add	r1, sp, #36
 1691 00d2 2046     		mov	r0, r4
 1692 00d4 FFF7FEFF 		bl	STO_CR_CalcElAngle
ARM GAS  /tmp/ccEk3fHX.s 			page 52


 1693              	.LVL154:
 846:Src/mc_tasks.c ****     /*  only for sensor-less */
 1694              		.loc 1 846 5 is_stmt 1 view .LVU450
 1695 00d8 2046     		mov	r0, r4
 1696 00da FFF7FEFF 		bl	STO_CR_CalcAvrgElSpeedDpp
 1697              	.LVL155:
 848:Src/mc_tasks.c ****     {
 1698              		.loc 1 848 5 view .LVU451
 848:Src/mc_tasks.c ****     {
 1699              		.loc 1 848 35 is_stmt 0 view .LVU452
 1700 00de 224B     		ldr	r3, .L109+4
 1701 00e0 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 848:Src/mc_tasks.c ****     {
 1702              		.loc 1 848 7 view .LVU453
 1703 00e2 042B     		cmp	r3, #4
 1704 00e4 30D0     		beq	.L102
 848:Src/mc_tasks.c ****     {
 1705              		.loc 1 848 43 discriminator 1 view .LVU454
 1706 00e6 132B     		cmp	r3, #19
 1707 00e8 2ED0     		beq	.L102
 1708              	.L103:
 853:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 1709              		.loc 1 853 5 is_stmt 1 view .LVU455
 853:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 1710              		.loc 1 853 31 is_stmt 0 view .LVU456
 1711 00ea 224B     		ldr	r3, .L109+16
 1712 00ec 5B68     		ldr	r3, [r3, #4]
 1713 00ee 0793     		str	r3, [sp, #28]
 854:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1714              		.loc 1 854 5 is_stmt 1 view .LVU457
 854:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1715              		.loc 1 854 27 is_stmt 0 view .LVU458
 1716 00f0 2448     		ldr	r0, .L109+32
 1717 00f2 FFF7FEFF 		bl	VBS_GetAvBusVoltage_d
 1718              	.LVL156:
 854:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1719              		.loc 1 854 25 view .LVU459
 1720 00f6 ADF82000 		strh	r0, [sp, #32]	@ movhi
 855:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 1721              		.loc 1 855 5 is_stmt 1 view .LVU460
 855:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 1722              		.loc 1 855 19 is_stmt 0 view .LVU461
 1723 00fa 244C     		ldr	r4, .L109+40
 1724 00fc 06A9     		add	r1, sp, #24
 1725 00fe 2046     		mov	r0, r4
 1726 0100 FFF7FEFF 		bl	STO_PLL_CalcElAngle
 1727              	.LVL157:
 856:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 1728              		.loc 1 856 2 is_stmt 1 view .LVU462
 1729 0104 2046     		mov	r0, r4
 1730 0106 FFF7FEFF 		bl	STO_PLL_CalcAvrgElSpeedDpp
 1731              	.LVL158:
 1732              	.L101:
 865:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1733              		.loc 1 865 3 view .LVU463
 865:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1734              		.loc 1 865 19 is_stmt 0 view .LVU464
ARM GAS  /tmp/ccEk3fHX.s 			page 53


 1735 010a 214A     		ldr	r2, .L109+44
 1736 010c 1368     		ldr	r3, [r2]
 1737 010e 0133     		adds	r3, r3, #1
 1738 0110 1360     		str	r3, [r2]
 866:Src/mc_tasks.c ****   {
 1739              		.loc 1 866 3 is_stmt 1 view .LVU465
 866:Src/mc_tasks.c ****   {
 1740              		.loc 1 866 24 is_stmt 0 view .LVU466
 1741 0112 204B     		ldr	r3, .L109+48
 1742 0114 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 866:Src/mc_tasks.c ****   {
 1743              		.loc 1 866 6 view .LVU467
 1744 0118 03BB     		cbnz	r3, .L108
 1745              	.L104:
 875:Src/mc_tasks.c **** }
 1746              		.loc 1 875 3 is_stmt 1 view .LVU468
 876:Src/mc_tasks.c **** 
 1747              		.loc 1 876 1 is_stmt 0 view .LVU469
 1748 011a 0020     		movs	r0, #0
 1749 011c 0DB0     		add	sp, sp, #52
 1750              		.cfi_remember_state
 1751              		.cfi_def_cfa_offset 20
 1752              		@ sp needed
 1753 011e F0BD     		pop	{r4, r5, r6, r7, pc}
 1754              	.L106:
 1755              		.cfi_restore_state
 825:Src/mc_tasks.c ****     {
 1756              		.loc 1 825 5 is_stmt 1 view .LVU470
 825:Src/mc_tasks.c ****     {
 1757              		.loc 1 825 10 is_stmt 0 view .LVU471
 1758 0120 1D4B     		ldr	r3, .L109+52
 1759 0122 1868     		ldr	r0, [r3]
 1760 0124 FFF7FEFF 		bl	REMNG_RampCompleted
 1761              	.LVL159:
 825:Src/mc_tasks.c ****     {
 1762              		.loc 1 825 8 view .LVU472
 1763 0128 0028     		cmp	r0, #0
 1764 012a 7FF474AF 		bne	.L99
 827:Src/mc_tasks.c ****     }
 1765              		.loc 1 827 7 is_stmt 1 view .LVU473
 827:Src/mc_tasks.c ****     }
 1766              		.loc 1 827 39 is_stmt 0 view .LVU474
 1767 012e 1A4B     		ldr	r3, .L109+52
 1768 0130 1868     		ldr	r0, [r3]
 1769 0132 FFF7FEFF 		bl	REMNG_Calc
 1770              	.LVL160:
 827:Src/mc_tasks.c ****     }
 1771              		.loc 1 827 28 view .LVU475
 1772 0136 0F4B     		ldr	r3, .L109+16
 1773 0138 1882     		strh	r0, [r3, #16]	@ movhi
 1774 013a 6CE7     		b	.L99
 1775              	.LVL161:
 1776              	.L107:
 839:Src/mc_tasks.c ****   }
 1777              		.loc 1 839 5 is_stmt 1 view .LVU476
 1778 013c 0022     		movs	r2, #0
 1779 013e 0121     		movs	r1, #1
ARM GAS  /tmp/ccEk3fHX.s 			page 54


 1780 0140 0948     		ldr	r0, .L109+4
 1781 0142 FFF7FEFF 		bl	MCI_FaultProcessing
 1782              	.LVL162:
 839:Src/mc_tasks.c ****   }
 1783              		.loc 1 839 5 is_stmt 0 view .LVU477
 1784 0146 E0E7     		b	.L101
 1785              	.L102:
 1786              	.LBB55:
 850:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1787              		.loc 1 850 7 is_stmt 1 view .LVU478
 850:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1788              		.loc 1 850 27 is_stmt 0 view .LVU479
 1789 0148 0F48     		ldr	r0, .L109+36
 1790 014a FFF7FEFF 		bl	SPD_GetElAngle
 1791              	.LVL163:
 850:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1792              		.loc 1 850 15 view .LVU480
 1793 014e ADF81400 		strh	r0, [sp, #20]	@ movhi
 851:Src/mc_tasks.c ****     }
 1794              		.loc 1 851 7 is_stmt 1 view .LVU481
 851:Src/mc_tasks.c ****     }
 1795              		.loc 1 851 13 is_stmt 0 view .LVU482
 1796 0152 05A9     		add	r1, sp, #20
 1797 0154 1148     		ldr	r0, .L109+56
 1798 0156 FFF7FEFF 		bl	VSS_CalcElAngle
 1799              	.LVL164:
 1800 015a C6E7     		b	.L103
 1801              	.L108:
 1802              	.LBE55:
 872:Src/mc_tasks.c ****   }
 1803              		.loc 1 872 5 is_stmt 1 view .LVU483
 1804 015c 0D48     		ldr	r0, .L109+48
 1805 015e FFF7FEFF 		bl	MCPA_dataLog
 1806              	.LVL165:
 1807 0162 DAE7     		b	.L104
 1808              	.L110:
 1809              		.align	2
 1810              	.L109:
 1811 0164 1A000000 		.word	.LANCHOR0+26
 1812 0168 00000000 		.word	Mci
 1813 016c 00000000 		.word	pSTC
 1814 0170 00000000 		.word	.LANCHOR1
 1815 0174 00000000 		.word	.LANCHOR0
 1816 0178 00000000 		.word	pPIDIq
 1817 017c 00000000 		.word	pPIDId
 1818 0180 00000000 		.word	.LANCHOR3
 1819 0184 00000000 		.word	BusVoltageSensor_M1
 1820 0188 00000000 		.word	STO_CR_M1
 1821 018c 00000000 		.word	STO_PLL_M1
 1822 0190 00000000 		.word	GLOBAL_TIMESTAMP
 1823 0194 00000000 		.word	MCPA_UART_A
 1824 0198 00000000 		.word	.LANCHOR4
 1825 019c 00000000 		.word	VirtualSpeedSensorM1
 1826              		.cfi_endproc
 1827              	.LFE1634:
 1829              		.section	.text.TSK_SafetyTask_PWMOFF,"ax",%progbits
 1830              		.align	1
ARM GAS  /tmp/ccEk3fHX.s 			page 55


 1831              		.weak	TSK_SafetyTask_PWMOFF
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	TSK_SafetyTask_PWMOFF:
 1838              	.LVL166:
 1839              	.LFB1637:
 925:Src/mc_tasks.c **** }
 926:Src/mc_tasks.c **** 
 927:Src/mc_tasks.c **** /**
 928:Src/mc_tasks.c ****   * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
 929:Src/mc_tasks.c ****   *
 930:Src/mc_tasks.c ****   * Faults flags are updated here.
 931:Src/mc_tasks.c ****   */
 932:Src/mc_tasks.c **** __weak void TSK_SafetyTask(void)
 933:Src/mc_tasks.c **** {
 934:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 935:Src/mc_tasks.c **** 
 936:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 0 */
 937:Src/mc_tasks.c ****   if (1U == bMCBootCompleted)
 938:Src/mc_tasks.c ****   {
 939:Src/mc_tasks.c ****     TSK_SafetyTask_PWMOFF(M1);
 940:Src/mc_tasks.c ****     /* User conversion execution */
 941:Src/mc_tasks.c ****     RCM_ExecUserConv();
 942:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 943:Src/mc_tasks.c **** 
 944:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 1 */
 945:Src/mc_tasks.c ****   }
 946:Src/mc_tasks.c **** }
 947:Src/mc_tasks.c **** 
 948:Src/mc_tasks.c **** /**
 949:Src/mc_tasks.c ****   * @brief  Safety task implementation if  MC.ON_OVER_VOLTAGE == TURN_OFF_PWM
 950:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 951:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink
 952:Src/mc_tasks.c ****   * @retval None
 953:Src/mc_tasks.c ****   */
 954:Src/mc_tasks.c **** __weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
 955:Src/mc_tasks.c **** {
 1840              		.loc 1 955 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
 1844              		.loc 1 955 1 is_stmt 0 view .LVU485
 1845 0000 70B5     		push	{r4, r5, r6, lr}
 1846              		.cfi_def_cfa_offset 16
 1847              		.cfi_offset 4, -16
 1848              		.cfi_offset 5, -12
 1849              		.cfi_offset 6, -8
 1850              		.cfi_offset 14, -4
 1851 0002 0546     		mov	r5, r0
 956:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */
 957:Src/mc_tasks.c **** 
 958:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
 959:Src/mc_tasks.c ****   uint16_t CodeReturn = MC_NO_ERROR;
 1852              		.loc 1 959 3 is_stmt 1 view .LVU486
 1853              	.LVL167:
ARM GAS  /tmp/ccEk3fHX.s 			page 56


 960:Src/mc_tasks.c ****   uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 1854              		.loc 1 960 3 view .LVU487
 961:Src/mc_tasks.c **** 
 962:Src/mc_tasks.c ****   CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if
 1855              		.loc 1 962 3 view .LVU488
 1856              		.loc 1 962 35 is_stmt 0 view .LVU489
 1857 0004 1D4B     		ldr	r3, .L119
 1858 0006 53F82000 		ldr	r0, [r3, r0, lsl #2]
 1859              	.LVL168:
 1860              		.loc 1 962 35 view .LVU490
 1861 000a FFF7FEFF 		bl	NTC_CalcAvTemp
 1862              	.LVL169:
 1863              		.loc 1 962 33 view .LVU491
 1864 000e 00F00E04 		and	r4, r0, #14
 1865              	.LVL170:
 963:Src/mc_tasks.c ****   CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. I
 1866              		.loc 1 963 3 is_stmt 1 view .LVU492
 1867              		.loc 1 963 17 is_stmt 0 view .LVU493
 1868 0012 1B4B     		ldr	r3, .L119+4
 1869 0014 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1870 0018 FFF7FEFF 		bl	PWMC_CheckOverCurrent
 1871              	.LVL171:
 1872              		.loc 1 963 14 view .LVU494
 1873 001c 0443     		orrs	r4, r4, r0
 1874              	.LVL172:
 1875              		.loc 1 963 14 view .LVU495
 1876 001e A4B2     		uxth	r4, r4
 1877              	.LVL173:
 964:Src/mc_tasks.c ****                                                                                  (for STM32F30x can
 965:Src/mc_tasks.c ****   if(M1 == bMotor)
 1878              		.loc 1 965 3 is_stmt 1 view .LVU496
 1879              		.loc 1 965 5 is_stmt 0 view .LVU497
 1880 0020 7DB1     		cbz	r5, .L116
 1881              	.L112:
 966:Src/mc_tasks.c ****   {
 967:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 968:Src/mc_tasks.c ****   }
 969:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 1882              		.loc 1 969 3 is_stmt 1 view .LVU498
 1883 0022 05EBC506 		add	r6, r5, r5, lsl #3
 1884 0026 174B     		ldr	r3, .L119+8
 1885 0028 03EB8606 		add	r6, r3, r6, lsl #2
 1886 002c E243     		mvns	r2, r4
 1887 002e 92B2     		uxth	r2, r2
 1888 0030 2146     		mov	r1, r4
 1889 0032 3046     		mov	r0, r6
 1890 0034 FFF7FEFF 		bl	MCI_FaultProcessing
 1891              	.LVL174:
 970:Src/mc_tasks.c ****   if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 1892              		.loc 1 970 3 view .LVU499
 1893              		.loc 1 970 7 is_stmt 0 view .LVU500
 1894 0038 3046     		mov	r0, r6
 1895 003a FFF7FEFF 		bl	MCI_GetFaultState
 1896              	.LVL175:
 1897              		.loc 1 970 6 view .LVU501
 1898 003e 38B9     		cbnz	r0, .L117
 1899              	.L111:
ARM GAS  /tmp/ccEk3fHX.s 			page 57


 971:Src/mc_tasks.c ****   {
 972:Src/mc_tasks.c ****     PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 973:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0)
 974:Src/mc_tasks.c ****     {
 975:Src/mc_tasks.c ****       MCPA_flushDataLog (&MCPA_UART_A);
 976:Src/mc_tasks.c ****     }
 977:Src/mc_tasks.c ****     FOC_Clear(bMotor);
 978:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 979:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 980:Src/mc_tasks.c **** 
 981:Src/mc_tasks.c ****     /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
 982:Src/mc_tasks.c ****   }
 983:Src/mc_tasks.c ****   else
 984:Src/mc_tasks.c ****   {
 985:Src/mc_tasks.c ****     /* no errors */
 986:Src/mc_tasks.c ****   }
 987:Src/mc_tasks.c **** 
 988:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */
 989:Src/mc_tasks.c **** 
 990:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
 991:Src/mc_tasks.c **** }
 1900              		.loc 1 991 1 view .LVU502
 1901 0040 70BD     		pop	{r4, r5, r6, pc}
 1902              	.LVL176:
 1903              	.L116:
 967:Src/mc_tasks.c ****   }
 1904              		.loc 1 967 5 is_stmt 1 view .LVU503
 967:Src/mc_tasks.c ****   }
 1905              		.loc 1 967 37 is_stmt 0 view .LVU504
 1906 0042 1148     		ldr	r0, .L119+12
 1907 0044 FFF7FEFF 		bl	RVBS_CalcAvVbus
 1908              	.LVL177:
 967:Src/mc_tasks.c ****   }
 1909              		.loc 1 967 35 view .LVU505
 1910 0048 00F00E00 		and	r0, r0, #14
 967:Src/mc_tasks.c ****   }
 1911              		.loc 1 967 16 view .LVU506
 1912 004c 0443     		orrs	r4, r4, r0
 1913              	.LVL178:
 967:Src/mc_tasks.c ****   }
 1914              		.loc 1 967 16 view .LVU507
 1915 004e E8E7     		b	.L112
 1916              	.L117:
 972:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0)
 1917              		.loc 1 972 5 is_stmt 1 view .LVU508
 1918 0050 0B4B     		ldr	r3, .L119+4
 1919 0052 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1920 0056 FFF7FEFF 		bl	PWMC_SwitchOffPWM
 1921              	.LVL179:
 973:Src/mc_tasks.c ****     {
 1922              		.loc 1 973 5 view .LVU509
 973:Src/mc_tasks.c ****     {
 1923              		.loc 1 973 20 is_stmt 0 view .LVU510
 1924 005a 0C4B     		ldr	r3, .L119+16
 1925 005c 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 973:Src/mc_tasks.c ****     {
 1926              		.loc 1 973 8 view .LVU511
ARM GAS  /tmp/ccEk3fHX.s 			page 58


 1927 0060 43B9     		cbnz	r3, .L118
 1928              	.L114:
 977:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 1929              		.loc 1 977 5 is_stmt 1 view .LVU512
 1930 0062 2846     		mov	r0, r5
 1931 0064 FFF7FEFF 		bl	FOC_Clear
 1932              	.LVL180:
 978:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 1933              		.loc 1 978 5 view .LVU513
 1934 0068 094B     		ldr	r3, .L119+20
 1935 006a 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1936 006e FFF7FEFF 		bl	PQD_Clear
 1937              	.LVL181:
 986:Src/mc_tasks.c **** 
 1938              		.loc 1 986 3 view .LVU514
 1939              		.loc 1 991 1 is_stmt 0 view .LVU515
 1940 0072 E5E7     		b	.L111
 1941              	.L118:
 975:Src/mc_tasks.c ****     }
 1942              		.loc 1 975 7 is_stmt 1 view .LVU516
 1943 0074 0548     		ldr	r0, .L119+16
 1944 0076 FFF7FEFF 		bl	MCPA_flushDataLog
 1945              	.LVL182:
 1946 007a F2E7     		b	.L114
 1947              	.L120:
 1948              		.align	2
 1949              	.L119:
 1950 007c 00000000 		.word	pTemperatureSensor
 1951 0080 00000000 		.word	.LANCHOR1
 1952 0084 00000000 		.word	Mci
 1953 0088 00000000 		.word	BusVoltageSensor_M1
 1954 008c 00000000 		.word	MCPA_UART_A
 1955 0090 00000000 		.word	pMPM
 1956              		.cfi_endproc
 1957              	.LFE1637:
 1959              		.section	.text.TSK_SafetyTask,"ax",%progbits
 1960              		.align	1
 1961              		.weak	TSK_SafetyTask
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	TSK_SafetyTask:
 1968              	.LFB1636:
 933:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 1969              		.loc 1 933 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973 0000 08B5     		push	{r3, lr}
 1974              		.cfi_def_cfa_offset 8
 1975              		.cfi_offset 3, -8
 1976              		.cfi_offset 14, -4
 937:Src/mc_tasks.c ****   {
 1977              		.loc 1 937 3 view .LVU518
 937:Src/mc_tasks.c ****   {
 1978              		.loc 1 937 10 is_stmt 0 view .LVU519
ARM GAS  /tmp/ccEk3fHX.s 			page 59


 1979 0002 064B     		ldr	r3, .L125
 1980 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1981 0006 DBB2     		uxtb	r3, r3
 937:Src/mc_tasks.c ****   {
 1982              		.loc 1 937 6 view .LVU520
 1983 0008 012B     		cmp	r3, #1
 1984 000a 00D0     		beq	.L124
 1985              	.L121:
 946:Src/mc_tasks.c **** 
 1986              		.loc 1 946 1 view .LVU521
 1987 000c 08BD     		pop	{r3, pc}
 1988              	.L124:
 939:Src/mc_tasks.c ****     /* User conversion execution */
 1989              		.loc 1 939 5 is_stmt 1 view .LVU522
 1990 000e 0020     		movs	r0, #0
 1991 0010 FFF7FEFF 		bl	TSK_SafetyTask_PWMOFF
 1992              	.LVL183:
 941:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 1993              		.loc 1 941 5 view .LVU523
 1994 0014 FFF7FEFF 		bl	RCM_ExecUserConv
 1995              	.LVL184:
 946:Src/mc_tasks.c **** 
 1996              		.loc 1 946 1 is_stmt 0 view .LVU524
 1997 0018 F8E7     		b	.L121
 1998              	.L126:
 1999 001a 00BF     		.align	2
 2000              	.L125:
 2001 001c 00000000 		.word	.LANCHOR2
 2002              		.cfi_endproc
 2003              	.LFE1636:
 2005              		.section	.text.MC_RunMotorControlTasks,"ax",%progbits
 2006              		.align	1
 2007              		.weak	MC_RunMotorControlTasks
 2008              		.syntax unified
 2009              		.thumb
 2010              		.thumb_func
 2011              		.fpu fpv4-sp-d16
 2013              	MC_RunMotorControlTasks:
 2014              	.LFB1623:
 223:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 2015              		.loc 1 223 1 is_stmt 1 view -0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019 0000 08B5     		push	{r3, lr}
 2020              		.cfi_def_cfa_offset 8
 2021              		.cfi_offset 3, -8
 2022              		.cfi_offset 14, -4
 224:Src/mc_tasks.c ****   {
 2023              		.loc 1 224 3 view .LVU526
 224:Src/mc_tasks.c ****   {
 2024              		.loc 1 224 10 is_stmt 0 view .LVU527
 2025 0002 044B     		ldr	r3, .L131
 2026 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224:Src/mc_tasks.c ****   {
 2027              		.loc 1 224 6 view .LVU528
 2028 0006 03B9     		cbnz	r3, .L130
ARM GAS  /tmp/ccEk3fHX.s 			page 60


 2029              	.L127:
 238:Src/mc_tasks.c **** 
 2030              		.loc 1 238 1 view .LVU529
 2031 0008 08BD     		pop	{r3, pc}
 2032              	.L130:
 231:Src/mc_tasks.c **** 
 2033              		.loc 1 231 5 is_stmt 1 view .LVU530
 2034 000a FFF7FEFF 		bl	MC_Scheduler
 2035              	.LVL185:
 235:Src/mc_tasks.c **** 
 2036              		.loc 1 235 5 view .LVU531
 2037 000e FFF7FEFF 		bl	TSK_SafetyTask
 2038              	.LVL186:
 238:Src/mc_tasks.c **** 
 2039              		.loc 1 238 1 is_stmt 0 view .LVU532
 2040 0012 F9E7     		b	.L127
 2041              	.L132:
 2042              		.align	2
 2043              	.L131:
 2044 0014 00000000 		.word	.LANCHOR2
 2045              		.cfi_endproc
 2046              	.LFE1623:
 2048              		.section	.text.GetMCI,"ax",%progbits
 2049              		.align	1
 2050              		.weak	GetMCI
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2054              		.fpu fpv4-sp-d16
 2056              	GetMCI:
 2057              	.LVL187:
 2058              	.LFB1638:
 992:Src/mc_tasks.c **** 
 993:Src/mc_tasks.c **** /**
 994:Src/mc_tasks.c ****   * @brief  This function returns the reference of the MCInterface relative to
 995:Src/mc_tasks.c ****   *         the selected drive.
 996:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 997:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink
 998:Src/mc_tasks.c ****   * @retval MCI_Handle_t * Reference to MCInterface relative to the selected drive.
 999:Src/mc_tasks.c ****   *         Note: it can be MC_NULL if MCInterface of selected drive is not
1000:Src/mc_tasks.c ****   *         allocated.
1001:Src/mc_tasks.c ****   */
1002:Src/mc_tasks.c **** __weak MCI_Handle_t * GetMCI(uint8_t bMotor)
1003:Src/mc_tasks.c **** {
 2059              		.loc 1 1003 1 is_stmt 1 view -0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 0
 2062              		@ frame_needed = 0, uses_anonymous_args = 0
 2063              		@ link register save eliminated.
1004:Src/mc_tasks.c ****   MCI_Handle_t * retVal = MC_NULL;
 2064              		.loc 1 1004 3 view .LVU534
1005:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2065              		.loc 1 1005 3 view .LVU535
 2066              		.loc 1 1005 6 is_stmt 0 view .LVU536
 2067 0000 28B9     		cbnz	r0, .L135
1006:Src/mc_tasks.c ****   {
1007:Src/mc_tasks.c ****     retVal = &Mci[bMotor];
ARM GAS  /tmp/ccEk3fHX.s 			page 61


 2068              		.loc 1 1007 5 is_stmt 1 view .LVU537
 2069              		.loc 1 1007 12 is_stmt 0 view .LVU538
 2070 0002 00EBC003 		add	r3, r0, r0, lsl #3
 2071 0006 0348     		ldr	r0, .L136
 2072              	.LVL188:
 2073              		.loc 1 1007 12 view .LVU539
 2074 0008 00EB8300 		add	r0, r0, r3, lsl #2
 2075              	.LVL189:
 2076              		.loc 1 1007 12 view .LVU540
 2077 000c 7047     		bx	lr
 2078              	.LVL190:
 2079              	.L135:
1004:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2080              		.loc 1 1004 18 view .LVU541
 2081 000e 0020     		movs	r0, #0
 2082              	.LVL191:
1008:Src/mc_tasks.c ****   }
1009:Src/mc_tasks.c ****   return (retVal);
 2083              		.loc 1 1009 3 is_stmt 1 view .LVU542
1010:Src/mc_tasks.c **** }
 2084              		.loc 1 1010 1 is_stmt 0 view .LVU543
 2085 0010 7047     		bx	lr
 2086              	.L137:
 2087 0012 00BF     		.align	2
 2088              	.L136:
 2089 0014 00000000 		.word	Mci
 2090              		.cfi_endproc
 2091              	.LFE1638:
 2093              		.section	.text.TSK_HardwareFaultTask,"ax",%progbits
 2094              		.align	1
 2095              		.weak	TSK_HardwareFaultTask
 2096              		.syntax unified
 2097              		.thumb
 2098              		.thumb_func
 2099              		.fpu fpv4-sp-d16
 2101              	TSK_HardwareFaultTask:
 2102              	.LFB1639:
1011:Src/mc_tasks.c **** 
1012:Src/mc_tasks.c **** /**
1013:Src/mc_tasks.c ****   * @brief  Puts the Motor Control subsystem in in safety conditions on a Hard Fault
1014:Src/mc_tasks.c ****   *
1015:Src/mc_tasks.c ****   *  This function is to be executed when a general hardware failure has been detected
1016:Src/mc_tasks.c ****   * by the microcontroller and is used to put the system in safety condition.
1017:Src/mc_tasks.c ****   */
1018:Src/mc_tasks.c **** __weak void TSK_HardwareFaultTask(void)
1019:Src/mc_tasks.c **** {
 2103              		.loc 1 1019 1 is_stmt 1 view -0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107 0000 08B5     		push	{r3, lr}
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 3, -8
 2110              		.cfi_offset 14, -4
1020:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 0 */
1021:Src/mc_tasks.c **** 
1022:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 0 */
ARM GAS  /tmp/ccEk3fHX.s 			page 62


1023:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[M1]);
 2111              		.loc 1 1023 3 view .LVU545
 2112 0002 054B     		ldr	r3, .L140
 2113 0004 1868     		ldr	r0, [r3]
 2114 0006 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 2115              	.LVL192:
1024:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 2116              		.loc 1 1024 3 view .LVU546
 2117 000a 0022     		movs	r2, #0
 2118 000c 8021     		movs	r1, #128
 2119 000e 0348     		ldr	r0, .L140+4
 2120 0010 FFF7FEFF 		bl	MCI_FaultProcessing
 2121              	.LVL193:
1025:Src/mc_tasks.c **** 
1026:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 1 */
1027:Src/mc_tasks.c **** 
1028:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 1 */
1029:Src/mc_tasks.c **** }
 2122              		.loc 1 1029 1 is_stmt 0 view .LVU547
 2123 0014 08BD     		pop	{r3, pc}
 2124              	.L141:
 2125 0016 00BF     		.align	2
 2126              	.L140:
 2127 0018 00000000 		.word	.LANCHOR1
 2128 001c 00000000 		.word	Mci
 2129              		.cfi_endproc
 2130              	.LFE1639:
 2132              		.section	.text.UI_HandleStartStopButton_cb,"ax",%progbits
 2133              		.align	1
 2134              		.weak	UI_HandleStartStopButton_cb
 2135              		.syntax unified
 2136              		.thumb
 2137              		.thumb_func
 2138              		.fpu fpv4-sp-d16
 2140              	UI_HandleStartStopButton_cb:
 2141              	.LFB1640:
1030:Src/mc_tasks.c **** 
1031:Src/mc_tasks.c **** __weak void UI_HandleStartStopButton_cb (void)
1032:Src/mc_tasks.c **** {
 2142              		.loc 1 1032 1 is_stmt 1 view -0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 0
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146 0000 08B5     		push	{r3, lr}
 2147              		.cfi_def_cfa_offset 8
 2148              		.cfi_offset 3, -8
 2149              		.cfi_offset 14, -4
1033:Src/mc_tasks.c **** /* USER CODE BEGIN START_STOP_BTN */
1034:Src/mc_tasks.c ****   if (IDLE == MC_GetSTMStateMotor1())
 2150              		.loc 1 1034 3 view .LVU549
 2151              		.loc 1 1034 15 is_stmt 0 view .LVU550
 2152 0002 FFF7FEFF 		bl	MC_GetSTMStateMotor1
 2153              	.LVL194:
 2154              		.loc 1 1034 6 view .LVU551
 2155 0006 10B9     		cbnz	r0, .L143
1035:Src/mc_tasks.c ****   {
1036:Src/mc_tasks.c ****     /* Ramp parameters should be tuned for the actual motor */
ARM GAS  /tmp/ccEk3fHX.s 			page 63


1037:Src/mc_tasks.c ****     (void)MC_StartMotor1();
 2156              		.loc 1 1037 5 is_stmt 1 view .LVU552
 2157              		.loc 1 1037 11 is_stmt 0 view .LVU553
 2158 0008 FFF7FEFF 		bl	MC_StartMotor1
 2159              	.LVL195:
 2160              	.L142:
1038:Src/mc_tasks.c ****   }
1039:Src/mc_tasks.c ****   else
1040:Src/mc_tasks.c ****   {
1041:Src/mc_tasks.c ****     (void)MC_StopMotor1();
1042:Src/mc_tasks.c ****   }
1043:Src/mc_tasks.c **** /* USER CODE END START_STOP_BTN */
1044:Src/mc_tasks.c **** }
 2161              		.loc 1 1044 1 view .LVU554
 2162 000c 08BD     		pop	{r3, pc}
 2163              	.L143:
1041:Src/mc_tasks.c ****   }
 2164              		.loc 1 1041 5 is_stmt 1 view .LVU555
1041:Src/mc_tasks.c ****   }
 2165              		.loc 1 1041 11 is_stmt 0 view .LVU556
 2166 000e FFF7FEFF 		bl	MC_StopMotor1
 2167              	.LVL196:
 2168              		.loc 1 1044 1 view .LVU557
 2169 0012 FBE7     		b	.L142
 2170              		.cfi_endproc
 2171              	.LFE1640:
 2173              		.section	.text.mc_lock_pins,"ax",%progbits
 2174              		.align	1
 2175              		.weak	mc_lock_pins
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu fpv4-sp-d16
 2181              	mc_lock_pins:
 2182              	.LFB1641:
1045:Src/mc_tasks.c **** 
1046:Src/mc_tasks.c ****  /**
1047:Src/mc_tasks.c ****   * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
1048:Src/mc_tasks.c ****   */
1049:Src/mc_tasks.c **** __weak void mc_lock_pins (void)
1050:Src/mc_tasks.c **** {
 2183              		.loc 1 1050 1 is_stmt 1 view -0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 80
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2188              		.cfi_def_cfa_offset 24
 2189              		.cfi_offset 4, -24
 2190              		.cfi_offset 5, -20
 2191              		.cfi_offset 6, -16
 2192              		.cfi_offset 7, -12
 2193              		.cfi_offset 8, -8
 2194              		.cfi_offset 14, -4
 2195 0004 94B0     		sub	sp, sp, #80
 2196              		.cfi_def_cfa_offset 104
1051:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP3_INT_GAIN_GPIO_Port, M1_OPAMP3_INT_GAIN_Pin);
 2197              		.loc 1 1051 1 view .LVU559
ARM GAS  /tmp/ccEk3fHX.s 			page 64


 2198              	.LVL197:
 2199              	.LBB56:
 2200              	.LBI56:
 2201              		.file 2 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @file    stm32g4xx_ll_gpio.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifndef STM32G4xx_LL_GPIO_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define STM32G4xx_LL_GPIO_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
ARM GAS  /tmp/ccEk3fHX.s 			page 65


  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
ARM GAS  /tmp/ccEk3fHX.s 			page 66


 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
ARM GAS  /tmp/ccEk3fHX.s 			page 67


 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
ARM GAS  /tmp/ccEk3fHX.s 			page 68


 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
ARM GAS  /tmp/ccEk3fHX.s 			page 69


 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
ARM GAS  /tmp/ccEk3fHX.s 			page 70


 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
ARM GAS  /tmp/ccEk3fHX.s 			page 71


 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
ARM GAS  /tmp/ccEk3fHX.s 			page 72


 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
ARM GAS  /tmp/ccEk3fHX.s 			page 73


 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
ARM GAS  /tmp/ccEk3fHX.s 			page 74


 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
ARM GAS  /tmp/ccEk3fHX.s 			page 75


 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
ARM GAS  /tmp/ccEk3fHX.s 			page 76


 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         next reset.
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         (control and alternate function registers).
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 2202              		.loc 2 719 22 view .LVU560
 2203              	.LBB57:
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   __IO uint32_t temp;
 2204              		.loc 2 721 3 view .LVU561
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2205              		.loc 2 722 3 view .LVU562
 2206 0006 594A     		ldr	r2, .L148
 2207 0008 5948     		ldr	r0, .L148+4
 2208 000a D061     		str	r0, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2209              		.loc 2 723 3 view .LVU563
 2210 000c 0427     		movs	r7, #4
 2211 000e D761     		str	r7, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2212              		.loc 2 724 3 view .LVU564
 2213 0010 D061     		str	r0, [r2, #28]
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
ARM GAS  /tmp/ccEk3fHX.s 			page 77


 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
 2214              		.loc 2 726 3 view .LVU565
 2215              		.loc 2 726 10 is_stmt 0 view .LVU566
 2216 0012 D369     		ldr	r3, [r2, #28]
 2217              		.loc 2 726 8 view .LVU567
 2218 0014 1393     		str	r3, [sp, #76]
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2219              		.loc 2 727 3 is_stmt 1 view .LVU568
 2220 0016 139B     		ldr	r3, [sp, #76]
 2221              	.LVL198:
 2222              		.loc 2 727 3 is_stmt 0 view .LVU569
 2223              	.LBE57:
 2224              	.LBE56:
1052:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 2225              		.loc 1 1052 1 is_stmt 1 view .LVU570
 2226              	.LBB58:
 2227              	.LBI58:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2228              		.loc 2 719 22 view .LVU571
 2229              	.LBB59:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2230              		.loc 2 721 3 view .LVU572
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2231              		.loc 2 722 3 view .LVU573
 2232 0018 4FF00115 		mov	r5, #65537
 2233 001c D561     		str	r5, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2234              		.loc 2 723 3 view .LVU574
 2235 001e 4FF0010E 		mov	lr, #1
 2236 0022 C2F81CE0 		str	lr, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2237              		.loc 2 724 3 view .LVU575
 2238 0026 D561     		str	r5, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2239              		.loc 2 726 3 view .LVU576
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2240              		.loc 2 726 10 is_stmt 0 view .LVU577
 2241 0028 D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2242              		.loc 2 726 8 view .LVU578
 2243 002a 1293     		str	r3, [sp, #72]
 2244              		.loc 2 727 3 is_stmt 1 view .LVU579
 2245 002c 129B     		ldr	r3, [sp, #72]
 2246              	.LVL199:
 2247              		.loc 2 727 3 is_stmt 0 view .LVU580
 2248              	.LBE59:
 2249              	.LBE58:
1053:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP3_OUT_GPIO_Port, M1_OPAMP3_OUT_Pin);
 2250              		.loc 1 1053 1 is_stmt 1 view .LVU581
 2251              	.LBB60:
 2252              	.LBI60:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2253              		.loc 2 719 22 view .LVU582
 2254              	.LBB61:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2255              		.loc 2 721 3 view .LVU583
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
ARM GAS  /tmp/ccEk3fHX.s 			page 78


 2256              		.loc 2 722 3 view .LVU584
 2257 002e 514C     		ldr	r4, .L148+8
 2258 0030 D461     		str	r4, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2259              		.loc 2 723 3 view .LVU585
 2260 0032 4FF0020C 		mov	ip, #2
 2261 0036 C2F81CC0 		str	ip, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2262              		.loc 2 724 3 view .LVU586
 2263 003a D461     		str	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2264              		.loc 2 726 3 view .LVU587
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2265              		.loc 2 726 10 is_stmt 0 view .LVU588
 2266 003c D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2267              		.loc 2 726 8 view .LVU589
 2268 003e 1193     		str	r3, [sp, #68]
 2269              		.loc 2 727 3 is_stmt 1 view .LVU590
 2270 0040 119B     		ldr	r3, [sp, #68]
 2271              	.LVL200:
 2272              		.loc 2 727 3 is_stmt 0 view .LVU591
 2273              	.LBE61:
 2274              	.LBE60:
1054:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_I_GPIO_Port, M1_ENCODER_I_Pin);
 2275              		.loc 1 1054 1 is_stmt 1 view .LVU592
 2276              	.LBB62:
 2277              	.LBI62:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2278              		.loc 2 719 22 view .LVU593
 2279              	.LBB63:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2280              		.loc 2 721 3 view .LVU594
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2281              		.loc 2 722 3 view .LVU595
 2282 0042 4D49     		ldr	r1, .L148+12
 2283 0044 D161     		str	r1, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2284              		.loc 2 723 3 view .LVU596
 2285 0046 4FF48076 		mov	r6, #256
 2286 004a D661     		str	r6, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2287              		.loc 2 724 3 view .LVU597
 2288 004c D161     		str	r1, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2289              		.loc 2 726 3 view .LVU598
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2290              		.loc 2 726 10 is_stmt 0 view .LVU599
 2291 004e D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2292              		.loc 2 726 8 view .LVU600
 2293 0050 1093     		str	r3, [sp, #64]
 2294              		.loc 2 727 3 is_stmt 1 view .LVU601
 2295 0052 109B     		ldr	r3, [sp, #64]
 2296              	.LVL201:
 2297              		.loc 2 727 3 is_stmt 0 view .LVU602
 2298              	.LBE63:
ARM GAS  /tmp/ccEk3fHX.s 			page 79


 2299              	.LBE62:
1055:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 2300              		.loc 1 1055 1 is_stmt 1 view .LVU603
 2301              	.LBB64:
 2302              	.LBI64:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2303              		.loc 2 719 22 view .LVU604
 2304              	.LBB65:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2305              		.loc 2 721 3 view .LVU605
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2306              		.loc 2 722 3 view .LVU606
 2307 0054 4FF4A033 		mov	r3, #81920
 2308 0058 D361     		str	r3, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2309              		.loc 2 723 3 view .LVU607
 2310 005a 4FF48048 		mov	r8, #16384
 2311 005e C2F81C80 		str	r8, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2312              		.loc 2 724 3 view .LVU608
 2313 0062 D361     		str	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2314              		.loc 2 726 3 view .LVU609
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2315              		.loc 2 726 10 is_stmt 0 view .LVU610
 2316 0064 D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2317              		.loc 2 726 8 view .LVU611
 2318 0066 0F93     		str	r3, [sp, #60]
 2319              		.loc 2 727 3 is_stmt 1 view .LVU612
 2320 0068 0F9B     		ldr	r3, [sp, #60]
 2321              	.LVL202:
 2322              		.loc 2 727 3 is_stmt 0 view .LVU613
 2323              	.LBE65:
 2324              	.LBE64:
1056:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 2325              		.loc 1 1056 1 is_stmt 1 view .LVU614
 2326              	.LBB66:
 2327              	.LBI66:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2328              		.loc 2 719 22 view .LVU615
 2329              	.LBB67:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2330              		.loc 2 721 3 view .LVU616
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2331              		.loc 2 722 3 view .LVU617
 2332 006a 4FF09043 		mov	r3, #1207959552
 2333 006e DD61     		str	r5, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2334              		.loc 2 723 3 view .LVU618
 2335 0070 C3F81CE0 		str	lr, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2336              		.loc 2 724 3 view .LVU619
 2337 0074 DD61     		str	r5, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2338              		.loc 2 726 3 view .LVU620
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
ARM GAS  /tmp/ccEk3fHX.s 			page 80


 2339              		.loc 2 726 10 is_stmt 0 view .LVU621
 2340 0076 DD69     		ldr	r5, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2341              		.loc 2 726 8 view .LVU622
 2342 0078 0E95     		str	r5, [sp, #56]
 2343              		.loc 2 727 3 is_stmt 1 view .LVU623
 2344 007a 0E9D     		ldr	r5, [sp, #56]
 2345              	.LVL203:
 2346              		.loc 2 727 3 is_stmt 0 view .LVU624
 2347              	.LBE67:
 2348              	.LBE66:
1057:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 2349              		.loc 1 1057 1 is_stmt 1 view .LVU625
 2350              	.LBB68:
 2351              	.LBI68:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2352              		.loc 2 719 22 view .LVU626
 2353              	.LBB69:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2354              		.loc 2 721 3 view .LVU627
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2355              		.loc 2 722 3 view .LVU628
 2356 007c DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2357              		.loc 2 723 3 view .LVU629
 2358 007e C3F81CC0 		str	ip, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2359              		.loc 2 724 3 view .LVU630
 2360 0082 DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2361              		.loc 2 726 3 view .LVU631
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2362              		.loc 2 726 10 is_stmt 0 view .LVU632
 2363 0084 DC69     		ldr	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2364              		.loc 2 726 8 view .LVU633
 2365 0086 0D94     		str	r4, [sp, #52]
 2366              		.loc 2 727 3 is_stmt 1 view .LVU634
 2367 0088 0D9C     		ldr	r4, [sp, #52]
 2368              	.LVL204:
 2369              		.loc 2 727 3 is_stmt 0 view .LVU635
 2370              	.LBE69:
 2371              	.LBE68:
1058:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_INT_GAIN_GPIO_Port, M1_OPAMP1_INT_GAIN_Pin);
 2372              		.loc 1 1058 1 is_stmt 1 view .LVU636
 2373              	.LBB70:
 2374              	.LBI70:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2375              		.loc 2 719 22 view .LVU637
 2376              	.LBB71:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2377              		.loc 2 721 3 view .LVU638
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2378              		.loc 2 722 3 view .LVU639
 2379 008a 3C4C     		ldr	r4, .L148+16
 2380 008c DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
ARM GAS  /tmp/ccEk3fHX.s 			page 81


 2381              		.loc 2 723 3 view .LVU640
 2382 008e 0825     		movs	r5, #8
 2383 0090 DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2384              		.loc 2 724 3 view .LVU641
 2385 0092 DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2386              		.loc 2 726 3 view .LVU642
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2387              		.loc 2 726 10 is_stmt 0 view .LVU643
 2388 0094 DC69     		ldr	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2389              		.loc 2 726 8 view .LVU644
 2390 0096 0C94     		str	r4, [sp, #48]
 2391              		.loc 2 727 3 is_stmt 1 view .LVU645
 2392 0098 0C9C     		ldr	r4, [sp, #48]
 2393              	.LVL205:
 2394              		.loc 2 727 3 is_stmt 0 view .LVU646
 2395              	.LBE71:
 2396              	.LBE70:
1059:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_OUT_GPIO_Port, M1_OPAMP1_OUT_Pin);
 2397              		.loc 1 1059 1 is_stmt 1 view .LVU647
 2398              	.LBB72:
 2399              	.LBI72:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2400              		.loc 2 719 22 view .LVU648
 2401              	.LBB73:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2402              		.loc 2 721 3 view .LVU649
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2403              		.loc 2 722 3 view .LVU650
 2404 009a D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2405              		.loc 2 723 3 view .LVU651
 2406 009c DF61     		str	r7, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2407              		.loc 2 724 3 view .LVU652
 2408 009e D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2409              		.loc 2 726 3 view .LVU653
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2410              		.loc 2 726 10 is_stmt 0 view .LVU654
 2411 00a0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2412              		.loc 2 726 8 view .LVU655
 2413 00a2 0B90     		str	r0, [sp, #44]
 2414              		.loc 2 727 3 is_stmt 1 view .LVU656
 2415 00a4 0B98     		ldr	r0, [sp, #44]
 2416              	.LVL206:
 2417              		.loc 2 727 3 is_stmt 0 view .LVU657
 2418              	.LBE73:
 2419              	.LBE72:
1060:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_OUT_GPIO_Port, M1_OPAMP2_OUT_Pin);
 2420              		.loc 1 1060 1 is_stmt 1 view .LVU658
 2421              	.LBB74:
 2422              	.LBI74:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
ARM GAS  /tmp/ccEk3fHX.s 			page 82


 2423              		.loc 2 719 22 view .LVU659
 2424              	.LBB75:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2425              		.loc 2 721 3 view .LVU660
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2426              		.loc 2 722 3 view .LVU661
 2427 00a6 364C     		ldr	r4, .L148+20
 2428 00a8 DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2429              		.loc 2 723 3 view .LVU662
 2430 00aa 4027     		movs	r7, #64
 2431 00ac DF61     		str	r7, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2432              		.loc 2 724 3 view .LVU663
 2433 00ae DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2434              		.loc 2 726 3 view .LVU664
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2435              		.loc 2 726 10 is_stmt 0 view .LVU665
 2436 00b0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2437              		.loc 2 726 8 view .LVU666
 2438 00b2 0A90     		str	r0, [sp, #40]
 2439              		.loc 2 727 3 is_stmt 1 view .LVU667
 2440 00b4 0A98     		ldr	r0, [sp, #40]
 2441              	.LVL207:
 2442              		.loc 2 727 3 is_stmt 0 view .LVU668
 2443              	.LBE75:
 2444              	.LBE74:
1061:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_INT_GAIN_GPIO_Port, M1_OPAMP2_INT_GAIN_Pin);
 2445              		.loc 1 1061 1 is_stmt 1 view .LVU669
 2446              	.LBB76:
 2447              	.LBI76:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2448              		.loc 2 719 22 view .LVU670
 2449              	.LBB77:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2450              		.loc 2 721 3 view .LVU671
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2451              		.loc 2 722 3 view .LVU672
 2452 00b6 3348     		ldr	r0, .L148+24
 2453 00b8 D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2454              		.loc 2 723 3 view .LVU673
 2455 00ba 2025     		movs	r5, #32
 2456 00bc DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2457              		.loc 2 724 3 view .LVU674
 2458 00be D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2459              		.loc 2 726 3 view .LVU675
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2460              		.loc 2 726 10 is_stmt 0 view .LVU676
 2461 00c0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2462              		.loc 2 726 8 view .LVU677
 2463 00c2 0990     		str	r0, [sp, #36]
ARM GAS  /tmp/ccEk3fHX.s 			page 83


 2464              		.loc 2 727 3 is_stmt 1 view .LVU678
 2465 00c4 0998     		ldr	r0, [sp, #36]
 2466              	.LVL208:
 2467              		.loc 2 727 3 is_stmt 0 view .LVU679
 2468              	.LBE77:
 2469              	.LBE76:
1062:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 2470              		.loc 1 1062 1 is_stmt 1 view .LVU680
 2471              	.LBB78:
 2472              	.LBI78:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2473              		.loc 2 719 22 view .LVU681
 2474              	.LBB79:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2475              		.loc 2 721 3 view .LVU682
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2476              		.loc 2 722 3 view .LVU683
 2477 00c6 3048     		ldr	r0, .L148+28
 2478 00c8 D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2479              		.loc 2 723 3 view .LVU684
 2480 00ca 8025     		movs	r5, #128
 2481 00cc DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2482              		.loc 2 724 3 view .LVU685
 2483 00ce D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2484              		.loc 2 726 3 view .LVU686
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2485              		.loc 2 726 10 is_stmt 0 view .LVU687
 2486 00d0 D3F81CC0 		ldr	ip, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2487              		.loc 2 726 8 view .LVU688
 2488 00d4 CDF820C0 		str	ip, [sp, #32]
 2489              		.loc 2 727 3 is_stmt 1 view .LVU689
 2490 00d8 DDF820C0 		ldr	ip, [sp, #32]
 2491              	.LVL209:
 2492              		.loc 2 727 3 is_stmt 0 view .LVU690
 2493              	.LBE79:
 2494              	.LBE78:
1063:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 2495              		.loc 1 1063 1 is_stmt 1 view .LVU691
 2496              	.LBB80:
 2497              	.LBI80:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2498              		.loc 2 719 22 view .LVU692
 2499              	.LBB81:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2500              		.loc 2 721 3 view .LVU693
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2501              		.loc 2 722 3 view .LVU694
 2502 00dc D461     		str	r4, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2503              		.loc 2 723 3 view .LVU695
 2504 00de D761     		str	r7, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2505              		.loc 2 724 3 view .LVU696
ARM GAS  /tmp/ccEk3fHX.s 			page 84


 2506 00e0 D461     		str	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2507              		.loc 2 726 3 view .LVU697
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2508              		.loc 2 726 10 is_stmt 0 view .LVU698
 2509 00e2 D469     		ldr	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2510              		.loc 2 726 8 view .LVU699
 2511 00e4 0794     		str	r4, [sp, #28]
 2512              		.loc 2 727 3 is_stmt 1 view .LVU700
 2513 00e6 079C     		ldr	r4, [sp, #28]
 2514              	.LVL210:
 2515              		.loc 2 727 3 is_stmt 0 view .LVU701
 2516              	.LBE81:
 2517              	.LBE80:
1064:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 2518              		.loc 1 1064 1 is_stmt 1 view .LVU702
 2519              	.LBB82:
 2520              	.LBI82:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2521              		.loc 2 719 22 view .LVU703
 2522              	.LBB83:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2523              		.loc 2 721 3 view .LVU704
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2524              		.loc 2 722 3 view .LVU705
 2525 00e8 D061     		str	r0, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2526              		.loc 2 723 3 view .LVU706
 2527 00ea D561     		str	r5, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2528              		.loc 2 724 3 view .LVU707
 2529 00ec D061     		str	r0, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2530              		.loc 2 726 3 view .LVU708
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2531              		.loc 2 726 10 is_stmt 0 view .LVU709
 2532 00ee D069     		ldr	r0, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2533              		.loc 2 726 8 view .LVU710
 2534 00f0 0690     		str	r0, [sp, #24]
 2535              		.loc 2 727 3 is_stmt 1 view .LVU711
 2536 00f2 0698     		ldr	r0, [sp, #24]
 2537              	.LVL211:
 2538              		.loc 2 727 3 is_stmt 0 view .LVU712
 2539              	.LBE83:
 2540              	.LBE82:
1065:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 2541              		.loc 1 1065 1 is_stmt 1 view .LVU713
 2542              	.LBB84:
 2543              	.LBI84:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2544              		.loc 2 719 22 view .LVU714
 2545              	.LBB85:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2546              		.loc 2 721 3 view .LVU715
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
ARM GAS  /tmp/ccEk3fHX.s 			page 85


 2547              		.loc 2 722 3 view .LVU716
 2548 00f4 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2549              		.loc 2 723 3 view .LVU717
 2550 00f6 DE61     		str	r6, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2551              		.loc 2 724 3 view .LVU718
 2552 00f8 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2553              		.loc 2 726 3 view .LVU719
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2554              		.loc 2 726 10 is_stmt 0 view .LVU720
 2555 00fa D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2556              		.loc 2 726 8 view .LVU721
 2557 00fc 0591     		str	r1, [sp, #20]
 2558              		.loc 2 727 3 is_stmt 1 view .LVU722
 2559 00fe 0599     		ldr	r1, [sp, #20]
 2560              	.LVL212:
 2561              		.loc 2 727 3 is_stmt 0 view .LVU723
 2562              	.LBE85:
 2563              	.LBE84:
1066:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 2564              		.loc 1 1066 1 is_stmt 1 view .LVU724
 2565              	.LBB86:
 2566              	.LBI86:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2567              		.loc 2 719 22 view .LVU725
 2568              	.LBB87:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2569              		.loc 2 721 3 view .LVU726
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2570              		.loc 2 722 3 view .LVU727
 2571 0100 4FF48131 		mov	r1, #66048
 2572 0104 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2573              		.loc 2 723 3 view .LVU728
 2574 0106 4FF40070 		mov	r0, #512
 2575 010a D861     		str	r0, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2576              		.loc 2 724 3 view .LVU729
 2577 010c D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2578              		.loc 2 726 3 view .LVU730
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2579              		.loc 2 726 10 is_stmt 0 view .LVU731
 2580 010e D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2581              		.loc 2 726 8 view .LVU732
 2582 0110 0491     		str	r1, [sp, #16]
 2583              		.loc 2 727 3 is_stmt 1 view .LVU733
 2584 0112 0499     		ldr	r1, [sp, #16]
 2585              	.LVL213:
 2586              		.loc 2 727 3 is_stmt 0 view .LVU734
 2587              	.LBE87:
 2588              	.LBE86:
1067:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
ARM GAS  /tmp/ccEk3fHX.s 			page 86


 2589              		.loc 1 1067 1 is_stmt 1 view .LVU735
 2590              	.LBB88:
 2591              	.LBI88:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2592              		.loc 2 719 22 view .LVU736
 2593              	.LBB89:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2594              		.loc 2 721 3 view .LVU737
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2595              		.loc 2 722 3 view .LVU738
 2596 0114 4FF48231 		mov	r1, #66560
 2597 0118 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2598              		.loc 2 723 3 view .LVU739
 2599 011a 4FF48060 		mov	r0, #1024
 2600 011e D861     		str	r0, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2601              		.loc 2 724 3 view .LVU740
 2602 0120 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2603              		.loc 2 726 3 view .LVU741
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2604              		.loc 2 726 10 is_stmt 0 view .LVU742
 2605 0122 D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2606              		.loc 2 726 8 view .LVU743
 2607 0124 0391     		str	r1, [sp, #12]
 2608              		.loc 2 727 3 is_stmt 1 view .LVU744
 2609 0126 0399     		ldr	r1, [sp, #12]
 2610              	.LVL214:
 2611              		.loc 2 727 3 is_stmt 0 view .LVU745
 2612              	.LBE89:
 2613              	.LBE88:
1068:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 2614              		.loc 1 1068 1 is_stmt 1 view .LVU746
 2615              	.LBB90:
 2616              	.LBI90:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2617              		.loc 2 719 22 view .LVU747
 2618              	.LBB91:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2619              		.loc 2 721 3 view .LVU748
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2620              		.loc 2 722 3 view .LVU749
 2621 0128 4FF48831 		mov	r1, #69632
 2622 012c D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2623              		.loc 2 723 3 view .LVU750
 2624 012e 4FF48050 		mov	r0, #4096
 2625 0132 D861     		str	r0, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2626              		.loc 2 724 3 view .LVU751
 2627 0134 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2628              		.loc 2 726 3 view .LVU752
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2629              		.loc 2 726 10 is_stmt 0 view .LVU753
ARM GAS  /tmp/ccEk3fHX.s 			page 87


 2630 0136 DB69     		ldr	r3, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2631              		.loc 2 726 8 view .LVU754
 2632 0138 0293     		str	r3, [sp, #8]
 2633              		.loc 2 727 3 is_stmt 1 view .LVU755
 2634 013a 029B     		ldr	r3, [sp, #8]
 2635              	.LVL215:
 2636              		.loc 2 727 3 is_stmt 0 view .LVU756
 2637              	.LBE91:
 2638              	.LBE90:
1069:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 2639              		.loc 1 1069 1 is_stmt 1 view .LVU757
 2640              	.LBB92:
 2641              	.LBI92:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2642              		.loc 2 719 22 view .LVU758
 2643              	.LBB93:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2644              		.loc 2 721 3 view .LVU759
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2645              		.loc 2 722 3 view .LVU760
 2646 013c 4FF4C033 		mov	r3, #98304
 2647 0140 D361     		str	r3, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2648              		.loc 2 723 3 view .LVU761
 2649 0142 4FF40041 		mov	r1, #32768
 2650 0146 D161     		str	r1, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2651              		.loc 2 724 3 view .LVU762
 2652 0148 D361     		str	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2653              		.loc 2 726 3 view .LVU763
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2654              		.loc 2 726 10 is_stmt 0 view .LVU764
 2655 014a D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2656              		.loc 2 726 8 view .LVU765
 2657 014c 0193     		str	r3, [sp, #4]
 2658              		.loc 2 727 3 is_stmt 1 view .LVU766
 2659 014e 019B     		ldr	r3, [sp, #4]
 2660              	.LVL216:
 2661              		.loc 2 727 3 is_stmt 0 view .LVU767
 2662              	.LBE93:
 2663              	.LBE92:
1070:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 2664              		.loc 1 1070 1 is_stmt 1 view .LVU768
 2665              	.LBB94:
 2666              	.LBI94:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2667              		.loc 2 719 22 view .LVU769
 2668              	.LBB95:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2669              		.loc 2 721 3 view .LVU770
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2670              		.loc 2 722 3 view .LVU771
 2671 0150 0E4B     		ldr	r3, .L148+32
 2672 0152 4FF49032 		mov	r2, #73728
ARM GAS  /tmp/ccEk3fHX.s 			page 88


 2673 0156 DA61     		str	r2, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2674              		.loc 2 723 3 view .LVU772
 2675 0158 4FF40051 		mov	r1, #8192
 2676 015c D961     		str	r1, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2677              		.loc 2 724 3 view .LVU773
 2678 015e DA61     		str	r2, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2679              		.loc 2 726 3 view .LVU774
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2680              		.loc 2 726 10 is_stmt 0 view .LVU775
 2681 0160 DB69     		ldr	r3, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2682              		.loc 2 726 8 view .LVU776
 2683 0162 0093     		str	r3, [sp]
 2684              		.loc 2 727 3 is_stmt 1 view .LVU777
 2685 0164 009B     		ldr	r3, [sp]
 2686              	.LVL217:
 2687              		.loc 2 727 3 is_stmt 0 view .LVU778
 2688              	.LBE95:
 2689              	.LBE94:
1071:Src/mc_tasks.c **** }
 2690              		.loc 1 1071 1 view .LVU779
 2691 0166 14B0     		add	sp, sp, #80
 2692              		.cfi_def_cfa_offset 24
 2693              		@ sp needed
 2694 0168 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2695              	.L149:
 2696              		.align	2
 2697              	.L148:
 2698 016c 00040048 		.word	1207960576
 2699 0170 04000100 		.word	65540
 2700 0174 02000100 		.word	65538
 2701 0178 00010100 		.word	65792
 2702 017c 08000100 		.word	65544
 2703 0180 40000100 		.word	65600
 2704 0184 20000100 		.word	65568
 2705 0188 80000100 		.word	65664
 2706 018c 00080048 		.word	1207961600
 2707              		.cfi_endproc
 2708              	.LFE1641:
 2710              		.section	.bss.FOCVars,"aw",%nobits
 2711              		.align	2
 2712              		.set	.LANCHOR0,. + 0
 2715              	FOCVars:
 2716 0000 00000000 		.space	38
 2716      00000000 
 2716      00000000 
 2716      00000000 
 2716      00000000 
 2717              		.section	.bss.bMCBootCompleted,"aw",%nobits
 2718              		.set	.LANCHOR2,. + 0
 2721              	bMCBootCompleted:
 2722 0000 00       		.space	1
 2723              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 2724              		.align	1
ARM GAS  /tmp/ccEk3fHX.s 			page 89


 2725              		.set	.LANCHOR5,. + 0
 2728              	hBootCapDelayCounterM1:
 2729 0000 0000     		.space	2
 2730              		.section	.bss.hMFTaskCounterM1,"aw",%nobits
 2731              		.align	1
 2732              		.set	.LANCHOR7,. + 0
 2735              	hMFTaskCounterM1:
 2736 0000 0000     		.space	2
 2737              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
 2738              		.align	1
 2739              		.set	.LANCHOR6,. + 0
 2742              	hStopPermanencyCounterM1:
 2743 0000 0000     		.space	2
 2744              		.section	.bss.pCLM,"aw",%nobits
 2745              		.align	2
 2746              		.set	.LANCHOR3,. + 0
 2749              	pCLM:
 2750 0000 00000000 		.space	4
 2751              		.section	.bss.pREMNG,"aw",%nobits
 2752              		.align	2
 2753              		.set	.LANCHOR4,. + 0
 2756              	pREMNG:
 2757 0000 00000000 		.space	4
 2758              		.section	.bss.pwmcHandle,"aw",%nobits
 2759              		.align	2
 2760              		.set	.LANCHOR1,. + 0
 2763              	pwmcHandle:
 2764 0000 00000000 		.space	4
 2765              		.text
 2766              	.Letext0:
 2767              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2768              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2769              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2770              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2771              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2772              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2773              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2774              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2775              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2776              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2777              		.file 13 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 2778              		.file 14 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2779              		.file 15 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2780              		.file 16 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2781              		.file 17 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2782              		.file 18 "Inc/regular_conversion_manager.h"
 2783              		.file 19 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2784              		.file 20 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 2785              		.file 21 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
 2786              		.file 22 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 2787              		.file 23 "Inc/mc_interface.h"
 2788              		.file 24 "Inc/mc_configuration_registers.h"
 2789              		.file 25 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2790              		.file 26 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2791              		.file 27 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2792              		.file 28 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 2793              		.file 29 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
ARM GAS  /tmp/ccEk3fHX.s 			page 90


 2794              		.file 30 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2795              		.file 31 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 2796              		.file 32 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_cordic_speed_pos_fdbk.h"
 2797              		.file 33 "Inc/mc_config.h"
 2798              		.file 34 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 2799              		.file 35 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 2800              		.file 36 "Inc/aspep.h"
 2801              		.file 37 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 2802              		.file 38 "Inc/mcp_config.h"
 2803              		.file 39 "Inc/mc_api.h"
 2804              		.file 40 "Inc/mc_math.h"
 2805              		.file 41 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_common.h"
ARM GAS  /tmp/ccEk3fHX.s 			page 91


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_tasks.c
     /tmp/ccEk3fHX.s:18     .text.FOC_Clear:0000000000000000 $t
     /tmp/ccEk3fHX.s:26     .text.FOC_Clear:0000000000000000 FOC_Clear
     /tmp/ccEk3fHX.s:120    .text.FOC_Clear:0000000000000078 $d
     /tmp/ccEk3fHX.s:129    .text.MCboot:0000000000000000 $t
     /tmp/ccEk3fHX.s:136    .text.MCboot:0000000000000000 MCboot
     /tmp/ccEk3fHX.s:327    .text.MCboot:00000000000000f0 $d
     /tmp/ccEk3fHX.s:353    .text.FOC_InitAdditionalMethods:0000000000000000 $t
     /tmp/ccEk3fHX.s:360    .text.FOC_InitAdditionalMethods:0000000000000000 FOC_InitAdditionalMethods
     /tmp/ccEk3fHX.s:376    .text.FOC_CalcCurrRef:0000000000000000 $t
     /tmp/ccEk3fHX.s:383    .text.FOC_CalcCurrRef:0000000000000000 FOC_CalcCurrRef
     /tmp/ccEk3fHX.s:428    .text.FOC_CalcCurrRef:000000000000002c $d
     /tmp/ccEk3fHX.s:434    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 $t
     /tmp/ccEk3fHX.s:441    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 TSK_SetChargeBootCapDelayM1
     /tmp/ccEk3fHX.s:458    .text.TSK_SetChargeBootCapDelayM1:0000000000000008 $d
     /tmp/ccEk3fHX.s:463    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 $t
     /tmp/ccEk3fHX.s:470    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 TSK_ChargeBootCapDelayHasElapsedM1
     /tmp/ccEk3fHX.s:499    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000010 $d
     /tmp/ccEk3fHX.s:504    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 $t
     /tmp/ccEk3fHX.s:511    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 TSK_SetStopPermanencyTimeM1
     /tmp/ccEk3fHX.s:528    .text.TSK_SetStopPermanencyTimeM1:0000000000000008 $d
     /tmp/ccEk3fHX.s:533    .text.TSK_MF_StopProcessing:0000000000000000 $t
     /tmp/ccEk3fHX.s:540    .text.TSK_MF_StopProcessing:0000000000000000 TSK_MF_StopProcessing
     /tmp/ccEk3fHX.s:586    .text.TSK_MF_StopProcessing:0000000000000038 $d
     /tmp/ccEk3fHX.s:593    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 $t
     /tmp/ccEk3fHX.s:600    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 TSK_StopPermanencyTimeHasElapsedM1
     /tmp/ccEk3fHX.s:629    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000010 $d
     /tmp/ccEk3fHX.s:634    .text.TSK_MediumFrequencyTaskM1:0000000000000000 $t
     /tmp/ccEk3fHX.s:641    .text.TSK_MediumFrequencyTaskM1:0000000000000000 TSK_MediumFrequencyTaskM1
     /tmp/ccEk3fHX.s:718    .text.TSK_MediumFrequencyTaskM1:0000000000000054 $d
     /tmp/ccEk3fHX.s:738    .text.TSK_MediumFrequencyTaskM1:00000000000000a4 $t
     /tmp/ccEk3fHX.s:1190   .text.TSK_MediumFrequencyTaskM1:00000000000002e0 $d
     /tmp/ccEk3fHX.s:1208   .text.TSK_MediumFrequencyTaskM1:000000000000030c $t
     /tmp/ccEk3fHX.s:1336   .text.TSK_MediumFrequencyTaskM1:0000000000000398 $d
     /tmp/ccEk3fHX.s:1343   .text.MC_Scheduler:0000000000000000 $t
     /tmp/ccEk3fHX.s:1350   .text.MC_Scheduler:0000000000000000 MC_Scheduler
     /tmp/ccEk3fHX.s:1479   .text.MC_Scheduler:0000000000000084 $d
     /tmp/ccEk3fHX.s:1488   .text.TSK_HighFrequencyTask:0000000000000000 $t
     /tmp/ccEk3fHX.s:1495   .text.TSK_HighFrequencyTask:0000000000000000 TSK_HighFrequencyTask
     /tmp/ccEk3fHX.s:1811   .text.TSK_HighFrequencyTask:0000000000000164 $d
     /tmp/ccEk3fHX.s:1830   .text.TSK_SafetyTask_PWMOFF:0000000000000000 $t
     /tmp/ccEk3fHX.s:1837   .text.TSK_SafetyTask_PWMOFF:0000000000000000 TSK_SafetyTask_PWMOFF
     /tmp/ccEk3fHX.s:1950   .text.TSK_SafetyTask_PWMOFF:000000000000007c $d
     /tmp/ccEk3fHX.s:1960   .text.TSK_SafetyTask:0000000000000000 $t
     /tmp/ccEk3fHX.s:1967   .text.TSK_SafetyTask:0000000000000000 TSK_SafetyTask
     /tmp/ccEk3fHX.s:2001   .text.TSK_SafetyTask:000000000000001c $d
     /tmp/ccEk3fHX.s:2006   .text.MC_RunMotorControlTasks:0000000000000000 $t
     /tmp/ccEk3fHX.s:2013   .text.MC_RunMotorControlTasks:0000000000000000 MC_RunMotorControlTasks
     /tmp/ccEk3fHX.s:2044   .text.MC_RunMotorControlTasks:0000000000000014 $d
     /tmp/ccEk3fHX.s:2049   .text.GetMCI:0000000000000000 $t
     /tmp/ccEk3fHX.s:2056   .text.GetMCI:0000000000000000 GetMCI
     /tmp/ccEk3fHX.s:2089   .text.GetMCI:0000000000000014 $d
     /tmp/ccEk3fHX.s:2094   .text.TSK_HardwareFaultTask:0000000000000000 $t
     /tmp/ccEk3fHX.s:2101   .text.TSK_HardwareFaultTask:0000000000000000 TSK_HardwareFaultTask
     /tmp/ccEk3fHX.s:2127   .text.TSK_HardwareFaultTask:0000000000000018 $d
     /tmp/ccEk3fHX.s:2133   .text.UI_HandleStartStopButton_cb:0000000000000000 $t
ARM GAS  /tmp/ccEk3fHX.s 			page 92


     /tmp/ccEk3fHX.s:2140   .text.UI_HandleStartStopButton_cb:0000000000000000 UI_HandleStartStopButton_cb
     /tmp/ccEk3fHX.s:2174   .text.mc_lock_pins:0000000000000000 $t
     /tmp/ccEk3fHX.s:2181   .text.mc_lock_pins:0000000000000000 mc_lock_pins
     /tmp/ccEk3fHX.s:2698   .text.mc_lock_pins:000000000000016c $d
     /tmp/ccEk3fHX.s:2711   .bss.FOCVars:0000000000000000 $d
     /tmp/ccEk3fHX.s:2715   .bss.FOCVars:0000000000000000 FOCVars
     /tmp/ccEk3fHX.s:2721   .bss.bMCBootCompleted:0000000000000000 bMCBootCompleted
     /tmp/ccEk3fHX.s:2722   .bss.bMCBootCompleted:0000000000000000 $d
     /tmp/ccEk3fHX.s:2724   .bss.hBootCapDelayCounterM1:0000000000000000 $d
     /tmp/ccEk3fHX.s:2728   .bss.hBootCapDelayCounterM1:0000000000000000 hBootCapDelayCounterM1
     /tmp/ccEk3fHX.s:2731   .bss.hMFTaskCounterM1:0000000000000000 $d
     /tmp/ccEk3fHX.s:2735   .bss.hMFTaskCounterM1:0000000000000000 hMFTaskCounterM1
     /tmp/ccEk3fHX.s:2738   .bss.hStopPermanencyCounterM1:0000000000000000 $d
     /tmp/ccEk3fHX.s:2742   .bss.hStopPermanencyCounterM1:0000000000000000 hStopPermanencyCounterM1
     /tmp/ccEk3fHX.s:2745   .bss.pCLM:0000000000000000 $d
     /tmp/ccEk3fHX.s:2749   .bss.pCLM:0000000000000000 pCLM
     /tmp/ccEk3fHX.s:2752   .bss.pREMNG:0000000000000000 $d
     /tmp/ccEk3fHX.s:2756   .bss.pREMNG:0000000000000000 pREMNG
     /tmp/ccEk3fHX.s:2759   .bss.pwmcHandle:0000000000000000 $d
     /tmp/ccEk3fHX.s:2763   .bss.pwmcHandle:0000000000000000 pwmcHandle

UNDEFINED SYMBOLS
PID_SetIntegralTerm
STC_Clear
PWMC_SwitchOffPWM
pPIDIq
pPIDId
pSTC
R3_2_Init
ASPEP_start
startTimers
PID_HandleInit
STO_CR_Init
STC_Init
STO_PLL_Init
VSS_Init
RUC_Init
RVBS_Init
NTC_Init
REMNG_Init
STC_GetDefaultIqdref
MCI_Init
STC_GetMecSpeedRefUnitDefault
MCI_ExecSpeedRamp
CircleLimitationM1
PWM_Handle_M1
aspepOverUartA
PIDSpeedHandle_M1
STO_CR_M1
STO_PLL_M1
VirtualSpeedSensorM1
STO_M1
RevUpControlM1
PIDIqHandle_M1
PIDIdHandle_M1
BusVoltageSensor_M1
pMPM
ARM GAS  /tmp/ccEk3fHX.s 			page 93


TempSensor_M1
RampExtMngrHFParamsM1
Mci
STC_CalcTorqueReference
R3_2_SwitchOffPWM
PQD_Clear
STO_PLL_CalcAvrgMecSpeedUnit
STO_CR_CalcAvrgMecSpeedUnit
PQD_CalcElMotorPower
MCI_GetCurrentFaults
MCI_GetOccurredFaults
MCI_GetImposedMotorDirection
RUC_Clear
PWMC_CurrentReadingCalibr
R3_2_TurnOnLowSides
STC_SetSpeedSensor
STO_CR_Clear
STO_PLL_Clear
PWMC_SwitchOnPWM
RUC_Exec
MCI_FaultProcessing
VSS_CalcAvrgMecSpeedUnit
RUC_FirstAccelerationStageReached
STO_CR_IsObserverConverged
VSS_SetStartTransition
SPD_GetElAngle
MCM_Park
REMNG_ExecRamp
VSS_TransitionEnded
PID_GetKIDivisor
STC_ForceSpeedReferenceToCurrentSpeed
MCI_ExecBufferedCommands
VSS_Clear
MCP_ReceivedPacket
MCP_Over_UartA
STC_GetSpeedSensor
SPD_GetInstElSpeedDpp
PWMC_GetPhaseCurrents
RCM_ReadOngoingConv
RCM_ExecNextConv
MCM_Clarke
PI_Controller
Circle_Limitation
MCM_Rev_Park
PWMC_SetPhaseVoltage
VBS_GetAvBusVoltage_d
STO_CR_CalcElAngle
STO_CR_CalcAvrgElSpeedDpp
STO_PLL_CalcElAngle
STO_PLL_CalcAvrgElSpeedDpp
REMNG_RampCompleted
REMNG_Calc
VSS_CalcElAngle
MCPA_dataLog
GLOBAL_TIMESTAMP
MCPA_UART_A
NTC_CalcAvTemp
ARM GAS  /tmp/ccEk3fHX.s 			page 94


PWMC_CheckOverCurrent
MCI_GetFaultState
RVBS_CalcAvVbus
MCPA_flushDataLog
pTemperatureSensor
RCM_ExecUserConv
MC_GetSTMStateMotor1
MC_StartMotor1
MC_StopMotor1
